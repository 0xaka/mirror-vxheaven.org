<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title> Statistical Executable Trash Generator - Computer virus engines (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="Released in 29a magazine #8  Author's doc  Sometimes we need to generate some &quot;trash&quot; or &quot;garbage&quot; code.  This is useful in poly/meta-morphic engines and in obfuscation techniques.  There exists ETG (executable trash generator) engine.  It has important feature: you can specify characterictics of the code to  be generated. In other words, it can generate x86 assembly code of some  required properties, such as    set of possible instructions  set of possible source registers  set of possible destination registers    For example, you say ETG(ADD|XOR|SUB, EAX|EBX, EAX|EBX|ECX|EDX) and  in the output there will appear only these three instructions  which will read only EAX..EDX registers and store results into EAX or EBX.  This can be useful when you want to generate polymorphic decryptor  which will use only ESI/EDI/ECX/EDX registers,  or generate a small set of trash instructions which will not modify  some specific registers.      etg_engine(0x12345678,                            // user-parameter               ETG_ALL&amp;(~(ETG_JMPS|ETG_SEG|ETG_REP)), // set of instructions               REG_ALL,                               // src: all registers               REG_ALL&amp;(~REG_EDX),                    // dst: all but edx               &amp;bufsize,                              // [out] ptr to output size               1000,                                  // max # of instructions               sizeof(buf),                           // max output buffer size               buf,                                   // output buffer               my_random);                            // user-specified randomer    output:      movzx   edi, bp    bsr     ebp, edi    bt      ebp, 6Bh    sbb     al, 0BBh    bswap   esi    adc     eax, edx    mov     ecx, edi    dec     al    mov     esi, 63F2CDDh    test    edx, edi    inc     ebx    mov     al, dh    imul    esi, ecx, 0B9AE0794h    bsr     eax, ebx    shld    edi, esi, 5    ...    As you can see, this code has one property:  there is no any relations between instructions,  and so it is very easy to detect it.  Now, we can introduce some classification of executable code,  using relations-between-instructions as main criteria:    typical garbage used in polymorphic engines: no relations at all  &quot;real&quot; or generated code: almost all instructions are interrelated    But, if we will merge these two types of code, we will get    relations between neighbour instructions only.    For example, if you see PUSH EBP, it will be followed by MOV EBP,ESP  with high probability.  But, if you see ADD EAX,EBX it will almost never be followed by SUB EAX,EBX.    So, we can somehow calculate some big matrix (its just an example):    this  next-&gt; push ebp   mov ebp,esp   add eax,ebx  sub eax,ebx   ...  ~~~~  push ebp       0            100            2            2        ...  mov ebp,esp    1             0             2            2        ...  add eax,ebx    2             2             10           0        ...  sub eax,ebx    2             2             0            10       ...  ...           ...           ...           ...          ...    As such, for each known instruction we can have a set of following  instructions with some &quot;weigths&quot; - this can be just a numbers or  probabilities (normalized numbers).    From the matrix above we can see that PUSH EBP is never used twice,  but can be followed by MOV EBP,ESP with probability  of 100/(0+100+2+2) = 0.96    When we have a set of &quot;weights&quot; and &quot;items&quot;, we may need some  special algorithm of random items selection,  such that items will be choosen according to their wights.    To build database of &quot;instruction chains&quot;, i.e. a set of  (count,instruction1,instruction2,...) we need to disassemble  lots of executable files; this can be done using mistfall engine,  see calcchains.cpp &amp;&amp; gen_db.bat.    resulting db looks like this (n_chains.txt):    00089375 C20000  00041587 C3  00031113 C9 C20000  00030164 5D C20000  00029763 5F 5E 5B  00029095 55 8BEC 83EC00  00024393 FF7500 FF7500 FF7500  00019356 5E 5B C9  00018668 5B C9 C20000  00016724 50 8D4500 50  00014922 53 56 57  00014249 5D C3  ...  00000655 85C0 7500 8B0D00000000  00000654 7400 F6450000 7400  00000652 C1E000 50 E800000000  00000652 8B4000 85C0 7400  00000652 894500 8B4600 894500  00000652 85C9 7400 8B5500  ...    While disassembling, we use some form of &quot;stemming&quot; technique:  we partialy fill instructions with zeroes:  for example &quot;mov eax, 1&quot; and &quot;mov eax, 2&quot; becomes &quot;mov eax, 0&quot;;  i.e. we set to zero &quot;address&quot; and &quot;immediate&quot; parts of the each instruction -  this can be done using XDE engine.    However, there can be some higher levels of stemming,  for example to reorder register numbers within instruction chains,  i.e. always convert something like &quot;mov r1,r2 | add r1,r3 | sub r1,r4&quot;  to &quot;mov eax,ecx | add eax,edx | sub eax,ebx&quot;.  Also we can use some kind of &quot;deoptimization&quot;,  i.e. to split instruction chains into independent subchains,  because optimizing compilers usually mix instructions.  This all can help in building better knowlegde about statistical  relations between instructions.    When instruction data base is created, you can generate  some code using setg1.pl script.    Note that generated instructions are not real ones;  all immediate/address values are set to zero.  To &quot;fill&quot; instructions, use setg2.cpp.    Resulting random code looks like this:     mov ecx,[ecx]   add eax,edx   add esi,edx   mov dx,[edi]   add esi,byte +0x6c   cmp eax,[ebp-0x6c]   jz ...   push dword [ebp+0x64]   push dword [ebp+0x3c]   call edi   test eax,eax   jz near ...   cmp edi,eax   jnz ...   pop edi   pop esi   leave   ret 0x46e4   mov eax,[eax]   call near [eax]   pop eax   pop ebp   ret 0x6320   xor ebx,ebx   push eax   push ebx   push esi    In case when we need code of special properties, as in ETG engine,  we can do the following: when building database, simply filter out  all the instructions we dont need; so, we will get statistics about  relations between only required instructions, and generated code  will consist of correct instructions only."/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"4a292051d70636d354ed04028f9932b6ffa65a13-1498757804-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/vx.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2"> [<a href="/vx.php?id=es15">Previous</a>] [<a href="/vx.php?id=eidx">Index</a>] [<a href="/vx.php?id=es17">Next</a>] <h1> Statistical Executable Trash Generator</h1><p>Released in <a href="/vx.php?fid=1388#f1388">29a magazine #8</a></p>
<p><strong>Author's doc</strong></p>
<p>Sometimes we need to generate some "trash" or "garbage" code.
This is useful in poly/meta-morphic engines and in obfuscation techniques.</p>
<p>There exists ETG (executable trash generator) engine.
It has important feature: you can specify characterictics of the code to
be generated. In other words, it can generate x86 assembly code of some
required properties, such as</p>
<ol>
<li>set of possible instructions</li>
<li>set of possible source registers</li>
<li>set of possible destination registers</li>
</ol>
<p>For example, you say ETG(ADD|XOR|SUB, EAX|EBX, EAX|EBX|ECX|EDX) and
in the output there will appear only these three instructions
which will read only EAX..EDX registers and store results into EAX or EBX.
This can be useful when you want to generate polymorphic decryptor
which will use only ESI/EDI/ECX/EDX registers,
or generate a small set of trash instructions which will not modify
some specific registers.</p>
<pre class="source">
  etg_engine(0x12345678,                            // user-parameter
             ETG_ALL&(~(ETG_JMPS|ETG_SEG|ETG_REP)), // set of instructions
             REG_ALL,                               // src: all registers
             REG_ALL&(~REG_EDX),                    // dst: all but edx
             &bufsize,                              // [out] ptr to output size
             1000,                                  // max # of instructions
             sizeof(buf),                           // max output buffer size
             buf,                                   // output buffer
             my_random);                            // user-specified randomer
</pre>
<p>output:</p>
<pre class="source">
  movzx   edi, bp
  bsr     ebp, edi
  bt      ebp, 6Bh
  sbb     al, 0BBh
  bswap   esi
  adc     eax, edx
  mov     ecx, edi
  dec     al
  mov     esi, 63F2CDDh
  test    edx, edi
  inc     ebx
  mov     al, dh
  imul    esi, ecx, 0B9AE0794h
  bsr     eax, ebx
  shld    edi, esi, 5
  ...
</pre>
<p>As you can see, this code has one property:
there is no any relations between instructions,
and so it is very easy to detect it.</p>
<p>Now, we can introduce some classification of executable code,
using relations-between-instructions as main criteria:</p>
<ol>
<li>typical garbage used in polymorphic engines: no relations at all</li>
<li>"real" or generated code: almost all instructions are interrelated</li>
</ol>
<p>But, if we will merge these two types of code, we will get</p>
<ol start="3">
<li>relations between neighbour instructions only.</li>
</ol>
<p>For example, if you see PUSH EBP, it will be followed by MOV EBP,ESP
with high probability.
But, if you see ADD EAX,EBX it will almost never be followed by SUB EAX,EBX.</p>
<p>So, we can somehow calculate some big matrix (its just an example):</p>
<pre>
this  next-> push ebp   mov ebp,esp   add eax,ebx  sub eax,ebx   ...
~~~~
push ebp       0            100            2            2        ...
mov ebp,esp    1             0             2            2        ...
add eax,ebx    2             2             10           0        ...
sub eax,ebx    2             2             0            10       ...
...           ...           ...           ...          ...
</pre>
<p>As such, for each known instruction we can have a set of following
instructions with some "weigths" - this can be just a numbers or
probabilities (normalized numbers).</p>
<p>From the matrix above we can see that PUSH EBP is never used twice,
but can be followed by MOV EBP,ESP with probability
of 100/(0+100+2+2) = 0.96</p>
<p>When we have a set of "weights" and "items", we may need some
special algorithm of random items selection,
such that items will be choosen according to their wights.</p>
<p>To build database of "instruction chains", i.e. a set of
(count,instruction1,instruction2,...) we need to disassemble
lots of executable files; this can be done using mistfall engine,
see calcchains.cpp && gen_db.bat.</p>
<p>resulting db looks like this (n_chains.txt):</p>
<pre class="source">
00089375 C20000
00041587 C3
00031113 C9 C20000
00030164 5D C20000
00029763 5F 5E 5B
00029095 55 8BEC 83EC00
00024393 FF7500 FF7500 FF7500
00019356 5E 5B C9
00018668 5B C9 C20000
00016724 50 8D4500 50
00014922 53 56 57
00014249 5D C3
...
00000655 85C0 7500 8B0D00000000
00000654 7400 F6450000 7400
00000652 C1E000 50 E800000000
00000652 8B4000 85C0 7400
00000652 894500 8B4600 894500
00000652 85C9 7400 8B5500
...
</pre>
<p>While disassembling, we use some form of "stemming" technique:
we partialy fill instructions with zeroes:
for example "mov eax, 1" and "mov eax, 2" becomes "mov eax, 0";
i.e. we set to zero "address" and "immediate" parts of the each instruction -
this can be done using XDE engine.</p>
<p>However, there can be some higher levels of stemming,
for example to reorder register numbers within instruction chains,
i.e. always convert something like "mov r1,r2 | add r1,r3 | sub r1,r4"
to "mov eax,ecx | add eax,edx | sub eax,ebx".
Also we can use some kind of "deoptimization",
i.e. to split instruction chains into independent subchains,
because optimizing compilers usually mix instructions.
This all can help in building better knowlegde about statistical
relations between instructions.</p>
<p>When instruction data base is created, you can generate
some code using setg1.pl script.</p>
<p>Note that generated instructions are not real ones;
all immediate/address values are set to zero.
To "fill" instructions, use setg2.cpp.</p>
<p>Resulting random code looks like this:</p>
<pre>
 mov ecx,[ecx]
 add eax,edx
 add esi,edx
 mov dx,[edi]
 add esi,byte +0x6c
 cmp eax,[ebp-0x6c]
 jz ...
 push dword [ebp+0x64]
 push dword [ebp+0x3c]
 call edi
 test eax,eax
 jz near ...
 cmp edi,eax
 jnz ...
 pop edi
 pop esi
 leave
 ret 0x46e4
 mov eax,[eax]
 call near [eax]
 pop eax
 pop ebp
 ret 0x6320
 xor ebx,ebx
 push eax
 push ebx
 push esi
</pre>
<p>In case when we need code of special properties, as in ETG engine,
we can do the following: when building database, simply filter out
all the instructions we dont need; so, we will get statistics about
relations between only required instructions, and generated code
will consist of correct instructions only.</p>
<br clear="all"/><script type="text/rocketscript">var disqus_url = 'http://vxheaven.org/vx.php?id=es30';</script><a href="/vx.php?id=es30#disqus_thread">Comments</a><br/><div style="float:left;"><div style="float: left;"><strong>Download</strong></div><br clear="all"/><table cellspacing="0" cellpadding="0" border="1"><tr bgcolor="#aaa999"><th>&nbsp;</th><th>Filename</th><th>Size</th><th>Description</th><th>Date</th><th>&nbsp;</th></tr><tr bgcolor="#cccbbb"><td><form class="fr" method="post" action="/file.php"><input type="image" src="/img/dl.gif" alt="Download"/><input type="hidden" name="file" value="cGxlL3NldGcuemlw"/></form></td><td><a name="f1918"></a><small><a href="/dl/ple/setg.zip">setg.zip</a></small></td><td><small>34261</small></td><td><small>SETG</small></td><td><small>Dec 2004</small></td><td><small style="float: right; font-family: fixed;">MD5 sum 357f60481810996d35981606babb610b</small></td></tr></table></div><br clear="all"/><br/><div class="s2">
<div id="disqus_thread"></div>
<script type="text/rocketscript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'vxheaven'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/vx.php?lang=de&amp;id=es30">de</a><a href="/vx.php?lang=en&amp;id=es30">en</a><a href="/vx.php?lang=es&amp;id=es30">es</a><a href="/vx.php?lang=it&amp;id=es30">it</a><a href="/vx.php?lang=fr&amp;id=es30">fr</a><a href="/vx.php?lang=pl&amp;id=es30">pl</a><a href="/vx.php?lang=ru&amp;id=es30">ru</a><a href="/vx.php?lang=ua&amp;id=es30">ua</a></div>
</body>
</html>
