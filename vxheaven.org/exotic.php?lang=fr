<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Viruses for the 'Exotic' Platforms (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"7539358e55f5ae68019f128fb351108fbf68cc30-1498757664-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/exotic.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option selected="selected" value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Biblioth&egrave;que</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2"><div class="e1">
<h1>Computer viruses for "exotic" platforms</h1>
<h2 style="float:left; margin: 0; padding: 0;">Apple II</h2>
<img src="/img/apple2.gif" alt="Apple II" style="float:right;"/>
<br clear="all"/>
<dl>
<dt id="cloner"><strong>Elk Cloner</strong>, Richard Skrenta, 1982
[<a href="/dl/exp/elk_cloner.a02">Source</a>]
[<a href="/dl/exp/elk_cloner.dsk.gz">Disk Image</a>]
</dt>
<dd>
<p>Elk Cloner is the first known computer virus that has spread "in the wild", i.e., outside the computer system or lab it was written in. It was written around 1982 by a 15-year-old high school student named Richard Skrenta for Apple II systems.</p>
<p>Elk Cloner spread by infecting the Apple II's operating system, stored on floppy disks. When the computer was booted from an infected floppy, a copy of the virus would automatically start. The virus would not normally alter the working of the computer, except from monitoring disk access. When an uninfected floppy was accessed, the virus would copy itself to the disk, thus infecting it, too, slowly spreading from floppy to floppy.</p>
<p>Like many of the early viruses, Elk Cloner did not cause any deliberate harm, although some sources suggest that it could harm disks not containing the operating system. Like many of the early viruses, however, it did cause annoyance: on every 50th booting the virus would display a short "poem", as follows:</p>
<blockquote>
<p>Elk Cloner: The program with a personality</p>
<p>It will get on all your disks<br/>
It will infiltrate your chips<br/>
Yes it's Cloner!</p>
<p>It will stick to you like glue<br/>
It will modify ram too<br/>
Send in the Cloner!</p>
</blockquote>
<p>Annoyance in fact was the raison d'tre of the virus. Its 15-year-old author previously had the habit of giving out pirated computer games to his friends, but games modified such that they would stop working after a given number of games. This scheme guaranteed a high level of annoyance: by the time those friends grew to like the programs the programs would stop working, usually with some "humorous" message (at least as judged by their author). After a while those friends learned never to allow Skrenta near their disks. Here came Cloner, which could annoy friends without Skrenta physically gaining access to their disks.</p>
<p>According to contemporary reports, the virus was rather contagious, successfully infecting the floppies of most people Skrenta knew (including his math teacher), upsetting many of them (including the said math teacher). Part of the "success", of course, was that people were not at all wary of the potential problem (virus infection could have been avoided by not inserting floppies into computers without hard-booting them before), nor were virus scanners or cleaners available. The virus could still be removed but it required an elaborate manual effort.</p>
</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">Amiga</h2>
<img src="/img/amiga500.gif" alt="Amiga 500" style="float:right;"/>
<br clear="all"/>
<dl>
<dt>Amiga virus collection [<a href="/dl/exp/amiga.zip">Download</a>]</dt>
<dd>
414 viruses and trojans
</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">Atari</h2><a name="ATARI"></a>
<img src="/img/atari.gif" alt="Atari" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><strong>Atari ST virus collection</strong>
[<a href="/dl/exp/atari.zip">Download</a>]</dt>
<dd>Cookie; c't; directory waster; evil nick; flying chimp; freeze; ghost; green goblins; kobold; mad; merlins mad; muncher; oli; pirate trap; screen; signum; toi; uvd; virus master; zeldas</dd>
<dt><strong>The Ultimate Virus Designer (UVD 1.6)</strong>, Lucky Lady, 1994
[<a href="/dl/exp/uvd16.zip">Download</a>]
</dt><dd>No description available</dd>
<dt><strong>Boot secteur Construction Set (BCS 1.64)</strong>, 1992
[<a href="/dl/exp/bcs164c.zip">Download</a>]
</dt><dd>No description available</dd>
<dt><strong>ST2AB</strong>, Lord (A0), 2009
[<a href="/dl/exp/st2ab.zip">Download</a>]
</dt><dd>
The very first new Atari ST virus. Developed and tested under Hatari (emulator). Ironically I got sick with H1N1 flu virus soon after completion LOL.
Characteristics: non-resident, non-stealth, non-encrypted, infects floppies and C:\AUTO
</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">Commodore 64</h2>
<img src="/img/c64.gif" alt="Commodore 64C" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><strong>BHP VIRUS</strong>, Dr.Dr.Strobe & Papa Hacker &amp; Garfield, 1986
[<a href="/dl/exp/bhp.zip">Download</a>]
<br/><img src="/img/exp/bhp.gif" alt="BHP virus screnshot"/>
</dt>
<dd>
<pre>
Size:    2030 bytes. (9 Blocks)
Type:    Memory-resident parasitic prepender.
Infects: Commodore 64 Basic files.
</pre>
<p>As with all Commodore 64 programs, BHP began with some code written in Basic. This code consisted of a single line, a SYS call to the assembler code, where the rest of the virus resided. Unlike many programs, the virus code built the address to call dynamically. This may have been written by a very careful coder, but it proved to be unnecessary because the address did not change in later versions of the machine.</p>
<p>Once the assembler code gained control, it placed itself in the block of memory that was normally occupied by the I/O devices when the ROM was banked-in.</p>
<p>A side-effect of memory-banking was that it was a great way to hide a program, since the program was not visible if its memory was not banked in. This is the reason why BHP placed its code in banked memory. After copying itself to banked memory, the virus restored the host program to its original memory location and restored the program size to its original value. This allowed the host program to execute as though it were not infected. However, at this time the virus would verify the checksum of the virus?s Basic code, and would overwrite the host memory if the checksum did not match. An interesting note about the checksum routine is that it missed the first three bytes of the code, which were the line number and SYS command. This made the job easier for the person who produced the later variant of the virus. Although the later variant differed only in the line number, this was sufficient to defeat the BHP-Killer program, because BHP-Killer checked the entire Basic code, including the line number.</p>
<p>The virus checked whether it was running already by reading a byte from a specific memory location. If that value matched the expected value, the virus assumed that another copy was running. Thus, writing that value to that memory location would have been an effective inoculation method. If no other copy of the virus was running, the virus would copy some code into a low address in non-banked memory, and hook several vectors, pointing them to the copied code.</p>
<p>The virus hooked the ILOAD, ISAVE, MAIN, NMI, CBINV and RESET vectors. The hooking of MAIN, NMI, CBINV and RESET made the virus Break-proof, Reset-proof, and Run/Stop-Restore-proof.</p>
<p>Once the hooks were in place, the virus ran the host code. The main virus code would be called on every request to load or save a file.</p>
<p>The ILOAD hook was reached when a disk needed to be searched. This happened whenever a directory listing was requested, and could happen when a search was made using a filename with wildcards, or the first time that a file was accessed. Otherwise, the drive hardware cached up to 2kb of data and returned it directly. The virus called the original ILOAD handler, then checked whether an infected program had been loaded. If an infected program had been loaded, the virus restored the host program to its original memory location and restored the program size to its original value. Otherwise, even if no file had been loaded, the virus called the infection routine.</p>
<p>The ISAVE hook was reached whenever a file was saved. The virus called the original ISAVE handler to save the file, then called the infection routine. The infection routine began by checking that the requested device was a disk drive. If so, then the virus opened the first file in the cache. The first file in the cache would be the saved file if this code was reached via the ISAVE hook, otherwise it would be the first file in the directory listing. If the file was a Basic program, then the virus performed a quick infection check by reading the first byte of the program and comparing it against the SYS command.</p>
<p>If the SYS command was present, the virus verified the infection by reading and comparing up to 27 subsequent bytes. A file was considered infected if all 27 bytes matched. If the file was not infected, the virus switched to reading data from the hardware cache. The first check was for a standard disk layout: the directory had to exist on track 18, sector 0, and the file to infect had not to have resided on that track.</p>
<p>If these checks passed, the virus searched the track list for free sectors. It began with the track containing the file to infect, then moved outwards in alternating directions. This reduced the amount of seeking that the drive had to perform in order to read the file afterwards.</p>
<p>If at least eight free sectors existed on the same track, then the virus allocated eight sectors for itself and updated the sector bitmap for that track.</p>
<p>The virus wrote itself to disk in the following manner: the first sector of the host was copied to the last sector allocated by the virus, then that first sector was replaced by the first sector of the virus. After that, the remaining virus code was written to the remaining allocated sectors.</p>
<p>The directory stealth was present here, and it existed without any effort on the part of the virus writer(s). It was a side-effect of the virus not updating the block count in the directory sector. The block count was not used by DOS to load files, its purpose was informational only, since it was displayed by the directory listing.</p>
<p>After any call to ILOAD or ISAVE, the virus checked whether the payload should activate. The conditions for the payload activation were the following: that the machine was operating in ?direct? mode (the command-prompt), that the seconds field of the jiffy clock was a value from 2?4 seconds, and that the current scan line of the vertical retrace was at least 128. This made the activation fairly random. The payload was to display a particular text, one character at a time, while cycling the colours of the border The serial number that was displayed was the number of times the payload check was called. It was incremented once after each call, and it was carried in replications. It reset to zero only after 65,536 calls.</p>
<small>Screenshot &copy; CSDB, Description &copy; Peter Ferrie</small>
</dd>
<dt><strong>Bula</strong>
[Download <a href="/dl/exp/Bula_6_13.zip">Bula 6.13</a>, <a href="/dl/exp/Bula_8_32.zip">Bula 8.32</a>]
</dt>
<dd>
<img src="/img/exp/bula_6.13.gif" alt="Bula 6.13 screenshot" align="left"/>
<img src="/img/exp/bula_8.32.gif" alt="Bula 8.32 screenshot" align="left"/>
<br clear="all"/>
<small>Screenshots &copy; CSDB</small>
</dd>
<dt><strong>C_BAR</strong>
[<a href="/dl/exp/c_bar-de.zip">Download</a>]
</dt><dd>No description available</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">IBM mainframes</h2>
<img src="/img/ibm.jpg" alt="IBM/370" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><a name="VP370"></a><strong>The Virus</strong>, Bernd Fix, 1987
[<a href="/dl/exp/vp370.asm">Download</a>]
</dt>
<dd><blockquote>
<p>In these days I was travelling around for the Chaos Computer Club to give talks and interviews to the media about computer viruses. In one of these discussions an IBM manager declared that <em>"Computer viruses for PC's do exist, but it is <strong>not</strong> possible to write a virus for an IBM mainframe."</em></p>
<p>Whenever I think something can be done and someone else is denying that - well, I certainly give that something a try.</p>
</blockquote>
<p>[<a href="/lib/vbf01.html">Read the whole story</a>]</p>
</dd>
<dt><strong>The Christmas Tree, 1987</strong>
[<a href="/dl/exp/CHRISTMAS">Download</a>]
</dt>
<dd>
<p>The first widely publicised replicating network program was the Christmas Tree (CHRISTMAS EXEC) which paralysed the worldwide IBM VNet private electronic mail network on 17th December 1987.</p>
<p>It was written by a student at the University of Clausthal-Zellerfield, WestGermany. He claimed that the program, written in the VM/CMS operating system language REXX, was designed to send Christmas greetings to his friends within the university. The first known infection was at 1300 GMT on 9th December at Clausthal-Zellerfield (EARNnode DCZTU1).</p>
<p>However, the program escaped onto the European Academic Research Network (EARNet) which, ironically, had been established with IBM financial backing and assistance. EARNet is linked to BitNet in the United States which in turn is connected to VNet, a network used by IBM to communicate with customers and suppliers. The first infection on Vnet occurred on 15th December 1987. This network was brought to a temporary standstill two days later. The program read the addresses of communication partners in the user files NAMES and NETLOG and sent a copy of itself to all addresses contained therein. Users found the message `Let this exec run and enjoy yourself!' posted in their mail-boxes. If the program was run the following greeting appeared:</p>
<pre>
                *
                *
               ***
              *****
             *******
            *********
          *************                A
             *******
           ***********                VERY
         ***************
       *******************            HAPPY
           ***********
         ***************            CHRISTMAS
       *******************
     ***********************         AND MY
         ***************
       *******************         BEST WISHES
     ***********************
   ***************************     FOR THE NEXT
             ******
             ******                    YEAR
             ******
</pre>
<p>Further investigation of the EXEC file diplayed the line:</p>
<pre>
	/* browsing this file is no fun at all
	   just type CHRISTMAS from cms */
</pre>
<p>The program messages terminated with ERASECHRISTMAS EXEC by which time the program had propagated itself, like a chain letter, to all mailbox addresses contained in the users address file. In common with PC viruses, this program needed to be executed or `run' to replicate. Unlike a virus, the Christmas Tree did not incorporate any of its own code into a host program.</p>
<p>The Christmas Tree was the first program known to have caused wide area network paralysis and amply demonstrated the need to educate network users to be wary of running unfamiliar executables (EXEC, CLIST, program), however intriguing a filename or on-screen instruction might be.</p>
</dd>
<dt><strong>Father Christmas (HI.COM), 1989</strong> [<a href="/dl/exp/HI.COM">Download</a>]</dt>
<dd>
<p>On December 22, 1988 at 21:52 (swiss time) a decnet worm was released from a European HEPNET node NEDCU2:: (20.117; interger form 20597::) onto the DECnet Internet. This worm has been called the "Father Christmas" Worm, since it's ultimate goal was to send mail to users from Father Christmas. The worm performed several key functions:</p>
<ol type="a">
<li>Send SYS$ANNOUNCE Banner to 20597::PHSOLIDE on NEDCU2 (node in Switzerland);</li>
<li>Propogate a file called HI.COM to as many nodes as possible;</li>
<li>Send a Christmas Mail greeting to all authorized users on a computer system</li>
</ol>
</dd>
</dl>
<a name="PDP11UNIX"></a><h2 style="float:left; margin: 0; padding: 0;">PDP-11/UNIX 5th edition</h2>
<img src="/img/pdp11.jpg" alt="" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><em>Infected du program</em> [<a href="/dl/exp/PDP-11_UNIX_virus.zip">Download</a>]</dt>
<dd>
<ol>
<li>Download and unpack <a href="/dl/exp/unix.img.bz2">the image</a> of the file system</li>
<li>Install <a href="http://simh.trailing-edge.com/">SIMH</a> emulator and run 'pdp11' command</li>
<li>Type the following (user input in <strong>bold</strong>):
<pre class="source">
sim> <strong>set cpu u18</strong>
sim> <strong>att rk0 unix.img</strong>
sim> <strong>boot rk0</strong>
@<strong>unix</strong>

login: <strong>root</strong>
# <strong>chdir /bin</strong>
# <strong>../du.infected</strong>
#
</pre>
</li>
</ol>
</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">SAP R/3</h2>
<img src="/img/sap.gif" alt="SAP" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><strong>SAPvir</strong>, ViriiWare, 2000
[<a href="/dl/exp/SAPvir.zip">Download</a>]
</dt>
<dd>
<blockquote>
<p>Rivpas is a proof-of-concept script written in SAP's application development language, Advanced Business Application Programming (ABAP) language. This sciprt is supposed to show that a virus can be written for this platform, however, the sample is intentionally made not to replicate.</p>
<p>First the script attempts to find the SAP's report directory and tries to find functions and reports to infect.</p>
<p>If an suitable object is found, the virus will try to inject its code in there.</p>
<p>The virus sets the username of an infected object to "Virii" and uses this as a infection marker.</p>
<p>[Analysis: Katrin Tocheva and Sami Rautiainen, F-Secure Corp.; April 15th, 2002]</p>
</blockquote>
<p>There's also <a href="/lib/abm01.html">the article</a> published in Newsbytes</p>
</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">UNIVAC 1100</h2>
<img src="/img/1107.gif" alt="UNIVAC 1107" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><a name="ANIMAL"></a><strong>ANIMAL</strong>, John Walker, April 1974
[Download <a href="/dl/exp/ANIMAL">ANIMAL</a>, <a href="/dl/exp/PERVADE">PERVADE</a>]
</dt>
<dd>
<blockquote>THIS PROGRAM IS A TOTALLY NEW WAY OF DISTRIBUTING VERSIONS OF SOFTWARE THROUGHOUT THE 1100 SERIES USER COMMUNITY. PREVIOUS METHODS REQUIRED THE DELIBERATE AND PLANNED INTERCHANGE OF TAPES, CARD DECKS, OR OTHER TRANSFER MEDIA. THE ADVENT OF 'PERVADE' PERMITS SOFTWARE TO BE RELEASED IN SUCH A MANNER THAT IF SOMEONE CALLS YOU UP AND ASKS FOR A VERSION OF A PROCESSOR, VERY LIKELY YOU CAN TELL THEM THAT THEY ALREADY HAVE IT, MUCH TO THEIR OWN SURPRISE.</blockquote>
<p>Ever heard the one about the self-reproducing ANIMAL program that spread throughout systems and colonised new machines? <a href="/lib/mjw02.html">Here's the story</a>, both as it actually happened, and recounted in the press as a "computer urban legend" 10 and 15 years after the fact.</p>
</dd>
</dl>
<h2 style="float:left; margin: 0; padding: 0;">ZX Spectrum</h2>
<img src="/img/zx128.gif" alt="Sinclair ZX Spectrum 2+" style="float:right;"/>
<br clear="all"/>
<dl>
<dt><strong>Dromader</strong>, DaemonSerj
[<a href="/dl/exp/dromader.a80">Download</a>]
</dt><dd>Non-resident virus for ZX Spectrum 48 + TR-DOS, published in Social Distortion #2</dd>
<dt><strong>Power Xhumator v4.1</strong>, !mPeR!0^PHG
[<a href="/dl/exp/xhumator.a80">Download</a>]
</dt><dd>published in Social Distortion #2</dd>
</dl>
</div></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/exotic.php?lang=de">de</a><a href="/exotic.php?lang=en">en</a><a href="/exotic.php?lang=es">es</a><a href="/exotic.php?lang=it">it</a><a href="/exotic.php?lang=fr">fr</a><a href="/exotic.php?lang=pl">pl</a><a href="/exotic.php?lang=ru">ru</a><a href="/exotic.php?lang=ua">ua</a></div>
</body>
</html>
