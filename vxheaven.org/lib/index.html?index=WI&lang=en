<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Windows specific (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"97da920dbe6b51b1b6b64376352abd1c1989bc90-1498754904-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/lib/index.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=WI">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=WI">Español</a>][<a href="/lib/?lang=it&amp;index=WI">Italiano</a>][<a href="/lib/?lang=fr&amp;index=WI">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=WI">Polski</a>][<a href="/lib/?lang=ru&amp;index=WI">Русский</a>][<a href="/lib/?lang=ua&amp;index=WI">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">Holy_Father &laquo;<a name="vhf00" href="/lib/vhf00.html">Invisibility on NT boxes, How to become unseen on Windows NT (Version: 1.2)</a>&raquo; (26270)<br/></span><span class="small">roy g biv &laquo;<a name="vrg02" href="/lib/vrg02.html">Heaven's Gate: 64-bit code in 32-bit file</a>&raquo; (22671)<br/></span><span class="small">Z0mbie &laquo;<a name="vzo12" href="/lib/vzo12.html">Hooking WinNT/2K/XP API v0.01</a>&raquo; (17117)<br/></span><span class="small">Z0mbie &laquo;<a name="vzo13" href="/lib/vzo13.html">Adding LDT entries in Win2K</a>&raquo; (16948)<br/></span><span class="small">Z0mbie &laquo;<a name="vzo25" href="/lib/vzo25.html">Description of the win98/INT 2E services (VMM/NTKERN.VxD)</a>&raquo; (15840)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Windows specific</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<u>Windows specific</u><br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><strong> Benny</strong></div>&laquo;<a name="vbe09" href="/lib/vbe09.html">ICQ visions</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.54Kb</small> <span class="note">5835 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2003)</small><blockquote>ICQ application is one of the most spreaded Instant Messenger programs at all. And like every such utility program it has its own evidency of all communicating persons. This gigant centralized database contains many private datas that can be abusable. Becoz of a high spread of this system it is logic to focus on ways it would be able to abuse these datas for some malware code spreading. Just imagine it - worm that retrieves private datas of all accessible persons, composes e-mail messages and spreads itself to all addresses. Hard to say why there still had not happened such data compromity and following epidemy.</blockquote>&laquo;<a name="vbe07" href="/lib/vbe07.html">Microsoft .NET Common Language Runtime Overview</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>14.69Kb</small> <span class="note">6564 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Whole computer world talx about new platform from Microsoft, called .NET. Current implementation (January 2002) is also known as .NET FrameWork SDK which provide us base services. And also, there exists 2nd beta-version of Microsoft Visual Studio.NET, new visual environment where you can create your own .NET applicationz. I wrote this article becoz I couldn't sit and wait until someone will make a research instead of me. Well, you know me, I'm pretty curious guy and so I investigated on my own...</blockquote>&laquo;<a name="vbe00" href="/lib/vbe00.html">MSIL-PE-EXE infection strategies</a>&raquo; <small>10.1Kb</small> <span class="note">15268 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>In my last article about .NET platform called "Microsoft .NET Common Language Runtime Overview" I introduced technologies that .NET Framework Beta2 provides us. I also showed infector for .NET applications written in C# (called "Donut" by AVerz). Very soon after publishing Microsoft released sharp version of Visual Studio .NET. Since that time nothing changed at all, this version does not differ from the beta2 much. But I had more time, documentation and knowledge to explore this environment.</blockquote><div class="l1"><strong> Benny, Ratter</strong></div>&laquo;<a name="vbe08" href="/lib/vbe08.html">Win2k.SFPDisable</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.43Kb</small> <span class="note">6124 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Well, how to start? In the past, there were many ideaz how to get rid off that new feature of Windows 2000 - The System File Protection. GriYo/29A was the first one who warned us and solved that problem very smartly. Using SfcIsFileProtected API that can tell us if the file is or is not protected by operating system. Viruses used this API and if file was protected, they simply did not infect it.</blockquote><div class="l1"><strong> berniee</strong></div>&laquo;<a name="vbe04" href="/lib/vbe04.html">Explaining the Usages of Pipes in Virus coding</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.89Kb</small> <span class="note">9595 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2006)</small><blockquote>So away from that article which I lost, I decided After tiny googling and having quick peek at M$ sdk, I found pretty beautiful explanation,especially from Iczelion's. Now how could we create pipes and implementt it in viruses. thats what I am going to explain in this article by describing how to create pipes (Anonymous types only, see next).</blockquote>&laquo;<a name="vbe02" href="/lib/vbe02.html">Infecting PE files By Adding new resource</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.26Kb</small> <span class="note">12207 hits</span><br/><small><a href="/vx.php?fid=1528#f1528">Electrical Ordered Freedom #1</a> (2006)</small><blockquote>Making a pe appender is done by various ways adding new section,increasing last section or any other ways. Here I will explain infecting pe file by adding new resource which will contain our code. The infecting code is taken from my previous virus &quot;fag&quot;. NOTE: May be the following is to some point is un-understandable for some, because I tried to present the method as an idea and not as explaining it in depth!.</blockquote><div class="l1"><strong> Billy Belcebú</strong></div>&laquo;<a name="vbb04" href="/lib/vbb04.html">Using Structured Exception Handler (SEH)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>3.54Kb</small> <span class="note">5907 hits</span><br/><small><a href="/vx.php?fid=180#f180">DDT [1]</a> (1999)</small><blockquote>Well, this is a very simple tutorial about the Structured Exception Handler. When i saw SEH implemented in a virus, i thought "Well, it does a lot. Must be very hard to implement". So i simple skipped its use. But, as my Destiny made General Protection Faults running under NT, as i read in 0BFF70000h, i realized that i had to do something. And SEH was the only way. Well, we can do it very complex to understand, or very easy. Of course, i prefer to do it more easy :)</blockquote><div class="l1"><strong> Bumblebee</strong></div>&laquo;<a name="vbu00" href="/lib/vbu00.html">Per-process residency review: common mistakes</a>&raquo; <small>10.28Kb</small> <span class="note">11471 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>Per-process residency is a TSR method discovered by Jack Qwerty in the early days of win32 platform. This great vxer got an alternative way to hook system calls instead of global residency, very common under DOS environments but so hard to obtain under win32 (win32 means win9x, ME, NT, 2000, XP, ?).</blockquote><div class="l1"><strong> Changeling</strong></div>&laquo;<a name="vch02" href="/lib/vch02.html">I will survive...</a>&raquo; <small>7.1Kb</small> <span class="note">10770 hits</span><br/><small> (1999)</small><blockquote>How would the perfect virus look like? There're many ideas, but the best idea would probably be to put a human inside a virus. This human would be able to produce new ideas and viruses etc., etc., etc..</blockquote><div class="l1"><strong> DiA</strong></div>&laquo;<a name="vdi05" href="/lib/vdi05.html">Find Victims with FindExecutable API</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.27Kb</small> <span class="note">9047 hits</span><br/><small><a href="/vx.php?fid=1375#f1375">Ready Rangers Liberation Front [5]</a> (2004)</small><blockquote>With FindExecutable you can get a full path of a application that manages a file type!</blockquote>&laquo;<a name="vdi06" href="/lib/vdi06.html">Save your fingers - get your fake names from the i-net</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.03Kb</small> <span class="note">9022 hits</span><br/><small><a href="/vx.php?fid=1413#f1413">Ready Rangers Liberation Front [6]</a> (2005)</small><blockquote>Maybe you know this situation, you write a pretty good massmailer, i-net or P2P worm and you need some ideas for the fake names. You are sick seeing names like "Damn_Fine_Porn.mpg .exe" or "Photoshop Crack working!.exe". So what to do? Get some inspiration from the internet, go to some warez/crackz sites and copy and paste some real crack names including application name, exact version number and maybe the author of the crack. Looking a bit realer then "Micr0soft all products keygen.exe", huh?! You wanna do some good stuff, including many names... you are now copy and paste your name number 34, stupid work, no? At this point I ask you, why do you copy and paste a already existing huge database of names? Just write a simple but effective code and get thousends of names at runtime :). So read on and see how easy it is...</blockquote>&laquo;<a name="vdi03" href="/lib/vdi03.html">Up to Date with the URLDownloadToFileA API</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>11.51Kb</small> <span class="note">9743 hits</span><br/><small><a href="/vx.php?fid=1375#f1375">Ready Rangers Liberation Front [5]</a> (2004)</small><blockquote>Hello again, today I want to show you a method to download a file from the internet (http) to the local machine. It's very easy with the URLDownloadToFileA API, but this API is not much commented. So I resulute to write this tutorial. I hope with this codes you are Up to Date =). Have fun...</blockquote><div class="l1"><strong> GriYo</strong></div>&laquo;<a name="vgy07" href="/lib/vgy07.html">Execution redirection thru ‘Image File Execution Options’ key</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.62Kb</small> <span class="note">12454 hits</span><br/><small><a href="/vx.php?fid=1388#f1388">29a [#8</a> (2004)</small><blockquote>I’m bored of worms and other malware which still use the well know, old fashioned, overexploited HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ Windows\CurrentVersion\Run registry key.</blockquote>&laquo;<a name="vgy02" href="/lib/vgy02.html">EXPLORER in-memory infection</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>25.46Kb</small> <span class="note">14060 hits</span><br/><small><a href="/vx.php?fid=8#f8">29a [4full]</a> (2000)</small><blockquote>In this article I will expose a residence technique: To infect EXPLORER.EXE in memory and to stay resident on its address space.</blockquote>&laquo;<a name="vgy08" href="/lib/vgy08.html">Snorting coke (and packets)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.34Kb</small> <span class="note">5907 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Windows 2000 introduces a new concept for Windows users: The possibility of creating raw-sockets. We will use this new Windows capacity to capture network traffic on a net. What to make with captured packets is your decision, some suggestions are:</blockquote>&laquo;<a name="vgy05" href="/lib/vgy05.html">Virus oriented VxD writing tutorial</a>&raquo; <small>20.75Kb</small> <span class="note">12802 hits</span><br/><small><a href="/vx.php?fid=6#f6">29a [2]</a> (1998)</small><blockquote>This tutorial represents just a minimum introduction to VxD programming. To dominate the subject it deals with you need something more than this tutorial. Nevertheless, I've tried to explain everything very clearly, so noone stays on land ;)</blockquote>&laquo;<a name="vgy06" href="/lib/vgy06.html">The VxDCall backdoor</a>&raquo; <small>25.09Kb</small> <span class="note">13491 hits</span><br/><small><a href="/vx.php?fid=7#f7">29a [3]</a> (1999)</small><blockquote>After I read this fragment in Matt Pietrek's book 'Windows95 System Programming Secrets' I thought that VxD's might contain exported services, as DLL's do. I knew that VxD's exported services to other VxD's but did they export services to Win32?. If that was the case these services could be very useful for virus programming, because they are similar to API's but is running at ring-0.</blockquote>&laquo;<a name="vgy04" href="/lib/vgy04.html">Win2K infection</a>&raquo; <small>8.66Kb</small> <span class="note">12260 hits</span><br/><small><a href="/vx.php?fid=8#f8">29a [4full]</a> (2000)</small><blockquote>If we run any up-to-date Win32 virus under Windows2000 you will find out a nasty dialog box with message like this:</blockquote>&laquo;<a name="vgy03" href="/lib/vgy03.html">Win32 Viral Networking Overwiew</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>26Kb</small> <span class="note">11323 hits</span><br/><small><a href="/vx.php?fid=8#f8">29a [4full]</a> (2000)</small><blockquote>we will speak above several aspects of Win32 networking, but always centering in our viral desires.</blockquote><div class="l1"><strong> hh86</strong></div>&laquo;<a name="vhh02" href="/lib/vhh02.html">The DLIT EPO techinque</a>&raquo; <small>2.52Kb</small> <span class="note">9886 hits</span><br/><small><a href="/vx.php?fid=1940#f1940">Virus Writing Bulletin [1]</a> (2011)</small><blockquote>I found this technique a quite long time ago. This import mechanism has been available for more than 10 years! I took some time before even think to use it for an entrypoint obscuring virus.</blockquote>&laquo;<a name="vhh03" href="/lib/vhh03.html">EPO in C LUA DLLs</a>&raquo; <small>1.75Kb</small> <span class="note">10078 hits</span><br/><small><a href="/vx.php?fid=1940#f1940">Virus Writing Bulletin [1]</a> (2011)</small><blockquote>When for the first time I heard that LUA script files could use functions from DLL files, I thought how to infect them. First, I created a virus that could infect LUA script files to make it load the DLL of the virus. It was W32.Luna, but it was very simple thing, since the only that it does it to trick LUA.</blockquote>&laquo;<a name="vhh00" href="/lib/vhh00.html">The true Export/Import business</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>3.16Kb</small> <span class="note">9567 hits</span><br/><small><a href="/vx.php?fid=1940#f1940">Virus Writing Bulletin [1]</a> (2011)</small><blockquote>I had this idea one year ago. I was thinking of how you can supply code for applications. For that, Windows uses DLLs. Obviously, you know what they are, and you know that they supply of code by export of functions. A DLL is loaded into the application memory and Windows resolves the imports, so that the application can use the code in the DLL by calling the function.The are two ways in which an application can import functions using the import table, one would be to import the functions by name, the second would be using the ordinals. When Windows successfully finds the name or ordinal in the DLL, it gets the function address from the export address table, the address is copied into the import address table in the application and so it continues. Here is where I had the strange idea. Windows doesn't check that the address in the export address table are actually valid. :) I mean, the address could be FFFFFFFF and Windows would anyway add to it the base address of the DLL and so it will be copied to the import address table.</blockquote><div class="l1"><strong> Holy_Father</strong></div>&laquo;<a name="vhf01" href="/lib/vhf01.html">Hooking Windows API: Technics of hooking API functions on Windows</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>47.55Kb</small> <span class="note">10419 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2002)</small><blockquote>This text is about hooking API functions on OS Windows. All examples here completely works on Windows systems based on NT technology version NT 4.0 and higher (Windows NT 4.0, Windows 2000, Windows XP). Probably will also work on others Windows systems.You should be familiar with processes on Windows, assembler, PE files structure and some API functions to understand whole text.When using term "Hooking API" here, I mean the full change of API. So, when calling hooked API, our code is run immediately. I do not deal with cases of API monitoring only. I will write about complete hooking.</blockquote>&laquo;<a name="vhf00" href="/lib/vhf00.html">Invisibility on NT boxes, How to become unseen on Windows NT (Version: 1.2)</a>&raquo; <small>50.49Kb</small> <span class="note">26270 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2003)</small><blockquote>This document is about technics of hiding objects, files, services, processes etc. on OS Windows NT. These methods are based on hooking Windows API functions which are described in my document "Hooking Windows API".</blockquote><div class="l1"><strong> JHB</strong></div>&laquo;<a name="vjh02" href="/lib/vjh02.html">PE Infection school</a>&raquo; <small>5.92Kb</small> <span class="note">12339 hits</span><br/><small><a href="/vx.php?fid=517#f517">Xine [2]</a> (1997)</small><blockquote>Infecting a PE files is a little complex unlike in dos, you must also do some "strange" things to open and read files. For those among us who do know little about Windows this may be tough to grasp but it just another hurdle that Microsoft has put in virii writers/just plain hackers of Win95.</blockquote><div class="l1"><strong> kaze</strong></div>&laquo;<a name="vkz00" href="/lib/vkz00.html">Stealth API-based decryptor</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>24.1Kb</small> <span class="note">12977 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2008)</small><blockquote>The main thing i really enjoy in virus writing is neither spreading nor weird target platform infection, it's just AV detection evading. And when I say stealth, i don't mean "kill any AV running on the victim's OS", I mean: not detected. But to be honest, writing a long-enough undectetd virus begins to be a real challenge. Nowadays, even the most advanced poly engines get detected in a few days. A few years ago, some little tricks like including big loops in decryptors, generating a lot of junk or using uncommon opcodes could fool some of the weakest emulators. But new techniques like code normalization can detect easily such tricky polymorphized decryptors.I'll try to present here a new approach to evade av detection. Instead of increasing the complexity of the decryptor, as most of the actual poly engines tend to, we will try to build a decryptor that looks as common as possible, hopping for the AV to cancel emulation. We will try to increase the risk of false positive during virus detection. This approach has been implemented in my last virus, win32.leon, which can be found in the virus section of this emag.</blockquote><div class="l1"><strong> Lord Julus</strong></div>&laquo;<a name="vlj02" href="/lib/vlj02.html">Accessing Windows 95 API's by scanning PE-tables</a>&raquo; <small>26.63Kb</small> <span class="note">13243 hits</span><br/><small><a href="/vx.php?fid=509#f509">VX-tasy [articles]</a> (1998)</small><blockquote>Looking back in 1994 and reading the last article of the now dead group Nuke, you can get over an article written by the group's leader Rock Steady that talked about a so called, and awaited "Windows 4.0"... Try to put yourself there, back in time and imagine what you would feel reading this, but picture it well: Ms-Dos and Windows 3.11 existed. There were practicaly no Windows 3.11 viruses, except a few that infected the Dos part of the New Exe file... And when things were going so well, thousands of viruses on the market, so many that even virus authors didn't care anymore, this black thing appears from the dark... The NEW THREAT from Micro$oft... Let me recall you what was maybe the first article on what will become Windows 95:</blockquote><div class="l1"><strong> Murkry</strong></div>&laquo;<a name="vmu01" href="/lib/vmu01.html">Win95 structures and secrets</a>&raquo; <small>9.73Kb</small> <span class="note">9462 hits</span><br/><blockquote>[...] Since the start of Win95 many things that virii writers came to accept as easy to get, became harder. Things like the interrupt calls, filename paths to the system files. Well the API calls have replaced interrupts and virii writers have used several tricks to get the address to these calls. [...]</blockquote><div class="l1"><strong>Cyrus Peikari, Seth Fogie, Ratter</strong></div>&laquo;<a name="vra01" href="/lib/vra01.html">Details Emerge on the First Windows Mobile Virus</a>&raquo; <small>43.5Kb</small> <span class="note">13981 hits</span><br/><small>InformIT (2004)</small><blockquote>This series concludes with Ratter describing the creation of WinCE4.Dust.</blockquote><div class="l1"><strong> pr0mix</strong></div>&laquo;<a name="vpr02" href="/lib/vpr02.html">DLL Hijacking in antiviruses</a>&raquo; <small>13.19Kb</small> <span class="note">7186 hits</span><br/><small><a href="/vx.php?fid=2013#f2013">Inception #1 (EN)</a> (2012)</small><blockquote>DLL Hijacking - is referred to as DLL substitution. Many programs, when calling the LoadLibrary(char *) function, transmit the file name as a parameter, rather than the full way to it. That way, you can substitute one library being uploaded for any other one. This has to do with the search of the DLL beginning in the directory that contains the calling EXE-file. In this case the substituted DLL is launched with the same privileges as the running process.For AV, like for any other software, this attack technique can (and should) be used. Clearly, as a result of a successful attack, our code is working in a proxy application, has the same privileges and can do whatever it wants.</blockquote><div class="l1"><strong> Prizzy</strong></div>&laquo;<a name="vpr00" href="/lib/vpr00.html">How to make infected system to depend on the virus</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>32.36Kb</small> <span class="note">13928 hits</span><br/><small><a href="/vx.php?fid=10#f10">29a [5]</a> (2000)</small><blockquote>This article is intended for vx authors who want to equip their viruses the method whereby the infected computer will be dependent on the virus. In this case If an antivirus cleaned all infected files, the computer would be inaccessible. And as we can assume no antivirus won't disinfect files by special method.</blockquote><div class="l1"><strong>Marco Ramilli</strong></div>&laquo;<a name="vmr00" href="/lib/vmr00.html">PE Infector</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.77Kb</small> <span class="note">10121 hits</span><br/><small>http://marcoramilli.blogspot.com/2011/03/pe-infector.html (2011)</small><blockquote>Hi Folks, today I want to share the simplest way to infect a Windows Portable Executable file. There are many different ways to implement an infection (or injection) by adding code into the PE free space but the way I am going to describe is probably the simplest and (with respect to _antony) the most primitive one.</blockquote><div class="l1"><strong> Ratter</strong></div>&laquo;<a name="vra06" href="/lib/vra06.html">Gaining important datas from PEB under NT boxes</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6Kb</small> <span class="note">11858 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>After some years of using it, you are very familiar with SEH - Structured Exception Handling. When you set a exception frame you use more or less the same code snippet which works with the fs selector. Probably you also know that this selector points to a data structure known as TEB ie Thread Environment Block. This structure contains a lot of more or less useful values and structures and - what is important for us - also a pointer to PEB - Process Environment Block.</blockquote>&laquo;<a name="vra07" href="/lib/vra07.html">Gaining passwords</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.24Kb</small> <span class="note">9223 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>If you read my article about impersonation you've probably noticed that for have it working you need the account name and the password. It ain't a big problem to retrieve the account name. The problem is to gain the password of course. Here I'll present some ideas how to steal the passwords ...</blockquote>&laquo;<a name="vra05" href="/lib/vra05.html">Impersonation, your friend</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.89Kb</small> <span class="note">9486 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Imagine a situation. You're running under security context of non administrator user but you have the admin password (how to gain it see my next article). You have the privileges you need and now you are thinking about what I will do with it? The answer for you is impersonation.Let's have a look at MSDN definition of impersonation: Impersonation is the ability of a thread to execute using different security information than the process that owns the thread.There exist a lot of types of impersonation eg DDE, a named-pipe, RPC impersonation etc. Generally impersonation is used when the server needs to act for while as the client. But we will use this method to declare our thread as an admin one and to create admin processes ...</blockquote>&laquo;<a name="vra08" href="/lib/vra08.html">Infecting Winlogon</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.98Kb</small> <span class="note">9985 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>You've probably tried to open winlogon process via OpenProcess api with desired access to write. And you've probably failed :) Why? Winlogon is one of the main Win32 subsystem components and thus is protected from other user-mode processes to modify him. As other components runs with the system privileges and thats why he's very interesting for us.Imagine a situation: Your virus is runned under normal user security context, but yet you're allowed to modify winlogon. What does it mean for you (except that you can turn off the sfp and install a password trojan :))? Everything runned in the winlogon process (ie also your remote thread) is runned under the system privileges which are equal to administrators ones. So put everything admin-neede in your virus to a remote thread in winlogon and you'll win :)So the key question is. How to make the system to let you modify winlogon and other win32 subsystems? Afaik there are two user-mode ways to achieve it.</blockquote>&laquo;<a name="vra04" href="/lib/vra04.html">NtVDM under WinNT/2k/XP</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.44Kb</small> <span class="note">10570 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>In this article I would like to present you the way the NT based operating system handle DOS and 16-bit Windows programs. It is really interesting and the subsystem which takes care of this is really a Good Piece of Software (TM) :-)You prolly tried to run some old apps or games on your NT box, sometimes you were succesfull, sometimes not. Why the hell doesn't my old good game run on my NT machine and by my friend on Win9x it does? you say maybe to yourself. Well NT operating system was designed with security in mind (yeah :-)). That means, that processes don't share their memory (at least the writeable part of it, with some exceptions of course), if one process crashes, it won't crash the entire operating system or different independent process. You don't have write access to the IDT thus you cannot easily get into ring0 and you cannot directly access I/O ports.Since most DOS and 16-Bit Windows progs don't only use the defined DOS/Windows api but use nasty hacks that talk directly to the hardware and/or access different processe's memory they simply cannot run under Windows NT without violating one of it's main base stones. Thatswhy some kind of jailbox, a virtual machine, is used in Windows NT based operating systems.</blockquote>&laquo;<a name="vra09" href="/lib/vra09.html">Opening NT boxes for you and your comrades in arms</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.27Kb</small> <span class="note">8706 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>You have infected a NT box and you're runned under the administrators group member security context. Now you can do everything you want with the machine. How to make the machine open for you even if you log in as a normal user?</blockquote>&laquo;<a name="vra02" href="/lib/vra02.html">Ring0 under WinNT/2k/XP</a>&raquo; <small>14.08Kb</small> <span class="note">10429 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>Ring0 under NT? Does it also sound to you almost religious as to me? NT based operating systems weren't written as a toy so gaining ring0 under these is much harder (if not impossible) than under Win9x/Me. Yes there were exploits (like getadmin) that used bugs in the code but that was the badly written code. The design does not have any hole (i believe) that would let on well written system without bugs run nonprivileged code under ring0. But that's it. Microsoft unfortunately doesn't write code without bugs (what degrades the architecture; i wish, Microsoft would succeed in this particular task - to write at least one version of NT system without high priority flaws - to shut the fuckin linux radicals mouth. yes, open source is nice, M$ monopol is bad, but well i don't care - if there would be comparable nice OS i would love it (ReactOS is coming :-)) but i don't like *nix, anyway i do like FreeBSD, but less than NT :-))</blockquote>&laquo;<a name="vra03" href="/lib/vra03.html">SFP revisited</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.54Kb</small> <span class="note">8921 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>SFP again? you probably say reading the title of this article. Well because i found two nice ways to get rid of this i will bother you once more with it :-)</blockquote><div class="l1"><strong> roy g biv</strong></div>&laquo;<a name="vrg09" href="/lib/vrg09.html">Compiled HTML</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.64Kb</small> <span class="note">8864 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2005)</small><blockquote>Microsoft like to produce new file formats with more and more content. CHM files allow a single file to contain HTML pages, including graphics and scripts, something like an archive. They are very careful, though, to avoid documenting anything, so to create such files generally relies on their tools. CHMs carry all of the content in a single stream, compressed by the LZX algorithm. It is almost a solid archive, but contains a periodic state reset, to make the decompression faster (because it is not necessary to decompress the entire archive to reach the last file, but start from the last reset point and decompress from there).</blockquote>&laquo;<a name="vrg02" href="/lib/vrg02.html">Heaven's Gate: 64-bit code in 32-bit file</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.79Kb</small> <span class="note">22671 hits</span><br/><small> (2009)</small><blockquote>On 64-bit platform, there is only one ntoskrnl.exe, and it is 64-bit code. It also uses a different calling convention (registers, so called "fastcall") compared to 32-bit code (stack, so called "stdcall", old name was "pascal"). So how can 32-bit code run on 64-bit platform? There is "thunking" layer in wow64cpu.dll, which saves 32-bit state, converts parameters to 64-bit form, then runs "Wow64SystemServiceEx" in wow64.dll. But 64-bit registers are visible only in 64-bit mode, so how does wow64cpu.dll work? Here is what I call Heaven's Gate, but first we must go back to ntdll.dll.</blockquote>&laquo;<a name="vrg16" href="/lib/vrg16.html">Heaven's Gate: 64-bit code in 32-bit file</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.28Kb</small> <span class="note">9244 hits</span><br/><small><a href="/vx.php?fid=1943#f1943">Valhalla #1</a> (2011)</small><blockquote>On 64-bit platform, there is only one ntoskrnl.exe, and it is 64-bit code. It also uses a different calling convention (registers, so called "fastcall") compared to 32-bit code (stack, so called "stdcall", old name was "pascal"). So how can 32-bit code run on 64-bit platform? There is "thunking" layer in wow64cpu.dll, which saves 32-bit state, converts parameters to 64-bit form, then runs "Wow64SystemServiceEx" in wow64.dll. But 64-bit registers are visible only in 64-bit mode, so how does wow64cpu.dll work? Here is what I call Heaven's Gate, but first we must go back to ntdll.dll.</blockquote>&laquo;<a name="vrg00" href="/lib/vrg00.html">How to break the rules with the class libraries</a>&raquo; <small>16.72Kb</small> <span class="note">14757 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>At the first look, object-oriented languages in the .NET framework (C#, C++, JScript, and Visual Basic) seem to be very strict. There are no pointers in JScript and Visual Basic, and they are limited in C# and C++. Type conversion is also restricted.</blockquote>&laquo;<a name="vrg22" href="/lib/vrg22.html">Imported code</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.88Kb</small> <span class="note">5884 hits</span><br/><small><a href="/vx.php?fid=2013#f2013">Inception #1 (EN)</a> (2013)</small><blockquote>It is five years today that I first made this technique, and finally I finish implementing it. After writing virtual code, I tried to find another way to have operating system construct the code for me. This time, I use the import table to supply all of the values. This required some interesting tricks.</blockquote>&laquo;<a name="vrg03" href="/lib/vrg03.html">Subtle SEH</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.38Kb</small> <span class="note">11771 hits</span><br/><small> (2009)</small><blockquote>Everyone knows about Structured Exception Handling these days. First demonstrated in the Cabanas virus in 1998 by jqwerty, now many viruses and other applications use it for obfuscating code and anti-debugging tricks. It usually looks something like this:</blockquote>&laquo;<a name="vrg24" href="/lib/vrg24.html">Virtual Code - Windows 7 update</a>&raquo; <small>6.37Kb</small> <span class="note">5306 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>This is a technique that I demonstrated in 2007. My idea is to remove all code from a section, and use relocation data to restore it. Since the section is now only in virtual memory, I call it virtual code.</blockquote><div class="l1"><strong>Alan Solomon</strong></div>&laquo;<a name="aas08" href="/lib/aas08.html">Windows NT and Viruses</a>&raquo; <small>7.13Kb</small> <span class="note">8920 hits</span><br/><blockquote>[...] As the use of Windows NT continues to grow throughout the corporate world, it becomes increasingly important to understand what impact viruses have under Windows NT [...]</blockquote><div class="l1"><strong> SPTH</strong></div>&laquo;<a name="vsp42" href="/lib/vsp42.html">Dynamic Anti-Emulation using Blackbox Analysis</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>14.42Kb</small> <span class="note">6458 hits</span><br/><small><a href="/vx.php?fid=2008#f2008">Valhalla #2</a> (2011)</small><blockquote>Viruses are threatened by Emulators. One can use Anti-Emulator tricks to avoid emulation, until AVs implement the new trick intro their program - so this benefit can not exceed a few hours?It can, if the virus can find and implement new Anti-Emulation tricks by itself. This text descibes how it can be done.</blockquote><div class="l1"><strong> Z0mbie</strong></div>&laquo;<a name="vzo13" href="/lib/vzo13.html">Adding LDT entries in Win2K</a>&raquo; <small>7.11Kb</small> <span class="note">16948 hits</span><br/><small> (2002)</small><blockquote>I was surprised when found that win2k allows programs to add own LDT entries. When first entry is added, LDT for current process is created, with minimal possible size to contain this entry. I.e. if you will add one descriptor at LDT offset 16 (selector 0F), total LDT size will be 24 bytes, and previuous unused entries will be empty.</blockquote>&laquo;<a name="vzo25" href="/lib/vzo25.html">Description of the win98/INT 2E services (VMM/NTKERN.VxD)</a>&raquo; <small>44.22Kb</small> <span class="note">15840 hits</span><br/><small> (2000)</small><blockquote></blockquote>&laquo;<a name="vzo26" href="/lib/vzo26.html">Entering Ring-0 Using Win32 Api: Context Modification</a>&raquo; <small>5.77Kb</small> <span class="note">14061 hits</span><br/><small> (2000)</small><blockquote>When an operating system called "mustdie", this means at least something. So, here it is - unknown, shocking method of entering ring-0 under win9X.</blockquote>&laquo;<a name="vzo12" href="/lib/vzo12.html">Hooking WinNT/2K/XP API v0.01</a>&raquo; <small>2.64Kb</small> <span class="note">17117 hits</span><br/><small> (2002)</small><blockquote>Our task is to hook some API functions in all existing processes, and in all new processes which may be created, under NT/2K/XP operating systems.</blockquote>&laquo;<a name="vzo28" href="/lib/vzo28.html">Tracing under Win32</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.06Kb</small> <span class="note">12636 hits</span><br/><small> (2000)</small><blockquote></blockquote>&laquo;<a name="vzo27" href="/lib/vzo27.html">Writing into kernel from ring-3: Lets fuck pagetable</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.04Kb</small> <span class="note">15321 hits</span><br/><small> (2000)</small><blockquote>Here will be described a method of writing into any region of memory from ring3 by means of pagetable modification.</blockquote> <span class="note">23 authors, 55 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=WI&amp;index=WI">de</a><a href="/lib/index.php?lang=en&amp;index=WI&amp;index=WI">en</a><a href="/lib/index.php?lang=es&amp;index=WI&amp;index=WI">es</a><a href="/lib/index.php?lang=it&amp;index=WI&amp;index=WI">it</a><a href="/lib/index.php?lang=fr&amp;index=WI&amp;index=WI">fr</a><a href="/lib/index.php?lang=pl&amp;index=WI&amp;index=WI">pl</a><a href="/lib/index.php?lang=ru&amp;index=WI&amp;index=WI">ru</a><a href="/lib/index.php?lang=ua&amp;index=WI&amp;index=WI">ua</a></div>
</body>
</html>
