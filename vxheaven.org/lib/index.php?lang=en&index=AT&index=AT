<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Anti-virus technology (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"2a01b6f0814e115cc42db888217236fce5d962f8-1498758948-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div><div style="float:right;"><a href="/lib/index.php?tbs=0"><img src="/img/min.gif" alt="Minimize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: left;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="32" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><br clear="both"/></div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=AT">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=AT">Español</a>][<a href="/lib/?lang=it&amp;index=AT">Italiano</a>][<a href="/lib/?lang=fr&amp;index=AT">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=AT">Polski</a>][<a href="/lib/?lang=ru&amp;index=AT">Русский</a>][<a href="/lib/?lang=ua&amp;index=AT">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">W. Wong, M. Stamp &laquo;<a name="aww00" href="/lib/aww00.html">Hunting for Metamorphic Engines</a>&raquo; (18455)<br/></span><span class="small">F. Cohen &laquo;<a name="afc08" href="/lib/afc08.html">On the Implications of Computer Viruses and Methods of Defense</a>&raquo; (18341)<br/></span><span class="small">M. Akira, S. Toshimi, I. Tomonori, I. Tadashi &laquo;<a name="ama00" href="/lib/ama00.html">Detecting Unknown Computer Viruses - A New Approach</a>&raquo; (18026)<br/></span><span class="small">E. Spafford, S. Kumar &laquo;<a name="aes04" href="/lib/aes04.html">A Generic Virus Scanner in C++</a>&raquo; (17667)<br/></span><span class="small">W. Arnold, G. Tesauro &laquo;<a name="awa01" href="/lib/awa01.html">Automatically generated Win32 heuristic virus detection</a>&raquo; (17170)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Anti-virus technology</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<u>Anti-virus technology</u><br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><strong>Tony Abou-Assaleh, Nick Cercone, Vlado Keselj, Ray Sweidan</strong></div>&laquo;<a name="aat03" href="/lib/aat03.html">Detection of New Malicious Code Using N-grams Signatures</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>31.53Kb</small> <span class="note">15043 hits</span><br/><small>Proceedings of Second Annual Conference on Privacy, Security and Trust, October 13-15, 2004 (2004)</small><blockquote>Signature-based malicious code detection is the standard technique in all commercial anti-virus software. This method can detect a virus only after the virus has appeared and caused damage. Signature-based detection performs poorly when attempting to identify new viruses. Motivated by the standard signature-based technique for detecting viruses, and a recent successful text classification method, n-grams analysis, we explore the idea of automatically detecting new malicious code. We employ n-grams analysis to automatically generate signatures from malicious and benign software collections. The n-grams-based signatures are capable of classifying unseen benign and malicious code. The datasets used are large compared to earlier applications of n-grams analysis.</blockquote><div class="l1"><strong>Mori Akira, Sawada Toshimi, Izumida Tomonori, Inoue Tadashi</strong></div>&laquo;<a name="ama00" href="/lib/ama00.html">Detecting Unknown Computer Viruses - A New Approach</a>&raquo; <small>42.59Kb</small> <span class="note">18026 hits</span><br/><small>Journal of the National Institute of Information and Communications Technology Vol.52 Nos.1/2 2005, pp.75-88 (2005)</small><blockquote>We give an overview of a tool detect computer viruses without relying on "pattern files" that contain "signatures" of previously captured viruses. The system combines static code analysis with code simulation to identify malicious behaviors commonly found in computer viruses such as mass mailing, file infection, and registry overwrite. These prohibited behaviors are defined separately as security policies at the level of API library function calls in a state-transition like language. The current tool targets at Win32 binary viruses on Intel IA32 architectures and experiments show that they can detect most email viruses that had spread in the wild in recent years.</blockquote><div class="l1"><strong>William Arnold, Gerald Tesauro</strong></div>&laquo;<a name="awa01" href="/lib/awa01.html">Automatically generated Win32 heuristic virus detection</a>&raquo; <small>31.08Kb</small> <span class="note">17170 hits</span><br/><small>Virus Bulletin conference (2000)</small><blockquote>Heuristic classifiers which distinguish between uninfected and infected members of some class of program objects have usually been constructed by hand. We automatically construct multiple neural network classifiers which can detect unknown Win32 viruses, following a technique described in previous work (Kephart et al, 1995) on boot virus heuristics.These individual classifiers have a false positive rate too high for real-world deployment. We find that, by combining the individual classifier outputs using a voting procedure, the risk of false positives is reduced to an arbitrarily low level, with only a slight increase in the false negative rate. Regular heuristics retraining on updated sets of exemplars (both infected and uninfected) is practical if the false positive rate is low enough.</blockquote><div class="l1"><strong>Piotr Bania</strong></div>&laquo;<a name="apb00" href="/lib/apb00.html">Fighting EPO Viruses</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>25.37Kb</small> <span class="note">12479 hits</span><br/><small>SecurityFocus (2005)</small><blockquote>This short article describes the so-called Entry-Point Obscuring (EPO) virus coding technique, primarily through a direct analysis of the Win32.CTX.Phage virus. The reader should know the basics of IA-32 assembly and the main elements of the Portable Executable (PE) file structure to fully understand this article. The author also advises the reader to review the Win32.CTX.Phage description written by Peter Szor and Wason Han , since this article does not cover all the features of the virus.</blockquote><div class="l1"><strong>Danilo Bruschi, Lorenzo Martignoni, Mattia Monga</strong></div>&laquo;<a name="adb00" href="/lib/adb00.html">Using Code Normalization for Fighting Self-Mutating Malware</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>43.98Kb</small> <span class="note">12667 hits</span><br/><small>Technical Report 08-06, Dipartimento di Informatica e Comunicazione - Universita degli Studi di Milano, 2006. (2006)</small><blockquote>Self mutating malware has been introduced by computer virus writers who, in '90s, started to write polymorphic and metamorphic viruses in order to defeat anti-virus products. In this paper we present a novel approach for dealing with self mutating code which could represent the basis for a new detection strategy for this type of malware. A tool prototype has been implemented in order to validate the idea and the results are quite encouraging, and indicate that it could represent a new strategy for detecting this kind of malware</blockquote><div class="l1"><strong>David Chess</strong></div>&laquo;<a name="adc05" href="/lib/adc05.html">Virus Verification and Removal Tools and Techniques</a>&raquo; <small>23.51Kb</small> <span class="note">10824 hits</span><br/><small>High Integrity Computing Laboratory (1991)</small><blockquote>This is an updated version of a paper that originally appeared in the November 1991 issue of Virus Bulletin. Since this sort of technology is continually evolving, it seemed reasonable to make an update available on the net; in particular, the virus-removal language has been considerably enhanced since the paper was originally written.</blockquote><div class="l1"><strong>Fred Cohen</strong></div>&laquo;<a name="afc03" href="/lib/afc03.html">A Cryptographic Checksum for Integrity Protection</a>&raquo; <small>22.24Kb</small> <span class="note">14721 hits</span><br/><small>Computers and Security Volume 6, Issue 6, pp.505-510 (1987)</small><blockquote>This paper describes a cryptographic checksum technique for verifying the integrity of information in computer systems with no built-in protection. The technique is based on the use of repeated encryption using an RSA cryptosystem as a pseudo-random number generator (PRNG), the use of a user specified key as a seed for the PRNG, and reduction in a pseudo-random modulus as a means for mixing user specified information with generated numbers.</blockquote>&laquo;<a name="afc02" href="/lib/afc02.html">A Note On High Integrity PC Bootstrapping</a>&raquo; <small>15.62Kb</small> <span class="note">12834 hits</span><br/><small>This research was funded by ASP, PO Box 81270, Pittsburgh, PA 15217, USA (1999)</small><blockquote>In this paper, we describe two techniques for assuring a high integrity startup in a PC based computing environment. We begin with background information on PC startup procedures and current integrity threats against normal PC startup. We then describe a sound technique for assuring a high integrity startup and the basis for its soundness. Next we show a second method which is not sound, but which works well against attacks not specifically directed against this defense.</blockquote>&laquo;<a name="afc08" href="/lib/afc08.html">On the Implications of Computer Viruses and Methods of Defense</a>&raquo; <small>61.04Kb</small> <span class="note">18341 hits</span><br/><small>Invited Paper, IFIP-TC11, 'Computers and Security', V7#2 (1988)</small><blockquote>In this paper, we describe much of the previous and present work on computer viruses. We begin with a short history and bibliographic summary. We then describe some of the major issues that arise in the study of computer viruses and their protection ramifications. We describe most of the lines of research presently under way and some of their features and failings. We introduce a method by which certain classes of systems may be used in such a manner as to provide limited protection from computer viruses, and by which general purpose experiments in new protection mechanisms may be explored. Finally, we point out some of the social issues implied by viruses and the ramifications of our present social policies on the integrity of information residing in information systems.</blockquote><div class="l1"><strong>Peter Ferrie, Frédéric Perriot</strong></div>&laquo;<a name="apf11" href="/lib/apf11.html">Detecting Complex Viruses</a>&raquo; <small>11.5Kb</small> <span class="note">11668 hits</span><br/><small>SecurityFocus (2004)</small><blockquote>There are many metrics by which to measure the efficiency and effectiveness of an antivirus product and the response organization that is backing it. Some of the commonly used metrics today include the antivirus company's response time to new threats and well as the availability of proactive detection. But are these metrics enough?The purpose of this paper is to examine the difficulties of detecting complex viruses, including polymorphic, metamorphic and entry-point obscuring viruses. Whether or not an anti-virus technology can detect these viruses can be a useful metric to consider when evaluating AV products.In this article, we will show how complex viruses can offer an entirely different threat to organizations. It is important to step into the world of complex viruses by defining what a metamorphic, polymorphic, and entry-point obscuring virus is, understand when it is considered a real threat, and then see some real-life examples of complex viruses that have been discovered. This will lead into a discussion on the limitations of current anti-virus engine technology, and then finally, we will try to gauge the importance of detecting these complex viruses accurately, and in a timely fashion.</blockquote><div class="l1"><strong> flush</strong></div>&laquo;<a name="vfl02" href="/lib/vfl02.html">A brief history of virii vs. antivirii war</a>&raquo; <small>48.55Kb</small> <span class="note">9068 hits</span><br/><small><a href="/vx.php?fid=4#f4">*-zine (Asterix) [2]</a> (1999)</small><blockquote>Tie your seatbelts, prepare for long adventure through virus history. I will list basic principles of war between viruses and antiviruses to show you how the story was going on. Most probably I will not be able to keep it in chronological order but I try to use logical order, to show main technologies and counteractions on both sides.The story begins long long time ago (sounds like a fairtale, isn't it?) when first viruses were written. Doesn't matter which one exactly it was, the more important is that some of them appears on user's computers. At that time this war begins and it is continuing and growing up to now.</blockquote><div class="l1"><strong>Sarah Gordon</strong></div>&laquo;<a name="asg09" href="/lib/asg09.html">What is Wild?</a>&raquo; <small>52.32Kb</small> <span class="note">9945 hits</span><br/><small>20th National Information Systems Security Conference (2000)</small><blockquote>This paper considers the various definitions of "In the Wild", as well as how well the "In the Wild" criteria as defined by the individual testing organizations measure the ability of products to deliver adequate protection. Inherent problems with such approaches are discussed from both a development and user perspective. Some alternative testing, development and protection strategies are offered.</blockquote><div class="l1"><strong>Dmitry Gryaznov</strong></div>&laquo;<a name="adg00" href="/lib/adg00.html">Scanners of The Year 2000: Heuristics</a>&raquo; <small>37.23Kb</small> <span class="note">12444 hits</span><br/><small>Proceedings of the Fifth International Virus Bulletin Conference, pp.225-234 (1999)</small><blockquote>Working at the Virus lab, S&S International PLC, the author is also carrying out a research project on heuristic analysis. The article explains what heuristics are. Positive and negative heuristics are introduced. Some practical heuristics are represented. Different approaches to a heuristic program analysis are discussed. False alarms problem pointed and discussed. Several well-known scanners employing heuristics are compared (without naming the scanners) in both the virus detection rate and false alarms rate.</blockquote><div class="l1"><strong>Jeffrey Kephart, William Arnold</strong></div>&laquo;<a name="ajk05" href="/lib/ajk05.html">Automatic Extraction of Computer Virus Signatures</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>53.1Kb</small> <span class="note">11091 hits</span><br/><small>In Proceedings of the 4th Virus Bulletin International Conference, R. Ford, ed., Virus Bulletin Ltd., Abingdon, England, 1994, pp. 178-184 (1994)</small><blockquote>One way that anti-virus programs identify the presence of a virus in an executable file, a boot record, or memory is by using short identifiers called signatures, which consist of sequences of bytes in the machine code of the virus. A good signature is one that is found in every object infected by the virus, but is unlikely to be found if the virus is not present; i.e. the likelihood of both false negatives and false positives must be minimized. Typically, a human expert chooses a signature for a new virus by means of a laborious, time-consuming procedure. Unfortunately, the accelerating influx of new computer viruses threatens to outpace the ability of human experts to analyze and find signatures for them.To help alleviate this burden, we have developed a statistical method for automatically extracting good signatures from the machine code of a virus. The basic idea is to characterize statistically a large corpus of programs (currently about half a gigabyte), and then to use this information to estimate false-positive probabilities for proposed virus signatures. In effect, the algorithm extrapolates from the corpus to the much larger universe of executable programs which do or might exist. In practice, signatures extracted by this method are very unlikely to generate false positives, even when the scanner that employs them permits some mismatches.This patent-pending technique has been used to either extract or evaluate the more than 2500 virus signatures used by IBM AntiVirus. It obviates the need for a small army of virus analysts, permitting IBM's signature database to be maintained by a single virus expert working halftime.</blockquote><div class="l1"><strong>Baudouin Le Charlier, Morton Swimmer, Abdelaziz Mounji</strong></div>&laquo;<a name="abc01" href="/lib/abc01.html">Dynamic detection and classification of computer viruses using general behaviour patterns</a>&raquo; <small>43.76Kb</small> <span class="note">15217 hits</span><br/><small> (1995)</small><blockquote>The number of files that need processing by the virus labs is growing nearly exponentially. Even though only a small proportion of these files contain new viruses, each file requires examination. The normal method for dealing with these files in the virus labs is still brute force manual analysis. A virus expert runs several tests on a given file and delivers a verdict on whether it is virulent or not. If it is a new virus, it will be necassary to detect it. Some tools have been developed speed up this process. These range from programs that identify previously classified files to programs that generate detection data. Some antiviruses have built in mechanisms based on heuristics that enable the antivirus to detect unknown viruses. Unfortunately all these tools have limitations. In this paper, we will demonstrate how an emulator is used to monitor system activity of a virtual PC, and how the expert system ASAX is used to analyse the stream of data the emulator produced. We use general rules to generically detect real viruses reliably, and specific rules to extract details of their behaviour. The resulting system is called VIDES and is a prototype for an automatic analysis system for computer viruses and possibly a prototype anti virus for the emerging 32 bit PC operating systems.</blockquote><div class="l1"><strong>Alexei Lisitsa, Matt Webster</strong></div>&laquo;<a name="amw02" href="/lib/amw02.html">Supercompilation for Equivalence Testing in Metamorphic Computer Viruses Detection</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>15.66Kb</small> <span class="note">11454 hits</span><br/><small>A version of this paper has been presented at the Workshop on the Theory of Computer Viruses, 2008, Nancy, 15.05.2008 (2008)</small><blockquote>In this paper we present a novel approach to detection of metamorphic computer viruses by using proving program equivalence based on program transformation technique known as supercompilation [7]. Proving program equivalence is an undecidable problem in the general case; however, in specific cases we may find decidable or semi-decidable procedures that can prove that a sub-class of programs are equivalent. This is of relevance for detecting metamorphic computer viruses, which use a variety of semantics-preserving, syntax-mutating methods for code obfuscation. The main purpose of this obfuscation is to avoid detection by signature scanning. An important factor here is that semantics is preserved; therefore, if we can prove using some procedure that two different programs are equivalent, then in principle we can detect metamorphic computer viruses using this procedure.</blockquote><div class="l1"><strong>Patrick Min</strong></div>&laquo;<a name="apm00" href="/lib/apm00.html">Virus Detection Alternatives</a>&raquo; <small>37.67Kb</small> <span class="note">11441 hits</span><br/><small> (1992)</small><blockquote>An evaluation of different techniques for virus detection. The discussion is sufficiently general to be applicable to a substantial number of computing platforms. All mentioned practical issues concern the MS DOS operating system. Improvement of the operating system is presented as the most fundamental and therefore effective way to tackle the virus problem.</blockquote><div class="l1"><strong>Dmitry Mostovoy</strong></div>&laquo;<a name="adm01" href="/lib/adm01.html">Modern Methods of Detecting and Eradicating Known and Unknown Viruses</a>&raquo; <small>12.04Kb</small> <span class="note">11032 hits</span><br/><small>5th international conference Virus Bulletin - 95 (1995)</small><blockquote>The first outcome of our efforts in this direction, ADinf (Advanced Diskinfoscope), is a forecasting center which alerts the user in advance with great reliability about the intrusion of viruses, even HITHERTO unknown infectors. As distinct from all other data integrity checkers, ADinf inspects a disk by scanning the sectors one by one via direct addressing of BIOS without the assistance of the operating system and takes under check all vital parts of hard disk.</blockquote><div class="l1"><strong>Eugene Spafford, Sandeep Kumar</strong></div>&laquo;<a name="aes04" href="/lib/aes04.html">A Generic Virus Scanner in C++</a>&raquo; <small>44.93Kb</small> <span class="note">17667 hits</span><br/><small>Technical Report CSD-TR-92-062 (1992)</small><blockquote>Computer viruses pose an increasing risk to computer data integrity. They cause loss of valuable data and cost an enormous amount in wasted effort in restoration/duplication of lost and damaged data. Each month many new viruses are reported. As the problem of viruses increases, we need tools to detect them and to eradicate them from our systems. This paper describes a virus detection tool: a generic virus scanner in C ++ with no inherent limitations on the file systems, file types, or host architectures that can be scanned. The tool is completely general and is structured in such a way that it can easily be augmented to recognize viruses across different system platforms with varied file types. The implementation defines an abstract C++ class, VirInfo, which encapsulates virus features common to all scannable viruses. Subclasses of this abstract class may be used to define viruses that infect different machines and operating systems. The generality of the mechanism allows it to be used for other forms of scanning as well.</blockquote><div class="l1"><strong>Gerald Tesauro, Jeffrey Kephart, Gregory Sorkin</strong></div>&laquo;<a name="agt00" href="/lib/agt00.html">Neural Networks for Computer Virus Recognition</a>&raquo; <small>7.41Kb</small> <span class="note">12259 hits</span><br/><small>IEEE Expert, vol. 11, no. 4, Aug. 1996, pp. 5-6. (1996)</small><blockquote>We have developed a neural network for generic detection of a particular class of computer viruses_the so-called boot sector viruses that infect the boot sector of a floppy disk or a hard drive. This is an important and relatively tractable subproblem of generic virus detection. Only about 5% of all known viruses are boot sector viruses, yet they account for nearly 90% of all virus incidents.1 We have successfully deployed our neural network as a commercial product, distributing it to millions of PC users worldwide as part of the IBM AntiVirus software package.</blockquote><div class="l1"><strong>Jamie Twycross, Matthew Williamson</strong></div>&laquo;<a name="ajt01" href="/lib/ajt01.html">Implementing and testing a virus throttle</a>&raquo; <small>40.54Kb</small> <span class="note">12134 hits</span><br/><small>Proceedings of the 12th USENIX Security Symposium, August 4-8, 2003, Washington, DC, USA (2003)</small><blockquote>In this paper we build on previous theoretical work and describe the implementation and testing of a virus throttle - a program, based on a new approach, that is able to substantially reduce the spread of and hence damage caused by mobile code such as worms and viruses. Our approach is different from current, signature-based anti-virus paradigms in that it identifies potential viruses based on their network behaviour and, instead of preventing such programs from entering a system, seeks to prevent them from leaving. The results presented here show that such an approach is effective in stopping the spread of a real worm, W32/Nimda-D, in under a second, as well as several different configurations of a test worm.</blockquote><div class="l1"><strong>Joe Wells</strong></div>&laquo;<a name="ajw01" href="/lib/ajw01.html">A Radical New Approach to Virus Scanning</a>&raquo; <small>111.14Kb</small> <span class="note">11452 hits</span><br/><small>CyberSoft, Inc. (1999)</small><blockquote>Don't expect this paper to be about a virus problem. To the contrary, it's actually about your having an antivirus problem.</blockquote><div class="l1"><strong>Wing Wong, Mark Stamp</strong></div>&laquo;<a name="aww00" href="/lib/aww00.html">Hunting for Metamorphic Engines</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>67.55Kb</small> <span class="note">18455 hits</span><br/><small><a href="/vx.php?fid=1954#f1954">Journal In Computer Virology vol. 2, no 3</a> (2006)</small><blockquote>In this paper, we analyze several metamorphic virus generators. We define a similarity index and use it to precisely quantify the degree of metamorphism that each generator produces. Then we present a detector based on hidden Markov models and we consider a simpler detection method based on our similarity index. Both of these techniques detect all of the metamorphic viruses in our test set with extremely high accuracy. In addition, we show that popular commercial virus scanners do not detect the highly metamorphic virus variants in our test set.</blockquote><div class="l1"><strong>InSeon Yoo</strong></div>&laquo;<a name="aiy00" href="/lib/aiy00.html">Visualizing Windows Executable Viruses Using Self-Organizing Maps</a>&raquo; <small>27.89Kb</small> <span class="note">14383 hits</span><br/><small>Proceedings of the 2004 ACM workshop on Visualization and data mining for computer security, pp.82-89 (2004)</small><blockquote>This paper concentrates on visualizing computer viruses without using virus specific signature information as a prior stage of the very important problem of detecting computer viruses. In this paper, we address the fact that each viruses have its own character to be distinguished although it is inserted in the executable file. They cannot hide their own feature through the SOM visualization; this feature is like a DNA to determine an individual's unique genetic code. We present how virus codes affect the whole program projection. Without each virus signature, we present how the virus pattern in Windows executable files tells us their family. We show that the variant of each virus also can be covered with each virus mask, which is produced by SOM. We also present the file structure based SOMs of Windows executable files.</blockquote> <span class="note">22 authors, 24 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=AT&amp;index=AT">de</a><a href="/lib/index.php?lang=en&amp;index=AT&amp;index=AT">en</a><a href="/lib/index.php?lang=es&amp;index=AT&amp;index=AT">es</a><a href="/lib/index.php?lang=it&amp;index=AT&amp;index=AT">it</a><a href="/lib/index.php?lang=fr&amp;index=AT&amp;index=AT">fr</a><a href="/lib/index.php?lang=pl&amp;index=AT&amp;index=AT">pl</a><a href="/lib/index.php?lang=ru&amp;index=AT&amp;index=AT">ru</a><a href="/lib/index.php?lang=ua&amp;index=AT&amp;index=AT">ua</a></div>
</body>
</html>
