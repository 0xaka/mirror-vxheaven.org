<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Polymorphism (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"d2ca68a3053113ab15fa1be2fd01dcf60dd07c9b-1498754897-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/lib/index.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=PO">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=PO">Español</a>][<a href="/lib/?lang=it&amp;index=PO">Italiano</a>][<a href="/lib/?lang=fr&amp;index=PO">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=PO">Polski</a>][<a href="/lib/?lang=ru&amp;index=PO">Русский</a>][<a href="/lib/?lang=ua&amp;index=PO">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">The Mental Driller &laquo;<a name="vmd03" href="/lib/vmd03.html">Advanced polymorphic engine construction</a>&raquo; (18651)<br/></span><span class="small">MidNyte &laquo;<a name="vmn04" href="/lib/vmn04.html">An Introduction to Encryption, Part I</a>&raquo; (15578)<br/></span><span class="small">Dark Angel &laquo;<a name="vda01" href="/lib/vda01.html">Advanced Polymorphism Primer</a>&raquo; (15480)<br/></span><span class="small">T. Yetiser &laquo;<a name="ayt01" href="/lib/ayt01.html">Polymorphic Viruses - Implementation, Detection, and Protection</a>&raquo; (15367)<br/></span><span class="small">S. Pearce &laquo;<a name="asp00" href="/lib/asp00.html">Viral polymorphism</a>&raquo; (14491)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Polymorphism</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<u>Polymorphism</u><br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><strong> Buz</strong></div>&laquo;<a name="vbu01" href="/lib/vbu01.html">Polymorphism - A Discussion Of Methodology And Implementation</a>&raquo; <small>21Kb</small> <span class="note">8930 hits</span><br/><small><a href="/vx.php?fid=4#f4">*-zine (Asterix) [2]</a> (1999)</small><blockquote>This article deals with a viral technology that has been widely documented, discussed and implemented. However, it is aimed at explaining certain design flaws in current polymorphic engines and proposing solutions for these flaws, as well as suggesting improvements to current technology.The discussion will present an overview of the history of polymorphism pertinent to our subject, anti-virus detection methods, and will present concepts needed for properly designing polymorphic engines with a view to their survival in the wild. It will also include a section on structuring and writing polymorphic engines.</blockquote><div class="l1"><strong> Changeling</strong></div>&laquo;<a name="vch03" href="/lib/vch03.html">Polymorphism: Level 6B (Polymorphism: Chaotic Permutations)</a>&raquo; <small>10.17Kb</small> <span class="note">12938 hits</span><br/><small> (1999)</small><blockquote>Level 6: permutating viruses. The main code of the virus is subject to change to change, it is divided into blocks which are positioned in random order while infecting. Despite of that the virus continues to be able to work. Such viruses may be unencrypted.</blockquote><div class="l1"><strong> Dark Angel</strong></div>&laquo;<a name="vda01" href="/lib/vda01.html">Advanced Polymorphism Primer</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9.53Kb</small> <span class="note">15480 hits</span><br/><small><a href="/vx.php?fid=22#f22">40hex [11]</a> (1993)</small><blockquote>[...] With the recent proliferation of virus encryption "engines," I was inspired to write my own. In a few short weeks, I was able to construct one such routine which can hold its own. A polymorphic encryption routine is nothing more than a complex code generator [...]</blockquote><div class="l1"><strong> flush, MGL</strong></div>&laquo;<a name="vfl00" href="/lib/vfl00.html">Other techniques of polymorphism</a>&raquo; <small>8.36Kb</small> <span class="note">8263 hits</span><br/><small><a href="/vx.php?fid=4#f4">*-zine (Asterix) [2]</a> (1999)</small><blockquote>Polymorphism is for viruses one of the must. Buz[FS] brings us some valuable ideas for the coding. His paper is very consistent and good written. But there are several ommited things that we should mention.</blockquote><div class="l1"><strong> GLiTCH</strong></div>&laquo;<a name="vgl01" href="/lib/vgl01.html">GLiTCH's Polymorphic Batch Tutorial</a>&raquo; <small>13.33Kb</small> <span class="note">12727 hits</span><br/><blockquote></blockquote><div class="l1"><strong> hh86</strong></div>&laquo;<a name="vhh14" href="/lib/vhh14.html">GPU powered file infector</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.29Kb</small> <span class="note">13589 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>This is my second virus to use NVIDIA CUDA capable GPU. It is a direct action file infector of PE32 exe files in the current directory, overwriting to their reloc data if present in the last section and enough to hold the virus body. I call its infection engine "Vesper". It is the world's first virus to infect files using the GPU.</blockquote>&laquo;<a name="vhh13" href="/lib/vhh13.html">Using CUDA PTX for decryption</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.04Kb</small> <span class="note">13078 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>It is my first virus using NVIDIA CUDA capable GPU for decryption. It is a direct action file infector of PE32 exe files in the current directory, overwriting to their reloc data if present in the large section and enough to hold the virus body. The infected files become droppers. It is the world's first virus to decrypt code using Parallel Thread Execution code.</blockquote><div class="l1"><strong> jack twoflower</strong></div>&laquo;<a name="vjt04" href="/lib/vjt04.html">The 'bliem' polymorphic engine for VBA</a>&raquo; <small>6.1Kb</small> <span class="note">12185 hits</span><br/><blockquote>This engine is a combination of both a class infector and a polymorphic engine. The whole thing is called 'bliem' like the virus I first used this engine in.</blockquote><div class="l1"><strong> JHB</strong></div>&laquo;<a name="vjh01" href="/lib/vjh01.html">Mutation Engines</a>&raquo; <small>8.14Kb</small> <span class="note">12080 hits</span><br/><small><a href="/vx.php?fid=516#f516">Xine [1]</a> (1996)</small><blockquote>I had taken apart several viruses, but most mutation engines due to thier nature are difficult to dissassemble. So after seeing other people's code I decide to try my hand at this type of coding. This article will illustrate the path I took in designing and building a Mutation Engine.</blockquote><div class="l1"><strong> Lord Julus</strong></div>&laquo;<a name="vlj04" href="/lib/vlj04.html">Polymorphism - Analysis on the decryptor generator 1.5</a>&raquo; <small>63.29Kb</small> <span class="note">12364 hits</span><br/><small><a href="/vx.php?fid=6#f6">29a [2]</a> (1998)</small><blockquote>Before the heuristic analysers and the code emulators appeared on the market the usual encryption methods worked pretty good. And I do not speak only about viruses. I also reffer to the methods used for protecting software and data. Code emulators are able to crack your protections in a matter of minutes. That's when the ideea of polymorphism arose. A coder from Bulgaria passing by the nickname of Dark Avenger who wrote a lot of destructive viruses (including an antivirus against two of his viruses who unleashed a third virus) came with this ideea when his MtE (Mutation Engine) appeared. What polymorphism is really all about is creating self decrypting code, able to create each and every time a different decryptor containing both decrypting code and also junk instruction designed to make debugging and emultating harder.As this article is not designed to explain why is this needed or make a pro statement for polymorphism I will get directly to facts.</blockquote><div class="l1"><strong> MidNyte</strong></div>&laquo;<a name="vmn04" href="/lib/vmn04.html">An Introduction to Encryption, Part I</a>&raquo; <small>13.41Kb</small> <span class="note">15578 hits</span><br/><small><a href="/vx.php?fid=225#f225">Final Chaos [1]</a> (1999)</small><blockquote>First, a brief description of some of the principles involved in encryption that you should know before we start. After the principles follows a brief discussion of a few more important topics, then examples of the encryption types mentioned here.</blockquote>&laquo;<a name="vmn05" href="/lib/vmn05.html">An Introduction to Encryption, Part II</a>&raquo; <small>19.07Kb</small> <span class="note">9286 hits</span><br/><small><a href="/vx.php?fid=225#f225">Final Chaos [1]</a> (1999)</small><blockquote>I'll give you some ways of making your data as secure as possible, along with a few ways of reducing the amount of code you require to encrypt and decrypt something securely. As before, I will leave the tutoring of armouring to people better qualified to teach (I've only dabbled in the subject so far).</blockquote>&laquo;<a name="vmn06" href="/lib/vmn06.html">An Introduction to Encryption, Part III (Is an impenetrable encryption possible?)</a>&raquo; <small>8.01Kb</small> <span class="note">9318 hits</span><br/><small><a href="/vx.php?fid=177#f177">Coderz [1]</a> (2000)</small><blockquote></blockquote><div class="l1"><strong>Stephen Pearce</strong></div>&laquo;<a name="asp00" href="/lib/asp00.html">Viral polymorphism</a>&raquo; <small>23.63Kb</small> <span class="note">14491 hits</span><br/><small>SANS Institute (2003)</small><blockquote>This paper is an overview of polymorphic and metamorphic viruses. It defines them, provides some information regards the safe handling of them and comments on the legality/morality/policy regard the analysis of them. It looks at their history and the methods that they used both with reference to individual viruses and the virus toolkits prevalent in the early 90s. The response of the anti-virus industry is described along with the more recent evolution to metamorphic viruses and the challenge they provide. The aim will be to describe the techniques and then draw parallels between what was seen with viruses and what may happen with worms which now dominate the "virus" world.</blockquote><div class="l1"><strong> pr0mix</strong></div>&laquo;<a name="vpo01" href="/lib/vpo01.html">"Smart" trash: building of logic</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.8Kb</small> <span class="note">9575 hits</span><br/><small><a href="/vx.php?fid=1948#f1948">Electrical Ordered Freedom #3</a> (2011)</small><blockquote>The main goal of garbage instructions - a hiding/protection of useful code (from av'ers, a watchful eye reverser and other curious). However, the "wrong" trash can lead to detection of viral code, thereby undermining all our efforts.This text is about how to improve the quality of the generated garbage.</blockquote><div class="l1"><strong> Rogue Warrior</strong></div>&laquo;<a name="vrw01" href="/lib/vrw01.html">Argument for slow infection and slow polymorphism</a>&raquo; <small>7.54Kb</small> <span class="note">11952 hits</span><br/><small><a href="/vx.php?fid=274#f274">Insane Reality Magazine [8]</a> (1996)</small><blockquote>Many people say that fast infectors are better than slow infectors but I have to disagree. The goal of a virus is to travel to as many hosts as possible. Agreed?</blockquote>&laquo;<a name="vrw02" href="/lib/vrw02.html">Guide to improving Polymorphic Engines</a>&raquo; <small>17.61Kb</small> <span class="note">12633 hits</span><br/><small><a href="/vx.php?fid=274#f274">Insane Reality Magazine [8]</a> (1996)</small><blockquote>This is a guide for those who already know how to make an engine but cannot work out why their viruses are still detectable.</blockquote><div class="l1"><strong> SPTH</strong></div>&laquo;<a name="vsp25" href="/lib/vsp25.html">Hiding your virus in the matrix</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>19.92Kb</small> <span class="note">13387 hits</span><br/><small> (2009)</small><blockquote>In this article you will read about a new kind of polymorphism provided by the eigenvalue problem. We will use some easy results from linear algebra to understand the concept, look at the encryption, decryption and chipher code, see some example and a running virus using this technique, and read about how to use that technique and how to improve it.</blockquote><div class="l1"><strong> The Black Baron</strong></div>&laquo;<a name="vbb01" href="/lib/vbb01.html">A general description of the methods behind a polymorph engine</a>&raquo; <small>23.19Kb</small> <span class="note">12250 hits</span><br/><blockquote>This .DOC attempts to provide an insight into the workings of a Polymorph Engine. The methods described in this .DOC are the ones used in SMEG (Simulated Metamorphic Encryption Generator) Polymorph Engine and are by no means the only way to do it!</blockquote><div class="l1"><strong> The Mental Driller</strong></div>&laquo;<a name="vmd03" href="/lib/vmd03.html">Advanced polymorphic engine construction</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>38.16Kb</small> <span class="note">18651 hits</span><br/><small><a href="/vx.php?fid=10#f10">29a [5]</a> (2000)</small><blockquote>This article is assumed upon a basis on polymorphic engines construction, so you need an adquired good knowledge about decryptor generators and its construction (it's not for newbies! ;)I wrote this for win32 engines. I'm not very versated in Linux/Unix virusing, but modifying some words on this article (and some points in the index) it can be extrapolated to engines under these systems.</blockquote><div class="l1"><strong> The Sorcerer</strong></div>&laquo;<a name="vts01" href="/lib/vts01.html">Thoughts About The Use Of Garbage Instructions In Polymorphism</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>4.61Kb</small> <span class="note">8903 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2006)</small><blockquote>Most texts on polymorphism suggest that the use of garbage instructions are paramount, in my playing with polymorphism I have come to the conclusion that Garbage is of limited use in protecting a virus from AV software and can in fact do the opposite.</blockquote><div class="l1"><strong>Gary Watson</strong></div>&laquo;<a name="agw00" href="/lib/agw00.html">A Discussion of Polymorphism</a>&raquo; <small>9.38Kb</small> <span class="note">11291 hits</span><br/><small>Data Plus (1992)</small><blockquote>A polymorphic virus is a type of encrypted virus. Let's talk about those first. Many anti-virus programs rely on what we call a "scanner" which looks for an unusual sequence of machine language instructions or other unique data that indicates that a given virus is present. To defeat this, virus writers started encrypting their viruses by applying (for example) a random number exclusive-or'ed with the body of the virus. This obsfucates the unique string of bytes. So, programs like McAfee's scan had to do one of two things: look for the decryption routine (which cannot itself be encrypted since the 808x microprocessor would fail to execute it); or attempt to decrypt the body of the virus and look for the unique string of bytes in the body of the virus.</blockquote><div class="l1"><strong>Joe Wells</strong></div>&laquo;<a name="ajw00" href="/lib/ajw00.html">Understanding encryption and polymorphism</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>14.14Kb</small> <span class="note">7023 hits</span><br/><small>IBM antivirus online (1996)</small><blockquote>Escalation is a good word to use here.Virus programmers may encrypt messages so they can not be easily seen. In the same way many viruses contain encrypted code to hide what they do. Before there were virus scanners, there were programs written to detect possible Trojans. One such program was written by Andy Hopkins in 1984 and was called CHK4BOMB. When you used it to check out a program, it would alert you to anything suspicious in the program, like direct disk writes and formatting, as well as print out any messages it found. Obviously, a fully encrypted program, even one that did and said nasty things, would look safe on examination.Yet, encrypted viruses are not complete encrypted. Encrypted code is no longer executable code - it simply won't run. For an encrypted virus to actually run, it has to decrypt its code and data. The portion that does this decryption is not encrypted because it has to run. This portion is refered to as a decryptor.</blockquote><div class="l1"><strong> Wintermute</strong></div>&laquo;<a name="vwm01" href="/lib/vwm01.html">"Do polymorphism" tutorial</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.91Kb</small> <span class="note">7622 hits</span><br/><small><a href="/vx.php?fid=180#f180">DDT [1]</a> (1999)</small><blockquote>This tutorial isn't to discuss about any polymorphism matters, or to just explain you it's basics. It's fully oriented for you to at last learn how to write a polymorphic engine, with useful tips on how to implement it.Some coders, even some really good ones, feel it so difficult when it's time to come into polymorphism. "Ok, I have to swap instructions, but how the hell do I make that, how do I control the decryptor length and that the decrypting instructions are on their place?" and so on.</blockquote>&laquo;<a name="vwm00" href="/lib/vwm00.html">Polymorphism and grammars</a>&raquo; <small>21.82Kb</small> <span class="note">13721 hits</span><br/><small> (1999)</small><blockquote>This is a technical article about polymorphism and grammar/automaton theories, which is intended to give a new point of view about this virus technique, and to show you some things on polymorphism theory. Before you start this, keep in mind it's not a "begginer article". If you never did a polymorphic engine or you don't know what the hell it is, you may come here later.</blockquote><div class="l1"><strong>Tarkan Yetiser</strong></div>&laquo;<a name="ayt00" href="/lib/ayt00.html">Mutation Engine Report</a>&raquo; <small>25.22Kb</small> <span class="note">12329 hits</span><br/><small> (1992)</small><blockquote>This report is provided to satisfy the curiosity of the public. We were approached by some third parties to perform an analysis on MtE. We would like to share the results of our analysis with everyone. If you find an error or inaccuracy in this report, please feel free to contact us. All constructive criticism is welcome. We thank all those who took the time to read and bring inaccurate or ambiguous parts of this report to our attention.</blockquote>&laquo;<a name="ayt01" href="/lib/ayt01.html">Polymorphic Viruses - Implementation, Detection, and Protection</a>&raquo; <small>13.84Kb</small> <span class="note">15367 hits</span><br/><small> (1993)</small><blockquote>This paper discusses the subject of polymorphic engines and viruses. It looks at general characteristics of polymorphism as currently implemented. It tries to maintain a practical presentation of the subject matter rather than an academic and abstract approach that would confuse many people. Basic knowledge of the Intel 80x86 instruction set will be highly useful in understanding the material presented. A very detailed discussion is avoided not to have the side effect of "teaching" how to create polymorphic engines or viruses. The purpose is to help computer professionals understand this trend of virus development and the threats it poses. It should serve as a starting point for individuals who would like to get an idea about the polymorphic viruses and how they are implemented. Long gone are the days of innocence, when any schoolboy could write a virus scanner using a few signatures extracted from captured virus samples. The subject of polymorphism can be extended to other areas such as anti-reverse-engineering or anti-direct-attacks, and it can be argued to be useful in that context. This paper only looks at the use of polymorphism in PC viruses to avoid simple detection techniques.</blockquote> <span class="note">21 authors, 27 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=PO&amp;index=PO">de</a><a href="/lib/index.php?lang=en&amp;index=PO&amp;index=PO">en</a><a href="/lib/index.php?lang=es&amp;index=PO&amp;index=PO">es</a><a href="/lib/index.php?lang=it&amp;index=PO&amp;index=PO">it</a><a href="/lib/index.php?lang=fr&amp;index=PO&amp;index=PO">fr</a><a href="/lib/index.php?lang=pl&amp;index=PO&amp;index=PO">pl</a><a href="/lib/index.php?lang=ru&amp;index=PO&amp;index=PO">ru</a><a href="/lib/index.php?lang=ua&amp;index=PO&amp;index=PO">ua</a></div>
</body>
</html>
