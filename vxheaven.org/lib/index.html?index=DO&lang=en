<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library MS-DOS specific (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"18705b6bb6181f7f78f2321f230c3bc80d6f9532-1498754887-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/lib/index.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=DO">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=DO">Español</a>][<a href="/lib/?lang=it&amp;index=DO">Italiano</a>][<a href="/lib/?lang=fr&amp;index=DO">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=DO">Polski</a>][<a href="/lib/?lang=ru&amp;index=DO">Русский</a>][<a href="/lib/?lang=ua&amp;index=DO">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">Dark Angel &laquo;<a name="vda07" href="/lib/vda07.html">Phunky Virus Writing Guide</a>&raquo; (35784)<br/></span><span class="small">Black Wolf &laquo;<a name="vbw04" href="/lib/vbw04.html">EXE Viruses</a>&raquo; (15392)<br/></span><span class="small">Black Wolf &laquo;<a name="vbw05" href="/lib/vbw05.html">Guide to Memory Resident Viruses</a>&raquo; (14291)<br/></span><span class="small">RatBoy &laquo;<a name="vrb01" href="/lib/vrb01.html">Overwriting virus tutorial #1</a>&raquo; (13495)<br/></span><span class="small">Black Wolf &laquo;<a name="vbw02" href="/lib/vbw02.html">COM Viruses</a>&raquo; (13374)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: MS-DOS specific</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<u>MS-DOS specific</u><br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><strong> "Q" the Misanthrope</strong></div>&laquo;<a name="vqm01" href="/lib/vqm01.html">HMA Residency</a>&raquo; <small>15.71Kb</small> <span class="note">11071 hits</span><br/><small><a href="/vx.php?fid=6#f6">29a [2]</a> (1998)</small><blockquote>It allows you to put your virus in a location not seen with any of the conventional memory tools. MEM, CHKDSK and others don't indicate that more memory is being used in the HMA when a virus goes resident there.</blockquote>&laquo;<a name="vqm02" href="/lib/vqm02.html">Playing 'Hide and Seek'</a>&raquo; <small>11.67Kb</small> <span class="note">11584 hits</span><br/><small><a href="/vx.php?fid=6#f6">29a [2]</a> (1998)</small><blockquote>It is a game of one-up-man-ship between the VX and the AV community. VX seems to be winning this battle but is also forcing new improvements. VX creates virus. AV creates scan strings. VX creates mutation. AV creates smart detectors. VX creates stealth. AV counters that with direct access. VX creates tunneling. AV stops that. VX creates tracing. AV stumbles. VX creates retro. AV stumbles. VX creates Stop AV from memory scanning. AV stumbles. VX creates macro viruses. AV goes nuts. VX creates new places to hide from AV. AV will probably stumble again.</blockquote><div class="l1"><strong> b0z0</strong></div>&laquo;<a name="vbz01" href="/lib/vbz01.html">Mid-Infection on relocations</a>&raquo; <small>24.32Kb</small> <span class="note">9468 hits</span><br/><small> (1998)</small><blockquote>Midfile infection is undoubtely one of the most interesting but not yet totally explored topics in virus writing. There aren't actually many midfile infectors around and there are even less "real" midfile infectors...</blockquote><div class="l1"><strong> Black Wolf</strong></div>&laquo;<a name="vbw02" href="/lib/vbw02.html">COM Viruses</a>&raquo; <small>10.48Kb</small> <span class="note">13374 hits</span><br/><blockquote>[...] There are numerous methods to infect each file type - some of the more popular will be shown in this tutorial. The simplest type of executable file to infect is the .COM file. [...]</blockquote>&laquo;<a name="vbw03" href="/lib/vbw03.html">Combined Viruses</a>&raquo; <small>7.91Kb</small> <span class="note">10858 hits</span><br/><blockquote>Three main problems are apparent in the last two viruses that we need to fix. The first is that there is little or no error handling in the viruses. This can cause that wonderful 'Disk Error. Abort, Retry, or Fail?' message to appear on a write protected disk, which is generally not desirable. The next problem is that both viruses can be stopped by the read-only attribute.</blockquote>&laquo;<a name="vbw04" href="/lib/vbw04.html">EXE Viruses</a>&raquo; <small>9.37Kb</small> <span class="note">15392 hits</span><br/><blockquote>Infecting EXE files, however, is a little more complex than infecting COM's. Let us first take a look at exactly how an EXE is structured.</blockquote>&laquo;<a name="vbw05" href="/lib/vbw05.html">Guide to Memory Resident Viruses</a>&raquo; <small>53.19Kb</small> <span class="note">14291 hits</span><br/><blockquote>[...] A memory resident program (or TSR for Terminate and Stay Resident) is a program that leaves at least a portion of itself in memory after it terminates and waits for a particular even to take place before it 'activates' again. [...]</blockquote><div class="l1"><strong> Cmdr PVC</strong></div>&laquo;<a name="vcp01" href="/lib/vcp01.html">Guide to Resident Viruses</a>&raquo; <small>27.13Kb</small> <span class="note">10440 hits</span><br/><blockquote>In this tutorial, I'm hoping to show exactly how to write the critical parts of a functioning memory resident virus, and provide a few source code examples and explanations for most of the methods I'm documenting.</blockquote><div class="l1"><strong> Dark Angel</strong></div>&laquo;<a name="vda05" href="/lib/vda05.html">Boot Infectors</a>&raquo; <small>11.85Kb</small> <span class="note">12946 hits</span><br/><small><a href="/vx.php?fid=25#f25">40hex [14]</a> (1995)</small><blockquote>File based viruses are executed after the operating system loads. Boot infectors, however, latch onto the parts of the drive that are accessed by the BIOS when it attempts to load the operating system itself. Therefore, there is little that can be done to intercept the boot infector once it has successfully installed itself onto a disk.</blockquote>&laquo;<a name="vda12" href="/lib/vda12.html">EXE Self-Disinfection</a>&raquo; <small>17.26Kb</small> <span class="note">11996 hits</span><br/><small><a href="/vx.php?fid=24#f24">40hex [13]</a> (1994)</small><blockquote>In the last issue of 40Hex, Demogorgon presented an article on self-disinfecting COM files. COM file disinfection is simplistic and very straightforward. In this article, we shall deal with the somewhat more complex topic of EXE file self-disinfection.</blockquote>&laquo;<a name="vda02" href="/lib/vda02.html">An Introduction to Non-Overwriting Virii</a>&raquo; <small>37.97Kb</small> <span class="note">11374 hits</span><br/><small><a href="/vx.php?fid=18#f18">40hex [7]</a> (1992)</small><blockquote>This article is designed as a simple introduction to all interested to the world of nonoverwriting virii. All that is assumed is a working knowledge of 80x86 assembly language.</blockquote>&laquo;<a name="vda07" href="/lib/vda07.html">Phunky Virus Writing Guide</a>&raquo; <small>106.07Kb</small> <span class="note">35784 hits</span><br/><blockquote>This guide will show you what it takes to write a virus and also will give you a plethora of source code to include in your own virii.</blockquote>&laquo;<a name="vda14" href="/lib/vda14.html">System file tables and their usage</a>&raquo; <small>9.5Kb</small> <span class="note">9969 hits</span><br/><small><a href="/vx.php?fid=22#f22">40hex [11]</a> (1993)</small><blockquote>A powerful though seldom-used technique in virus writing is the use of the system file table, an internal DOS structure similar in some respects to FCBs, albeit vastly more powerful.</blockquote>&laquo;<a name="vda15" href="/lib/vda15.html">UMB Residency</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.69Kb</small> <span class="note">8893 hits</span><br/><small><a href="/vx.php?fid=25#f25">40hex [14]</a> (1995)</small><blockquote>One day, while fiddling with loading programs into MSDOS UMB's, I realised that there are very few viruses that used UMB's. This is surprising, given the prevalence of UMB's and the ease with which DOS viruses may hide their presence through the use of UMB's.</blockquote><div class="l1"><strong> Dark Fiber</strong></div>&laquo;<a name="vdi01" href="/lib/vdi01.html">Single Stepping Tunnel Techniques</a>&raquo; <small>21.41Kb</small> <span class="note">9759 hits</span><br/><small> (1995)</small><blockquote></blockquote><div class="l1"><strong> Demogorgon</strong></div>&laquo;<a name="vdg01" href="/lib/vdg01.html">Self Checking Executable Files</a>&raquo; <small>9.81Kb</small> <span class="note">10130 hits</span><br/><small><a href="/vx.php?fid=23#f23">40hex [12]</a> (1993)</small><blockquote>In this article I will explain a method that will allow .COM files to be immune to simple viruses.</blockquote><div class="l1"><strong> DV8</strong></div>&laquo;<a name="vdv01" href="/lib/vdv01.html">Compatible, Resident Windows 95 Viruses</a>&raquo; <small>15.18Kb</small> <span class="note">10565 hits</span><br/><blockquote>When I started investigating Windows 95, a shade under a year ago, I decided to make a list of matters I felt were important in any virus running under that pseudo-OS or needed further consideration. The basic list isn't long... Full compatability, Stay in memory after program termination, What about Ring-0/Ring-3 incompatabilities? Insert itself into the '95 boot sequence.</blockquote><div class="l1"><strong> Int13h</strong></div>&laquo;<a name="vin01" href="/lib/vin01.html">Little SYS Infection Tutorial</a>&raquo; <small>10.31Kb</small> <span class="note">11476 hits</span><br/><small> (1998)</small><blockquote>Well, here we will speak a bit about the infection of devices drivers, they are really very easy to infect. When finishing this reading you will be able to add infection of device drivers to your virus, then it will be more c00l :)</blockquote><div class="l1"><strong> IntrusO</strong></div>&laquo;<a name="vnt01" href="/lib/vnt01.html">Upper memory residency</a>&raquo; <small>14.39Kb</small> <span class="note">9350 hits</span><br/><blockquote>Well, i'll try to describe some routines used by some viruses to copy themselves into upper memory... in order to do this, i'll try to describe what's that we call upper memory, type we're interested in, the MCB, etc.</blockquote><div class="l1"><strong> Jerk1N</strong></div>&laquo;<a name="vjn01" href="/lib/vjn01.html">Jerk1N's Tutorial Series</a>&raquo; <small>22.21Kb</small> <span class="note">10125 hits</span><br/><blockquote></blockquote><div class="l1"><strong> Lord Julus</strong></div>&laquo;<a name="vlj01" href="/lib/vlj01.html">A guide to multipartite infectors 1.5</a>&raquo; <small>40.82Kb</small> <span class="note">11217 hits</span><br/><small> (1997)</small><blockquote>So, what is a multipartite virus ? Let's give a brief description: A Multipartite virus is a COM/EXE/BS/MBR infector. Well, for those of you who know something about this, the definition should be good enough. For those of you new in the business it means a virus capable to infect files and also the Boot Sector (or Master Boot) on a Hard Drive and a Floppy Disk.</blockquote><div class="l1"><strong> Methyl</strong></div>&laquo;<a name="vme01" href="/lib/vme01.html">Tunneling Document #4 (Development of Emulation Systems)</a>&raquo; <small>152.48Kb</small> <span class="note">10294 hits</span><br/><blockquote>Recently, emulation systems (aka Generic Decryption in the AV world) have come into the limelight, especially in the AV marketing process under many various names such as 'Viral Instruction Code Emulation' and 'Stryker', and even though their usage by the AV is in a crippled form, this document will take us into the wonderfull world of emulation and its uses by the virogen.</blockquote>&laquo;<a name="vme02" href="/lib/vme02.html">Tunneling via Mini-Tunnelers</a>&raquo; <small>74.74Kb</small> <span class="note">7613 hits</span><br/><blockquote>How about a new code tracing engine thatactually works as well as being smaller than the old one, as WELL as using the new CMT format as WELL as having commented source code that even -YOU- could understand?!?! How about i2a trapping, i20 and CP/M exploitation, and kernel scanning? All those and more await you in this document!</blockquote>&laquo;<a name="vme03" href="/lib/vme03.html">Tunneling with Code Tracing</a>&raquo; <small>71.26Kb</small> <span class="note">7248 hits</span><br/><small><a href="/vx.php?fid=274#f274">Insane Reality Magazine [8]</a> (1996)</small><blockquote>Here's a great tutorial on Tunneling via Emulation by Methyl, one of IRG's newest members. It should be noted that this article deals with the some what complex issue of Code Emulation, not just lame INT 01h single-stepping. For an example of an even more complex Code Emulator, you might want to see Tracer which is also inculuded in IR zine #8.</blockquote>&laquo;<a name="vme04" href="/lib/vme04.html">Tunneling with Single step mode</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>53.79Kb</small> <span class="note">7920 hits</span><br/><small><a href="/vx.php?fid=516#f516">Xine [1]</a> (1996)</small><blockquote>Yes, welcome to my series of documents on tunneling, the only series that will teach you absolutely everything there is to know about tunneling... with easy to understand step by step instructions and complete source codes and example programs for you to look at, because, after all, you're only an amoeba!</blockquote><div class="l1"><strong> RatBoy</strong></div>&laquo;<a name="vrb01" href="/lib/vrb01.html">Overwriting virus tutorial #1</a>&raquo; <small>11.12Kb</small> <span class="note">13495 hits</span><br/><small><a href="/vx.php?fid=75#f75">Chiba City Blues [3]</a> (1995)</small><blockquote>Well here it is my first instructional tutorial. I felt it was nesscary for this file since I could not find any tutorials that taught virus writing from the basic overwriting virus. Well that's how I started and now I want to show you. So that you too can have a long and fruitful life of codeing viruses. :)</blockquote>&laquo;<a name="vrb02" href="/lib/vrb02.html">Overwriting virus tutorial #2</a>&raquo; <small>14.75Kb</small> <span class="note">9368 hits</span><br/><blockquote>Also, we will move on to more complex overwriting .Com viruses.</blockquote><div class="l1"><strong> Rock Steady</strong></div>&laquo;<a name="vrs01" href="/lib/vrs01.html">Construction Kit on infecting .COM</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.04Kb</small> <span class="note">10147 hits</span><br/><small><a href="/vx.php?fid=336#f336">Nuke Info Journal [2]</a> (1992)</small><blockquote>Well I must state my opinion that there are certainly WAY too many overwriting viruses out here. To help put a Stop to this I will try to explain to you a SIMPLE way to infect COM files at the END of the Program.</blockquote>&laquo;<a name="vrs09" href="/lib/vrs09.html">Contruction Kit for TSR Virii</a>&raquo; <small>8.46Kb</small> <span class="note">11067 hits</span><br/><small><a href="/vx.php?fid=336#f336">Nuke Info Journal [2]</a> (1992)</small><blockquote>There are several ways to constructed your viruses. Mainly you have those which are RAM-Resident or better known as a TSR program. And with great thought we have those which are not RAM-Resident.A TSR virus will load into memory and can infect all programs that are executed by the computer. Such like my AmiLiA virus which will infect all EXE and COM files that are ran. Anyhow a TSR virus can certainly spread a lot faster compared to a Non-Resident Virus. Because a NON-Resident Virus will only infect file each time it is ran. Though the NON-Resident will start off very slowly infecting the system files but after the virus is in the system after a number of weeks, it will certainly infect ALL files that are in the system. Where a TSR virus will USUALLY infect files that are executed. So that only files that are often executed will be infected. But The TSR virus can certainly infect A LOT more files than a Non-Resident JUST on the first Hour! It is out numbered 10 to 1. This is the advantage that all programmers enjoy and program TSR viruses. I will explain a SIMPLE method of making your program a TSR one. And it will be as flexible as you want so that NO ONE can stay you `Stole' this information off Rock Steady.</blockquote>&laquo;<a name="vrs03" href="/lib/vrs03.html">Dir Stealth Method 2</a>&raquo; <small>4.48Kb</small> <span class="note">9577 hits</span><br/><small><a href="/vx.php?fid=338#f338">Nuke Info Journal [4]</a> (1992)</small><blockquote>Some May notice that when they use PCTOOLs (aka PCSHELL) or Peter Norton Utilities, or *SOME* File Managing systems like DOS-Shell, the File increase of infected files is know visable. There is no doubt about it, if you only put Method #1 in your virus you will encounter times were the file increase shows. Its not because your Routine isn't good! But due to the fact that there is another way to Read the Dir Listing by DOS. An this method is Call File-find by ASCIIZ format.We just learned how to edit File-Find by FCB. Which is used by MS-DOS PC-DOS and some other programs. But unlike the others, they use the ASCIIZ file-Find method as it is EASIER to open, close, edite, and any other file access routine is ALOT easier with the ASCIIZ or (File Handle) system. So we will make our Virus Stealth to Method #2! Making us 100% Stealth from file-finds...</blockquote>&laquo;<a name="vrs02" href="/lib/vrs02.html">Directory Stealth</a>&raquo; <small>7.86Kb</small> <span class="note">9108 hits</span><br/><small><a href="/vx.php?fid=338#f338">Nuke Info Journal [4]</a> (1992)</small><blockquote>Stealth Viruses are the Viruses that I must admit Anti-Viral Queers Don't tend to like at all. Emagine if we added a polymorphic feature into the Stealth Virus? But, if you want to Continue Writing Viruses you have to make them Stealth. MS-DOS Version 6.0 Now comes with Virus Scanners and CRC &amp; Checksum Checkers. In order to stop many viruses, But it will NEVER stop the `Stealth' Virus that is SMART of those AV features!</blockquote>&laquo;<a name="vrs04" href="/lib/vrs04.html">Disinfecting an Infected File</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>11.05Kb</small> <span class="note">11326 hits</span><br/><small><a href="/vx.php?fid=339#f339">Nuke Info Journal [5]</a> (1993)</small><blockquote>The BEST advantage a virus can have is `Disinfecting of Fly' as we must try to basically hide the virus as well as possible!</blockquote>&laquo;<a name="vrs05" href="/lib/vrs05.html">EXE Infections</a>&raquo; <small>15.48Kb</small> <span class="note">12033 hits</span><br/><small><a href="/vx.php?fid=338#f338">Nuke Info Journal [4]</a> (1992)</small><blockquote>We must admit there are HUGE amount of Lame Viruses out there. Ever wonder why so many people talk about the AIDS virus? Its a fucken over writting virus. Its HUGE in size and its written in PASCAL. Please! Have a little more respect for the virus world. What happened to that old Bulgarian Spirit? That too has died. Bulgaria isn't writting as many top viruses as it used to! Or are we in for a surprise? (USSR Kicks!)Well to help people in advancing their Virus programming ability I will try to explain that basics in Infecting an EXE file. There are several ways to infect an EXE file. And I have tried several types. The best one I have programmed is the one you'll see. In Basic, it will infect EXEs by starting a new segment, only for the virus. This will infect EXEs over the size of 64k, and it is alot less complicated..</blockquote>&laquo;<a name="vrs07" href="/lib/vrs07.html">Infection on Closing</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>17.48Kb</small> <span class="note">9588 hits</span><br/><small><a href="/vx.php?fid=339#f339">Nuke Info Journal [5]</a> (1993)</small><blockquote>[...] This routine goes out for a few people that had trouble hacking this routine themselves... I kinda like it, its my very OWN, no Dark Avenger hack, it is VERY straight forward, and kinda simple [...]</blockquote>&laquo;<a name="vrs08" href="/lib/vrs08.html">Memory Stealth</a>&raquo; <small>3.5Kb</small> <span class="note">9394 hits</span><br/><small><a href="/vx.php?fid=338#f338">Nuke Info Journal [4]</a> (1992)</small><blockquote>The Advantages of having a Memory Resident Virus, are unlimited. When our virus goes `TSR' it REALLY doesn't do ANYTHING. It just stays there, waiting to be called upon. the 80x86 really doesn't MULTITASK, so don't think the virus runs `in the Background' TSRs tend to hook on Interrupts, depending what function they must do. If it must be called upon OFTEN, hook Int 1C, if your must run when an File is Executed/Open/Close Hook Int 21h. And everytime Int 21h is called, Your Virus Runs FIRST, then it calls the original Int 21h.I will try to explain on how cut off a block of Memory, Then we'll allocate memory for the Virus, change the program MCB, and move the virus resident in memory.</blockquote><div class="l1"><strong> Satan's Little Helper</strong></div>&laquo;<a name="vsh01" href="/lib/vsh01.html">Finding INT 21's real address using the PSP</a>&raquo; <small>11.67Kb</small> <span class="note">11263 hits</span><br/><blockquote>The real address of interrupt 21 is useful to almost all viruses it enables viruses to bypass resident monitoring software loaded as device drivers or TSR's. This article will demonstrate a method by which you can obtain the real address of INT 21 by using the entry at offset 6 in the PSP segment.</blockquote><div class="l1"><strong> Sepultura</strong></div>&laquo;<a name="vse00" href="/lib/vse00.html">Post discovery strategies</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>36.14Kb</small> <span class="note">10051 hits</span><br/><small><a href="/vx.php?fid=273#f273">Insane Reality Magazine [7]</a> (1995)</small><blockquote>Most virii these days, take many Pre-Discovery precautions. This simply means that they take precautions to avoid discovery, assuming the virus has not already been discovered. Common examples of Pre-Discovery Stratagies are File Stealth, Sector Stealth, and MCB stealth (i.e any stealth). These mechanisms are used to stop the virus being discovered, but once it has been discovered, and is in the hands of the AV, they're essentially useless. It is only a matter of days (or even hours) until a suitable scan string or algorithm has been determined, for inclusion in to there AV programs.There is how ever, a solution: post discovery strategies. These are mechanisms that instead of serving the purpose of hiding the virus from detection, make the virus harder to analyse, and hence determine a scan string or detection algorithm. To be entirely honest, the previous statement is not completely correct - in order to take advantage of any of these methods your virus can not have a scan string - without atleast polymorphism, Post Discovery Stratagies are useless. This document will be divided in to three main sections: Polymorphis, Anti-Bait Techniques, Anti-Debugger Techniques.</blockquote><div class="l1"><strong> Somniun</strong></div>&laquo;<a name="vsm01" href="/lib/vsm01.html">A different way to make a TSR virus (or how a boot virus can hook dos interrupts)</a>&raquo; <small>21.38Kb</small> <span class="note">11639 hits</span><br/><blockquote>Moreover, most boot virus cannot hook DOS interrupts,because when boot-virus loads aren't present DOS interrupt ,because dos loads after virus. In this example this boot-virus can hook INT 40 (dos int) and in the ended of load of virus, it restore a vector table and vector table looks intact.</blockquote><div class="l1"><strong> Stomach Contents</strong></div>&laquo;<a name="vso01" href="/lib/vso01.html">Let's talk Stealth</a>&raquo; <small>15.86Kb</small> <span class="note">9528 hits</span><br/><blockquote>The concept is so simple, it's really not much to shout about, however, it's potential for dodging AV's is enormous.</blockquote><div class="l1"><strong> Terminator Z</strong></div>&laquo;<a name="vte01" href="/lib/vte01.html">VIRUSES: What they are, What they do, How they are written (The Virus Writer's Handbook: The Complete Guide)</a>&raquo; <small>94.43Kb</small> <span class="note">11920 hits</span><br/><small> (1992)</small><blockquote>This file is aimed at educating the public on the subject of viruses - what they are, how they work, and what techniques a virus author is likely to use. BY NO MEANS IS THIS TEXT FILE AIMED TO BE USED IN THE CREATION OF A VIRUS!</blockquote><div class="l1"><strong> Yosha</strong></div>&laquo;<a name="vyo01" href="/lib/vyo01.html">Making Windows 95 Compatible Viruses</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.53Kb</small> <span class="note">9065 hits</span><br/><blockquote>Because a large number of potential victims use dos software without leaving windows, it is *imperative* that you do what you can to enable your virus to work without causing a disturbance. This article deals with potential compatibility problems and in most cases provides workarounds.</blockquote><div class="l1"><strong> ZeroP</strong></div>&laquo;<a name="vzp01" href="/lib/vzp01.html">The Risk of Debug Codes in Batch: what are debug codes and why they are dangerous?</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.21Kb</small> <span class="note">10314 hits</span><br/><small> (2010)</small><blockquote>This paper shows the risk of „Debug Codes“ in Batch. It's useful for comprehension, if you have some assembler knowledge. Debug.EXE is a small assembler and disassember. In can be found on every version of Windows in c:\windows\command and is a relict of the old DOS times. If you start DEBUG and type „?“, DEBUG lists all its commands.</blockquote> <span class="note">22 authors, 42 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=DO&amp;index=DO">de</a><a href="/lib/index.php?lang=en&amp;index=DO&amp;index=DO">en</a><a href="/lib/index.php?lang=es&amp;index=DO&amp;index=DO">es</a><a href="/lib/index.php?lang=it&amp;index=DO&amp;index=DO">it</a><a href="/lib/index.php?lang=fr&amp;index=DO&amp;index=DO">fr</a><a href="/lib/index.php?lang=pl&amp;index=DO&amp;index=DO">pl</a><a href="/lib/index.php?lang=ru&amp;index=DO&amp;index=DO">ru</a><a href="/lib/index.php?lang=ua&amp;index=DO&amp;index=DO">ua</a></div>
</body>
</html>
