<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Virus technology (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"298e77c227181d107e29c17c59009ff8bceb7550-1498759152-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div><div style="float:right;"><a href="/lib/index.php?tbs=0"><img src="/img/min.gif" alt="Minimize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: left;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="32" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><br clear="both"/></div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=VT">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=VT">Español</a>][<a href="/lib/?lang=it&amp;index=VT">Italiano</a>][<a href="/lib/?lang=fr&amp;index=VT">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=VT">Polski</a>][<a href="/lib/?lang=ru&amp;index=VT">Русский</a>][<a href="/lib/?lang=ua&amp;index=VT">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">Black Wolf &laquo;<a name="vbw06" href="/lib/vbw06.html">Virus in C</a>&raquo; (86859)<br/></span><span class="small">GriYo &laquo;<a name="vgy01" href="/lib/vgy01.html">EPO: Entry-Point Obscuring</a>&raquo; (17769)<br/></span><span class="small">S. King, P. Chen, Y. Wang, C. Verbowski, H. Wang, J. Lorch &laquo;<a name="vsk00" href="/lib/vsk00.html">SubVirt: Implementing malware with virtual machines</a>&raquo; (17034)<br/></span><span class="small">M. Rieback, B. Crispo, A. Tanenbaum &laquo;<a name="aat02" href="/lib/aat02.html">Is Your Cat Infected with a Computer Virus?</a>&raquo; (16050)<br/></span><span class="small">Z0mbie &laquo;<a name="vzo23" href="/lib/vzo23.html">"DELAYED CODE" technology (version 1.1)</a>&raquo; (15593)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Virus technology</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<u>Virus technology</u><br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><em>uknown</em></div>&laquo;<a name="vxx05" href="/lib/vxx05.html">Polymorphic Compilation (just some crazy thoughts)</a>&raquo; <small>6.94Kb</small> <span class="note">9840 hits</span><br/><small><a href="/vx.php?fid=1388#f1388">29a [#8</a> (2004)</small><blockquote>Generally, we speak about "mobile" code (we say just "code"). This means some special look to some snippet of the executable code, when this code is considered as cpu/os/file format - independent; the thing remaining is code itself.</blockquote><div class="l1"><strong> (o)</strong></div>&laquo;<a name="voo00" href="/lib/voo00.html">Noisy Waves: TRNG virus</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.16Kb</small> <span class="note">5541 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>It is uncommon to find viruses which use hardware enhancements. I heard of a virus which uses GPU to decipher its code. At the time I already knew about hh86's work on Intel AES-NI instruction set to assist AES encryption. It is common, however, to associate viruses and microphone devices in espionage. I present here another technique.</blockquote><div class="l1"><strong> Belial, SPTH</strong></div>&laquo;<a name="vsp39" href="/lib/vsp39.html">Crazy ToDo list for VXers</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>12.9Kb</small> <span class="note">6063 hits</span><br/><small><a href="/vx.php?fid=2008#f2008">Valhalla #2</a> (2012)</small><blockquote>We present a set of crazy ideas for VXers which came to our minds in the last couple of months. Even it would require a lot of work, realisation of any of these ideas would have a great impact.</blockquote><div class="l1"><strong> Benny</strong></div>&laquo;<a name="vbe05" href="/lib/vbe05.html">EPO techniques under Win32</a>&raquo; <small>6.4Kb</small> <span class="note">9766 hits</span><br/><small><a href="/vx.php?fid=8#f8">29a [4full]</a> (2000)</small><blockquote>Well, whatsa go? That's the main question. Entrypoint Obscuring techniques, also abrieviated as EPOs, r relatively new but very efficent ways how to make your virus undetectable by existing heuristic scanners. The main idea is: don't modify entrypoint, don't activate virus immediatelly when infected program is executed, dig the "JMP VIRUS" instruction into the center of program. For instance, virus won't be activated when the program will be executed, but when program will call ExitProcess API. Why do we do that? It's very simple. Heuristic scanners can't analyse whole Win32 program (in short words, it's just not possible for existing scanners) and if virus code will be hidden inside the program, heuristic scanners won't be able to reach the virus code and so, virus won't be detected. In my opinion, every modern virus should contain EPO routines. And if the ways of realising EPOs will be random, it would be impossible to clean the virus. Think about it.</blockquote><div class="l1"><strong> Billy Belcebú</strong></div>&laquo;<a name="vbb05" href="/lib/vbb05.html">32 bit optimization</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>13.1Kb</small> <span class="note">6702 hits</span><br/><small><a href="/vx.php?fid=180#f180">DDT [1]</a> (1999)</small><blockquote>Ehrm... Super should do this instead me, anyway, as i'm his pupil, i'm gonna write here what i have learnt in the time while i am inside Win32 coding world. I will guide this tutorial through local optimization rather than structural optimization, because this is up to you and your style (for example, personally i'm *VERY* paranoid about the stack and delta offset calculations, as you could see in my codes, specially in Win95.Garaipena). This article is full of my own ideas and of advices that Super gave to me in Valencian meetings. He's probably the best optimizer in VX world ever. No lie. I won't discuss here how to optimize to the max as he does. No. I only wan't to make you see the most obvious optimizations that could be done when coding for Win32, for example. I won't comment the very obvious optimization tricks, already explained in my Virus Writing Guide for MS-DOS.</blockquote>&laquo;<a name="vbb03" href="/lib/vbb03.html">Harder to detect (theory)</a>&raquo; <small>11.02Kb</small> <span class="note">5628 hits</span><br/><small><a href="/vx.php?fid=180#f180">DDT [1]</a> (1999)</small><blockquote>Make your viruses harder to be detected: that's the objective of this little tute. There're some techinques that are very necessary to implement, such polymorphism and stealth. Without them, we are lost. So we need them as a base weapon for remain undetected. With stealth i mean full stealth, and with polymorphism i'm talking about a good engine.</blockquote><div class="l1"><strong> Black Wolf</strong></div>&laquo;<a name="vbw06" href="/lib/vbw06.html">Virus in C</a>&raquo; <small>10.44Kb</small> <span class="note">86859 hits</span><br/><blockquote>Another possibility with high-level languages, however, is a source-code virus. This kind of virus is quite rare (to the best of my knowledge) but could be very effective.</blockquote><div class="l1"><strong>Mike Bond, George Danezis</strong></div>&laquo;<a name="vmb00" href="/lib/vmb00.html">A Pact with the Devil</a>&raquo; <small>37.99Kb</small> <span class="note">10719 hits</span><br/><small>Proceedings of the 2006 workshop on New security paradigms, pp. 77-82 (2006)</small><blockquote>We study malware propagation strategies which exploit not the incompetence or naivety of users, but instead their own greed, malice and short-sightedness. We demonstrate that interactive propagation strategies, for example bribery and blackmail of computer users, are effective mechanisms for malware to survive and entrench, and present an example employing these techniques. We argue that in terms of propagation, there exists a continuum between legitimate applications and pure malware, rather than a quantised scale.</blockquote><div class="l1"><strong> Changeling</strong></div>&laquo;<a name="vch01" href="/lib/vch01.html">Communicating Viruses</a>&raquo; <small>5.39Kb</small> <span class="note">11589 hits</span><br/><small> (1999)</small><blockquote>Viruses do already communicate. They may f.ex communicate with themself or with a computer. Ex monologue: What's the address of my variable anastasia? Ex dialogue: What's the PID of miriam.dll? What if viruses could communicate with each other? How should they do it? What should they communicate about? The weather?</blockquote><div class="l1"><strong> Dark Angel</strong></div>&laquo;<a name="vda06" href="/lib/vda06.html">Code Optimisation, A Beginner's Guide</a>&raquo; <small>6.19Kb</small> <span class="note">13018 hits</span><br/><small><a href="/vx.php?fid=20#f20">40hex [9]</a> (1992)</small><blockquote>When writing a virus, size is a primary concern. A bloated virus carrying unnecessary baggage will run slower than its optimised counterpart and eat up more disk space.</blockquote><div class="l1"><strong> DiA</strong></div>&laquo;<a name="vdi00" href="/lib/vdi00.html">Capture the desktop - scan .LNK files for victims</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>24.6Kb</small> <span class="note">9739 hits</span><br/><small><a href="/vx.php?fid=1388#f1388">29a [#8</a> (2004)</small><blockquote>Some people have a clean desktop other people have the total choas in the front of them. I speak about "Windows Shortcut Files" aka .LNK files. The shortcuts to applications, documents and other files. Most of the computer noobs use the desktop and the shortcuts very often, why not, the installation programs ask always to create a desktop shortcut. So this is a good way to find victims to infect (eg PE EXE files), if the shortcut file (.lnk) knows where the linked application or document is, we know it too (or must scan the .lnk file to know it).</blockquote>&laquo;<a name="vdi07" href="/lib/vdi07.html">Some stealth idea's</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.75Kb</small> <span class="note">9623 hits</span><br/><small><a href="/vx.php?fid=1413#f1413">Ready Rangers Liberation Front [6]</a> (2005)</small><blockquote>In this article I want to give you some thoughts i had. It's somethin like stealth, but nothin to do like macro stealth or EPO ;). It's about how to hide the own process, how to hide a entry in the registry and how to store files that the user (the dumb one) can't see it. It's all theoretical, I have all source's working here, but I want that you think by yourself ;). It's all possible... So let's go, hide our "bad" program.</blockquote>&laquo;<a name="vdi02" href="/lib/vdi02.html">Using the .NET runtime compiler for file infection</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>13.98Kb</small> <span class="note">8943 hits</span><br/><small><a href="/vx.php?fid=1528#f1528">Electrical Ordered Freedom #1</a> (2006)</small><blockquote>Hello and welcome to my second article on .NET and C#. Again I got bored of programming in C++. So, this is again a sidestep in the easy and simple world of .NET programming. In this tutorial I describe how to infect executables by using the .NET runtime compiler. Also I provide a workin source code with comments and ideas/hints how to make a real virus with this technique.</blockquote><div class="l1"><strong> freeon</strong></div>&laquo;<a name="vfr02" href="/lib/vfr02.html">Crawling - A unique spreading technique</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.29Kb</small> <span class="note">11921 hits</span><br/><small><a href="/vx.php?fid=1549#f1549">DoomRiderz #1</a> (2007)</small><blockquote>This article is the basis for talking about a possibly overlooked effective spreading technique. We often think of spreading our worms/viruses based on what a user will use to communicate with other humans. This usually takes the form of email, IRC or any Instant Message application, p2p, exploit scanning. Now each one of these techinques are usually enough to propagate our worm to another host.</blockquote>&laquo;<a name="vfr01" href="/lib/vfr01.html">Remote Polymorphism and Customized Viruses</a>&raquo; <small>8.17Kb</small> <span class="note">10671 hits</span><br/><small><a href="/vx.php?fid=1549#f1549">DoomRiderz #1</a> (2007)</small><blockquote>This article is a theoretical article more or less that is based on a set of concepts that are polymorphism and communication and combing these two concepts into a more advanced technique. The idea came to me when I was working on a new program, I was trying to understand the global workflow of a program from creation to use.</blockquote><div class="l1"><strong> GriYo</strong></div>&laquo;<a name="vgy01" href="/lib/vgy01.html">EPO: Entry-Point Obscuring</a>&raquo; <small>16.43Kb</small> <span class="note">17769 hits</span><br/><small><a href="/vx.php?fid=8#f8">29a [4full]</a> (2000)</small><blockquote>[...] The virus can overwrite the first instruction (the one pointed by the entry-point field in file header) with a jump or call to itself [...]</blockquote><div class="l1"><strong>Nick Haflinger</strong></div>&laquo;<a name="vnh00" href="/lib/vnh00.html">Virus Spreading - Fast Or Slow?</a>&raquo; <small>3.79Kb</small> <span class="note">8982 hits</span><br/><small><a href="/vx.php?fid=13#f13">40hex [2]</a> (1991)</small><blockquote>One of the questions while writing your virus is how quickly you want it to spread. The easy answer is "As fast as possible" but this is not always the best answer. If a virus moves slowly, it will take much longer before somebody notices hard drive space disappearing, he/she will notice fewer changes to the file dates, and all other symptoms will be lessened. However, this does provide longer for anti-virus people (pronounced Scum, with a capital S) to discover the virus. This issue ties directly into the issue of activation, short or long. Since the issues are virtually identical, I will cover both together, because they are so closely tied.</blockquote><div class="l1"><strong> herm1t</strong></div>&laquo;<a name="vhe09" href="/lib/vhe09.html">Inversing a random numbers</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>7.21Kb</small> <span class="note">14787 hits</span><br/><small><a href="/vx.php?fid=1940#f1940">Virus Writing Bulletin [1]</a> (2011)</small><blockquote>It is desireable feature for a polymorphic virus to avoid linear memory access during decryption. In 2000 The Mental Driller proposed an algorithm, known as PRIDE [1] which could easily produce a large number of permutations. In this paper I would present another technique to randomize the memory access within decryption loop, based on the linear and inversive congruential random numbers generators which properties are well characterized.</blockquote><div class="l1"><strong> hh86</strong></div>&laquo;<a name="vhh01" href="/lib/vhh01.html">BTX encryption</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.02Kb</small> <span class="note">10396 hits</span><br/><small><a href="/vx.php?fid=1940#f1940">Virus Writing Bulletin [1]</a> (2011)</small><blockquote>This instruction test in bit base: the bit specified by offset. Carry flag is set according to test, if bit was 0 then CF = 0 else CF = 1. The bit is then set to 1. This means that we can use BTS to set every bit individually from each virus value. You can use it to set random bit to complete a bit string:</blockquote>&laquo;<a name="vhh10" href="/lib/vhh10.html">Debug Assisted Decoding</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.64Kb</small> <span class="note">5170 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>This is an old project I had. I worked on it one night a year ago but did not work on it any further. Source code was lost. But now I have a new one. This is also a remake of W32/POSEY (Peter Ferrie called it W32/Tussie, see Virus Bulletin, August 2012). I have no idea why they change the name to my code, but I call this one W32/Atlas. It is my first virus to implement debugging techniques.</blockquote>&laquo;<a name="vhh08" href="/lib/vhh08.html">Infect Using CFF Explorer Scripting</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.61Kb</small> <span class="note">6073 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>There is a tool, CFF Explorer, it is my favorite. I saw myself in a dream writing this very same article, with no intro. So, I knew to make my first virus using this tool. I call it W32.CFFE.</blockquote>&laquo;<a name="vhh12" href="/lib/vhh12.html">Infecting PE files with Java Bytecode</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.11Kb</small> <span class="note">6390 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>Java Bytecode is the instruction set from the Java Virtual Machine. We all know that Java is primary language to compile its source code to Java Bytecode. But there are other languages that also produce Java Bytecode (for example, Scala, Clojure, Groovy) and use the Java Virtual Machine.The binary file produced that contains the code that is run by the virtual machine is the Class file. Recently I learned how can you use the virtual machine from native programs (in Java they call "native" those files that belong to a operating system). Since there is no Java virus to infect PE32 executable files, I thought to make a low-level one. ;)</blockquote>&laquo;<a name="vhh09" href="/lib/vhh09.html">Inline JScript For x86 Cryptography</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.25Kb</small> <span class="note">5350 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>I have written a lot of script viruses, and even more machine code viruses. In Valhalla 1, I wrote a JScript that used the .NET Framework to get obfuscated and compiled into an executable file. It was the first time I put JScript in binary file. However this time I present a new and different technique. This is my first W32 virus to have inline JScript code using it for cryptography. I call it W32/Unit00. You get the best of both worlds. ;)</blockquote>&laquo;<a name="vhh11" href="/lib/vhh11.html">Java Class infection from PE32 files</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.25Kb</small> <span class="note">5761 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>This is my second virus to target the Java platform (Java.Sojourner was the first one), and this is my first file infector for Java classes. It is a direct action infector of Class files in current directory. A new method containing the dropper code is inserted in the Class. It uses a new EPO technique. It is the world's first W32 virus to infect Class files.</blockquote>&laquo;<a name="vhh05" href="/lib/vhh05.html">The Masquerader</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>3.85Kb</small> <span class="note">7120 hits</span><br/><small><a href="/vx.php?fid=1943#f1943">Valhalla #1</a> (2011)</small><blockquote>For long time I wanted to use a MMX decryption engine. MMX was introduced by Intel earlier, and it has lots of complex instructions. Then AMD introduced few more instructions for it. Which I forgot in the time. And then some of them went for SSE by Intel little later. However, for this virus I didn't employed any of those complex shuffling, packing, or logic instructions. I only wanted one: MASKMOVQ.The interesting about this instruction is that it moves to memory a 32/64-bit value conditionally. It takes two operands, source which holds value to move. Second operand is mask, the mask specifies which byte of the source must move to memory. If most significant bit of each byte is on (in mask), then byte source is moved to memory (memory pointer is always in EDI/RDI), if off then nothing.</blockquote><div class="l1"><strong> hh86, SPTH</strong></div>&laquo;<a name="vsp40" href="/lib/vsp40.html">The flag of virtual space: Nonstandard Code Recreation</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.79Kb</small> <span class="note">5283 hits</span><br/><small><a href="/vx.php?fid=2008#f2008">Valhalla #2</a> (2012)</small><blockquote>We consider non-standard ways to reconstruct the information of the code.</blockquote><div class="l1"><strong> JPanic</strong></div>&laquo;<a name="vjp00" href="/lib/vjp00.html">Multi-Platform Viruses Made Easy - A Case Study</a>&raquo; <small>9.96Kb</small> <span class="note">8284 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>This article is written to give the reader an insight to different methods and examples of cross-platform viruses, and hopefully an insight on how easy it can be using the 'CAPZLOQ TEKNIQ/Clapzok model' used by the author of this model. I am not saying that the other cross-platform viruses aren't great work, I simply believe this model is the simplest and easiest, thus far.Although there are many cross-platform viruses out there, such as binary/executable infecters, script viruses and macro viruses - this article will focus soley on binary/executable infectors.</blockquote><div class="l1"><strong> Kalkin/EViL</strong></div>&laquo;<a name="vka00" href="/lib/vka00.html">A few ideas for viruses</a>&raquo; <small>9.61Kb</small> <span class="note">10833 hits</span><br/><small><a href="/vx.php?fid=177#f177">Coderz [1]</a> (2000)</small><blockquote>These are difficult times for us, virus writers. No, I don't mean the cops, society or the press. I mean the process of writing a virus. Yes, there are tons of materials about this subject and quite some people who can help, but that's usually by a technical problems. What if you want to do something radically new? It's actually not so easy coz everything has already been done: polymorphic macroviruses, access infection, LINUX-viruses. You can realize some parts of the virus in a never-seen-before way, but these parts are mainly only some solutions to some x technical problems. But you want to do something new and interesting, something like the spying virus from CodeBreakers or the payload of CIH. Maybe this article will help you.</blockquote><div class="l1"><strong>Samuel King, Peter Chen, Yi-Min Wang, Chad Verbowski, Helen Wang, Jacob Lorch</strong></div>&laquo;<a name="vsk00" href="/lib/vsk00.html">SubVirt: Implementing malware with virtual machines</a>&raquo; <small>64.14Kb</small> <span class="note">17034 hits</span><br/><small> (2006)</small><blockquote>Attackers and defenders of computer systems both strive to gain complete control over the system. To maximize their control, both attackers and defenders have migrated to low-level, operating system code. In this paper, we assume the perspective of the attacker, who is trying to run malicious software and avoid detection. By assuming this perspective, we hope to help defenders understand and defend against the threat posed by a new class of rootkits.We evaluate a new type of malicious software that gains qualitatively more control over a system. This new type of malware, which we call a virtual-machine based rootkit (VMBR), installs a virtual-machine monitor underneath an existing operating system and hoists the original operating system into a virtual machine. Virtual-machine based rootkits are hard to detect and remove because their state cannot be accessed by software running in the target system. Further, VMBRs support general-purpose malicious services by allowing such services to run in a separate operating system that is protected from the target system. We evaluate this new threat by implementing two proof-of-concept VMBRs. We use our proof-of-concept VMBRs to subvert Windows XP and Linux target systems, and we implement four example malicious services using the VMBR platform. Last, we use what we learn from our proof-of-concept VMBRs to explore ways to defend against this new threat. We discuss possible ways to detect and prevent VMBRs, and we implement a defense strategy suitable for protecting systems against this threat.</blockquote><div class="l1"><strong>William Mahoney, Craig Pokorny</strong></div>&laquo;<a name="ama01" href="/lib/ama01.html">Do-It-Yourself Guide to Cell Phone Malware</a>&raquo; <small>18.06Kb</small> <span class="note">12573 hits</span><br/><small>IJCSNS International Journal of Computer Science and Network Security, VOL.9 No.1, pp.248-252 (2009)</small><blockquote>The authors present recent research they have conducted to determine the simplicity of constructing malicious code for cell phones. The results are quite surprising, due to the straight-forwardness of the programming interface and the availability of tools. Our paper recounts the results of a simplistic search for off-the-shelf code which can be utilized for the creation of malicious software for cell phones. Our search yielded a self-replicating phone virus which we simulated in a contained environment.</blockquote><div class="l1"><strong> mdew</strong></div>&laquo;<a name="vmd05" href="/lib/vmd05.html">Writing disassembler</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>19.71Kb</small> <span class="note">12550 hits</span><br/><small> (2009)</small><blockquote>Disassembler engine it's some procedure that take some pointer to assembled code (for example it takes it from some exe file from .text (.code) section. Then it disassembles it to some user-friendly structures. Normally assembled instructions have different length and it's hard (or impossible) to manipulate them without disassembling.</blockquote><div class="l1"><strong> mort</strong></div>&laquo;<a name="vmo01" href="/lib/vmo01.html">EPO - entrypoint obscuring</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>10.32Kb</small> <span class="note">6139 hits</span><br/><small><a href="/vx.php?fid=291#f291">Matrix Zine [2]</a> (2000)</small><blockquote>EPO is next of many ways to fuck AVs (at least a litle). The point is, that the entrypoint in PE header will not be overwritten by jump to virus body. This jump must be set somewhere in the 'CODE' section, in the jam of instructions after entrypoint. Problem is, we cant write our jump anywhere we can, coz we could fit in the 'middle' of instruction. Well, the 'we could' expression is not good, better is 'we will probably allways' fit in some instruction. So, we have to find address which wont destroy instruction. There's several ways of EPO now. I'll describe some.</blockquote><div class="l1"><strong> mos6581</strong></div>&laquo;<a name="vmo02" href="/lib/vmo02.html">Emulation: Transposition of Control (From Anti-Virus to Virus)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9Kb</small> <span class="note">5689 hits</span><br/><small><a href="/vx.php?fid=2008#f2008">Valhalla #2</a> (2012)</small><blockquote>In the last few years, sandboxing and emulation have become vital for anti-virus detection mechanisms. By a rather shaky definition, emulation is composed of two different execution environments, one of which has a control over the other. AV emulators generally have two separated CPUs and thread contexts, despite running on only one thread.It is possible to harness the power of emulation for the purpose of securing a virus payload (or body) code. Emulation can also be used to increase the complexity of reverse engineering (especially debugging). An obvious red flag would be common decryption loops: once control is passed to the payload, it becomes easier for the AV to perform analysis on the decrypted image. Hence, it also becomes possible to reduce heuristic analysis through the use of an emulator.win32.evenstar utilizes a prototype x86 pseudo-emulator. The virus body is encrypted instruction by instruction using a basic xor algorithm, although it is certainly possible to install a more sophisticated encryption scheme.</blockquote><div class="l1"><strong>Andreas Moser, Christopher Kruegel, Engin Kirda</strong></div>&laquo;<a name="vam00" href="/lib/vam00.html">Limits of Static Analysis for Malware Detection</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>55.71Kb</small> <span class="note">11534 hits</span><br/><small> (2007)</small><blockquote>Malicious code is an increasingly important problem that threatens the security of computer systems. The traditional line of defense against malware is composed of malware detectors such as virus and spyware scanners. Unfortunately, both researchers and malware authors have demonstrated that these scanners, which use pattern matching to identify malware, can be easily evaded by simple code transformations. To address this shortcoming, more powerful malware detectors have been proposed. These tools rely on semantic signatures and employ static analysis techniques such as model checking and theorem proving to perform detection. While it has been shown that these systems are highly effective in identifying current malware, it is less clear how successful they would be against adversaries that take into account the novel detection mechanisms.The goal of this paper is to explore the limits of static analysis for the detection of malicious code. To this end, we present a binary obfuscation scheme that relies on the idea of opaque constants, which are primitives that allow us to load a constant into a register such that an analysis tool cannot determine its value. Based on opaque constants, we build obfuscation transformations that obscure program control flow, disguise access to local and global variables, and interrupt tracking of values held in processor registers. Using our proposed obfuscation approach, we were able to show that advanced semantics-based malware detectors can be evaded. Moreover, our opaque constant primitive can be applied in a way such that is provably hard to analyze for any static code analyzer. This demonstrates that static analysis techniques alone might no longer be sufficient to identify malware</blockquote><div class="l1"><strong> Navrhar</strong></div>&laquo;<a name="vnh01" href="/lib/vnh01.html">Assembly language or HLL?</a>&raquo; <small>6.93Kb</small> <span class="note">9438 hits</span><br/><small><a href="/vx.php?fid=4#f4">*-zine (Asterix) [2]</a> (1999)</small><blockquote>If we can handle such a complexe target as PE files are we are facing the sad fact we can infect files on the Intel platform but we can never get outside this platform. Rare exception from this axiom is virus Esperanto (by Mr. Sandman published in 29A Nr. 2) which is the first of its kind, capable of speading on various platforms and processors. Glory goes to Mr. Sandman but unfortunately, this approach cannot be used for larger projects. Whole Esperanto's solution is based on presence of two parts - one for intel processors, the other for Macs, practically doubling the size of necessary code. It doesn't seem to be the ideal solution, let's image the 50 kB viral code for three processors and we well land somewhere around 150 kb maxivirus.</blockquote><div class="l1"><strong> pest</strong></div>&laquo;<a name="vpe01" href="/lib/vpe01.html">Polymorphic file virus BEETLE</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>11.33Kb</small> <span class="note">9118 hits</span><br/><small><a href="/vx.php?fid=2013#f2013">Inception #1 (EN)</a> (2013)</small><blockquote>Detailed description of Beetle virus.</blockquote><div class="l1"><strong> R3s1stanc3</strong></div>&laquo;<a name="vrt00" href="/lib/vrt00.html">Infecting JAR-Files using the JavaCompiler Class</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.45Kb</small> <span class="note">6486 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>So I was playing around with the JavaCompiler class [3], trying to write a polymorphic code and I wasn't able to get it running because you need to write the source code in a string and reassemble it every time containing its own code again and every time I got another error while compiling. Maybe I will get it running someday. But that gave me the idea of a new way to infect JAR files.</blockquote><div class="l1"><strong>Melanie Rieback, Bruno Crispo, Andrew Tanenbaum</strong></div>&laquo;<a name="aat02" href="/lib/aat02.html">Is Your Cat Infected with a Computer Virus?</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>45.92Kb</small> <span class="note">16050 hits</span><br/><small>Proc. 4th IEEE Intl. Conf. on Pervasive Computing and Communications. (PerCom 2006), Pisa, Italy, March 2006. (2006)</small><blockquote>RFID systems as a whole are often treated with suspicion, but the input data received from individual RFID tags is implicitly trusted. RFID attacks are currently conceived as properly formatted but fake RFID data; however no one expects an RFID tag to send a SQL injection attack or a buffer overflow. This paper is meant to serve as a warning that data from RFID tags can be used to exploit back-end software systems. RFID middleware writers must therefore build appropriate checks (bounds checking, special character filtering, etc..), to prevent RFID middleware from suf- fering all of the well-known vulnerabilities experienced by the Internet. Furthermore, as a proof of concept, this paper presents the first self-replicating RFID virus. This virus uses RFID tags as a vector to compromise backend RFID middleware systems, via a SQL injection attack.</blockquote><div class="l1"><strong> roy g biv</strong></div>&laquo;<a name="vrg05" href="/lib/vrg05.html">EPOlution: The Evolution of Entry Point Obscuring</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>5.49Kb</small> <span class="note">9968 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2006)</small><blockquote>Entry Point Obscuring techniques have been developing for a long time already, since even the days of DOS and 16-bit Windows. We have seen code tracing using interrupt 1, changing of relocation items, call/jmp replacement, and stack frame replacement.</blockquote>&laquo;<a name="vrg23" href="/lib/vrg23.html">GPGPU using OpenGL</a>&raquo; <small>4.01Kb</small> <span class="note">5407 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>GPGPU stands for General Purpose Graphics Processing Unit. It means to do non-video calculations using the video card hardware. We want to do that because video card hardware runs very fast and operations can be done in the background. It is also super anti-emulation environment.</blockquote>&laquo;<a name="vrg04" href="/lib/vrg04.html">The Hiew Plugin framework</a>&raquo; <small>3.74Kb</small> <span class="note">11065 hits</span><br/><small> (2009)</small><blockquote>Many people know about Hiew. It is great tool for viewing and editing files. It supports arithmetic operations and has an assembler, so it can be used for all kinds of reverse-engineering, unpacking, decrypting, etc. In case that was not enough functionality, it also supports plugins.</blockquote>&laquo;<a name="vrg12" href="/lib/vrg12.html">More Ins and Outs of JunkMail</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9.08Kb</small> <span class="note">8090 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2005)</small><blockquote>Do you remember W32.Junkmail? It was publised in 29A#7/Articles/29A-7.009. It brought to you some new techniques for e-mail speading. Now there is W32.Junkmail.B, which takes those techniques even further.</blockquote>&laquo;<a name="vrg13" href="/lib/vrg13.html">Register Initialising Using Only Arithmetic Instructions</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.42Kb</small> <span class="note">8004 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2006)</small><blockquote>Probably all polymorphic engines use explicit register initialising. It means that anyone can see the start of the decryptor because of these instructions. We can try to hide the decryptor by using lots of fake routines and similar tricks, but we can't completely avoid this problem. Or can we?</blockquote>&laquo;<a name="vrg19" href="/lib/vrg19.html">Virtual Code</a>&raquo; <small>6.29Kb</small> <span class="note">5923 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2007)</small><blockquote>This is an idea that I had after I read about the Locreate in Uninformed #6 journal. There, the author describes about relocation data being used to alter the in-memory image. We have seen this before, where a virus uses relocation data to decrypt itself. The author talks about packer but it is really cryptor. There are some interesting things in the article, but it was not very special for me. So, my idea is to remove all code from a section, and use relocation data to restore it. Since the section is now only in virtual memory, I call it virtual code. It seems that IDA does not support multiple relocations being applied to the same location, so it cannot handle my files. :)</blockquote><div class="l1"><strong> Sepultura</strong></div>&laquo;<a name="vse01" href="/lib/vse01.html">Preserving Infections</a>&raquo; <small>17.25Kb</small> <span class="note">10637 hits</span><br/><small><a href="/vx.php?fid=274#f274">Insane Reality Magazine [8]</a> (1996)</small><blockquote>In IR magazine issue #7 I presented an article named `Post Discovery Stratagies'. This article discussed measures that could be taken to protect your virus from analysis by AV researches, once it had been discovered. i.e. firstly, Pre-Discovery Stratagies (stealth) are used to reduce chances of the virus being discovered. Secondly, once the virus is discovered, Post-Discovery Stratagies (slow-polymorphy, anti-bait code, etc) are used to make it more difficult for the AV to write a program that can detect the virus. This article is the next stage - Now the virus can be detected, how can we stop them getting rid of it?This document will be divided into two sections - one discussing preserving file infections, and one discussing preserving boot infections.</blockquote><div class="l1"><strong> SPTH</strong></div>&laquo;<a name="vsp27" href="/lib/vsp27.html">Code Mutations via Behaviour Analysis</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>21.47Kb</small> <span class="note">9723 hits</span><br/><small><a href="/vx.php?fid=1940#f1940">Virus Writing Bulletin [1]</a> (2011)</small><blockquote>The basic idea is: The file analyses the behaviour of its own code and compares it with the behaviour of a randomly generated code. If the behaviour is the same, the original file-code will be substituted by the new random code.</blockquote>&laquo;<a name="vsp35" href="/lib/vsp35.html">Hashes for Encryption</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9.62Kb</small> <span class="note">9981 hits</span><br/><small><a href="/vx.php?fid=1528#f1528">Electrical Ordered Freedom #1</a> (2007)</small><blockquote>A hash function (or hash algorithm) is a way of creating a small digital "fingerprint" from any kind of data. You can neighter find the original fingerprinted string nor create a new string with the same checksum (without a great effort). Beside of rainbow-lists, bruteforce is the only way to find out what the checksum stands for. Bruteforce uses more time, the longer the fingerprinted data is. If hash functions will be used in viruses for encryption, antivirus programms would have to use a bruteforce attack to find the real virus code. As bruteforce requires much time, and less scanning time is essential for antivirus-programs, hash-encryption might be a useful weapon against antivirus programs.</blockquote>&laquo;<a name="vsp12" href="/lib/vsp12.html">New era of bootsectorviruses #1: FAT12 IMG infection at Disks</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>17.06Kb</small> <span class="note">12416 hits</span><br/><small><a href="/vx.php?fid=1413#f1413">Ready Rangers Liberation Front [6]</a> (2005)</small><blockquote>Bootsector viruses were the first form of computerviruses. They were most widespread from the beginning of computerviruses until December 1995 (according to VirusBulletin). But then, Macroviruses (CAP, ColdApe, ...), Scriptviruses (Kak, LoveLetter, ...) and finally Win32 viruses (Sircam, Klez, Mydoom, Netsky, ...) were even more widespread, and the production of bootsectorviruses decreased to nearly zero. A reason for that could be, that it's damn hard (if not impossible) writing a bootsectorvirus, which stays in memory while the OS (Windows) loads. How did the old bootsector viruses work? When booting from an infected Disk, such a virus first infects the MBR (Master Boot Record) of the HD and the bootsector of the first partition. Then it stays in memory, let the OS load processing, and hooks (most times?) INT 0x21 for checking Disk access. OK, and what the hell will be the different between the old style of bootsector infectors and my once? My idea is to infect the Images of Disks/HDs/CD-ROMs. For that we don't need the INT 0x21, because we use our own File System driver (in this article here FAT12). For writing our own File System driver it's of course nessecary to fully understand how the system works. For my first article about new bootsectorviruses I'm using FAT12, because it's the most easy of all as far as I know. As FAT12 is just used for DISK, the article is just about .IMG file infection. IMG files are 1:1 images of Disks. As you may know, I wanted to infect CD-ROM Bootsectors, but that did not work with Disks, because ISO or NRI files are at least 2MB as far as I know. Anyway, let's start with FAT12 IMG bootsector infectors, next time let's move to CD-ROMs, ok? :D</blockquote>&laquo;<a name="vsp09" href="/lib/vsp09.html">New era of bootsectorviruses #2: El Torito ISO infection at FAT32</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>19.01Kb</small> <span class="note">11494 hits</span><br/><small><a href="/vx.php?fid=1413#f1413">Ready Rangers Liberation Front [6]</a> (2005)</small><blockquote>This second tutorial about bootsectorviruses is about a very unusual topic: CD-ROM bootsector infection. How could we infect a bootsector of a CD-ROM? Via infecting bootable Images. The bootable CD-ROM images are called El Torito ISO-9660. This standart is very common, and used in many programs like Ahead Nero Burning ROM. El Torito ISOs are spread via the internet zB via Emule (Knoppix, Windows Installation CD-ROM, ...). Before reading this tutorial, it would be of some value to read the first article about this topic as I will not repeat too much. Well, let's start!</blockquote><div class="l1"><strong> Star0</strong></div>&laquo;<a name="vst00" href="/lib/vst00.html">C to assembly, language point of view</a>&raquo; <small>6.13Kb</small> <span class="note">11452 hits</span><br/><small><a href="/vx.php?fid=520#f520">Xine [5]</a> </small><blockquote>Many of you think c is useless for viruswriter. Many poeple wich start vxing handle better c language than assembly one. But the true reason where C is locked for virus is the dependency of the compiler, wich block some special manipulation. But the use of a C compiler is not totally senseless. If the optimization is not perfect, it can build a code very proach and similar to the assembly one, if you follow some rules. Of course, you will loose a few size, but you will gain by stability, portability, and finally by coding much fastly your nice littles routines, that you may customize once in assembly.</blockquote><div class="l1"><strong> The Mental Driller</strong></div>&laquo;<a name="vmd02" href="/lib/vmd02.html">Formulas for Random Number Generators</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>13.24Kb</small> <span class="note">13524 hits</span><br/><small><a href="/vx.php?fid=292#f292">Matrix Zine [3]</a> (2001)</small><blockquote>When a polymorphic engine is done, we need a function to generate random numbers, but not always all the number generation routines are well done, because sometimes the results fall in a value loop that always return a value very near to the last one, or a numeric sequence easily predictable, which can make that our polymorphic engine generates not very polymorphic code.</blockquote>&laquo;<a name="vmd04" href="/lib/vmd04.html">Several things to learn more (knowledge and code snippets)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>10.51Kb</small> <span class="note">10786 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Guess what! Microsoft has bugs in the Kernel!! (oh, really????). Have you ever wonder why your polymorphic engine works fine and your virus not sometimes and what it's failing is the call to GetModuleHandle()? Well, one of the reasons can be the #@&amp;$! bug that I realized to be even in Win2k: the direction flag (usually set to 1 with STD or cleared with CLD). Be sure that when you call to GetModuleHandle the flag is clear! This care must be special if we are coding polymorphic viruses (since it's a standard garbage instruction). What I wonder is WHY the programmers at Micro$oft relied at this fact when using LODS?/CMPS?/etc. (block instructions). Just test it: call GetModuleHandle passing "kernel32.dll" but first make STD. Exception for sure! And not an exception in our code, but in the kernel!</blockquote><div class="l1"><strong> Tiberio Degano</strong></div>&laquo;<a name="vtd00" href="/lib/vtd00.html">Easy To Infect Hard to Detect</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>24.82Kb</small> <span class="note">12971 hits</span><br/><small><a href="/vx.php?fid=1904#f1904">Decepticons #1</a> (2009)</small><blockquote>This article taking about EPO. Many VXers don't care so much with EPO even (as I think) it's the most strong idea in the world of virus writing. The benefit of EPO that it doesn't have an One-Click-detect technique to detect it. The polymorphic engines become an easy thing for all emulators and also metamorphic. The truth that you should know that polymorphic engines now become useless against emulators.</blockquote><div class="l1"><strong> VicodinES</strong></div>&laquo;<a name="vve01" href="/lib/vve01.html">Theory Of Better File Virus Distribution (a study in new ideas?)</a>&raquo; <small>10.79Kb</small> <span class="note">10067 hits</span><br/><blockquote></blockquote><div class="l1"><strong>Jeffrey Walton</strong></div>&laquo;<a name="mjw00" href="/lib/mjw00.html">Protection Schemes Based on Virus Survival Techniques</a>&raquo; <small>88.04Kb</small> <span class="note">12901 hits</span><br/><small>codeproject.com (2007)</small><blockquote>This article will examine the evolution of virus code as documented by Peter Szor in his book The Art Of Computer Virus Research And Defense [3], and apply what is learned in the context of Protection Schemes. Certain areas of virus research such as Basic Self-Protection Strategies (Chapter 6) and Advanced Code Evolution Techniques and Computer Virus Generator Kits (Chapter 7) provide a windfall of techniques. Other areas such as Malicious Code Environments (Chapter 3) provide additional methods; while areas such as Classification of Infection Strategies (Chapter 4) offers insight into data hiding. In addition, the article will address some of the issues presented by the x86 architecture and Operating System.</blockquote><div class="l1"><strong> WarGame</strong></div>&laquo;<a name="vwg01" href="/lib/vwg01.html">Using Skype for VX</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>3.04Kb</small> <span class="note">12710 hits</span><br/><small><a href="/vx.php?fid=1549#f1549">DoomRiderz #1</a> (2007)</small><blockquote>Skype is a very popular VoIP client, you can talk with all the world with few money and in every moment ( you need only a PC + skype ). This tutorial will explain you how to use the classical IM component of this program. The challenge is to create a full working VoIP worm :)</blockquote>&laquo;<a name="vwg03" href="/lib/vwg03.html">VirtualBox's Virtual Disks Infection</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>23.4Kb</small> <span class="note">11678 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2008)</small><blockquote>The usage of virtualization technology is increasing more and more nowadays, mainly because of it's safe test environment and ability to run another system without the use of multi-boot. In this article we are going to speak about VirtualBox (http://www.virtualbox.org) virtual disks infection. Let's go!</blockquote><div class="l1"><strong> Z0mbie</strong></div>&laquo;<a name="vzo23" href="/lib/vzo23.html">"DELAYED CODE" technology (version 1.1)</a>&raquo; <small>11.28Kb</small> <span class="note">15593 hits</span><br/><small><a href="/vx.php?fid=459#f459">Top Device Online [10]</a> (2000)</small><blockquote>Let we wrote a virus. Avers will create antiviral code to detect it, and after some time period all infected computers will be cured. This article describes another technology of prolonging this time period.</blockquote>&laquo;<a name="vzo69" href="/lib/vzo69.html">About undetectable viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>6.2Kb</small> <span class="note">5137 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Lets consider time of detecting a virus in some executable file.First, time depends on a set of possible variants of virus body. The more possible variants there are in the virus body, the more time needed to iterate them while checking files.This way is the simplest one, and it was choosen by viruses, when they morphed into crypt-, polymorphic-, permutating- and metamorphic- ones.</blockquote>&laquo;<a name="vzo00" href="/lib/vzo00.html">Code transformation and finite automatons</a>&raquo; <small>22.32Kb</small> <span class="note">12296 hits</span><br/><blockquote></blockquote>&laquo;<a name="vzo16" href="/lib/vzo16.html">Disassemblers within viruses</a>&raquo; <small>14.61Kb</small> <span class="note">11926 hits</span><br/><small> (2001)</small><blockquote>One of such things is disassembler. It can be used everywhere, and wherever it used, especially in viruses, it gives good effect - mostly all good infection- and morphing- related technologies are based on disassembling.Code analysis and parsing it into single instructions can be done by means of sequential calls to length disassembler. Such disassembler is used in permutation and code integration.</blockquote>&laquo;<a name="vzo70" href="/lib/vzo70.html">Infecting ISO CD images</a>&raquo; <small>10.24Kb</small> <span class="note">6970 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Era of the computer virus began from information exchange via diskettes. After some time the most part of this exchange has moved into networking. A bit later cd-roms became widely spreaded. There even appeared cd-related scenes, and today cd burning technology is available mostly to all. And now its time to our move.</blockquote>&laquo;<a name="vzo15" href="/lib/vzo15.html">Opcode Frequency Statistics</a>&raquo; <small>8.82Kb</small> <span class="note">12540 hits</span><br/><blockquote>Here are the results of the program, which calculates frequences of the PE EXE/DLL opcode usage (x86 32-bit code).</blockquote>&laquo;<a name="vzo06" href="/lib/vzo06.html">Permutation conditions</a>&raquo; <small>10.11Kb</small> <span class="note">11654 hits</span><br/><blockquote>Here i'm trying to define conditions, when it is possible to change order of some consecutive x86 instructions and instruction blocks, i.e. swap them, but keep program working the same.</blockquote>&laquo;<a name="vzo05" href="/lib/vzo05.html">Pervert world wide</a>&raquo; <small>2.64Kb</small> <span class="note">11571 hits</span><br/><small><a href="/vx.php?fid=1388#f1388">29a [#8</a> (2004)</small><blockquote>Almost all trojans and viruses are detected using simple signatures. Which means that simple crc is calculated on the entire file, or on some parts of the code being checked. Using simple length disassembler and some simple rules, it is possible to analyze an arbitrary executable file and change some instructions in it, so that it will run the same as before, but file's checksum will be changed.</blockquote>&laquo;<a name="vzo43" href="/lib/vzo43.html">Polymorphic Games</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.91Kb</small> <span class="note">12636 hits</span><br/><small> (2005)</small><blockquote></blockquote>&laquo;<a name="vzo09" href="/lib/vzo09.html">Solving Plain Strings Problem In HLL</a>&raquo; <small>13.43Kb</small> <span class="note">11737 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>It has been already told to you, that all hll creatures contains substrings such as *.vbs, RCPT TO:&lt;%s&gt;, sometimes even wsock32.dll and many others. Old rotten idea is that all code of that kind can be detected as a virus or trojan, and it will remain detectable until you listen to my truth.</blockquote>&laquo;<a name="vzo17" href="/lib/vzo17.html">Virus engines: common recomendations (3rd edition)</a>&raquo; <small>14.38Kb</small> <span class="note">12427 hits</span><br/><blockquote>Virus engines are very similar to C/C++ classes (objects), and has many identical properties. These both substances are directed to modularity. The only difference is that C++ class has larger interface part while virus engine is oriented to implementation.Today virus engines are on the same step as programs was many years ago, when OOP was only introduced. And now is time to change.This text was written with a single goal: to denote characterictics of virus engine, which will make it handy and useful.</blockquote><div class="l1"><strong> zert</strong></div>&laquo;<a name="vze00" href="/lib/vze00.html">Join us now and share the malware...</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>49.75Kb</small> <span class="note">11526 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>In this article we'll talk about the possibilities of infection of source code files, the precedents that have been in this subject and the future developments that could happen.The text will be enclosed with examples in C, as "proofs of concept" of the explained details. Besides, virus development techniques for source code through other ways will be presented, from a less practical point of view and showing the main steps for its programming.</blockquote> <span class="note">38 authors, 69 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=VT&amp;index=VT">de</a><a href="/lib/index.php?lang=en&amp;index=VT&amp;index=VT">en</a><a href="/lib/index.php?lang=es&amp;index=VT&amp;index=VT">es</a><a href="/lib/index.php?lang=it&amp;index=VT&amp;index=VT">it</a><a href="/lib/index.php?lang=fr&amp;index=VT&amp;index=VT">fr</a><a href="/lib/index.php?lang=pl&amp;index=VT&amp;index=VT">pl</a><a href="/lib/index.php?lang=ru&amp;index=VT&amp;index=VT">ru</a><a href="/lib/index.php?lang=ua&amp;index=VT&amp;index=VT">ua</a></div>
</body>
</html>
