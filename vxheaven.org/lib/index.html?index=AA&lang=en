<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Anti anti-viruses, anti-debugging (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"403cab25b702766d7f2ead0fd3914d4bef54da59-1498754881-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/lib/index.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=AA">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=AA">Español</a>][<a href="/lib/?lang=it&amp;index=AA">Italiano</a>][<a href="/lib/?lang=fr&amp;index=AA">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=AA">Polski</a>][<a href="/lib/?lang=ru&amp;index=AA">Русский</a>][<a href="/lib/?lang=ua&amp;index=AA">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">S. Cesare &laquo;<a name="vsc04" href="/lib/vsc04.html">Linux anti-debugging techniques (fooling the debugger)</a>&raquo; (32765)<br/></span><span class="small">Black Jack &laquo;<a name="vbj01" href="/lib/vbj01.html">Anti heuristic techniques</a>&raquo; (18638)<br/></span><span class="small">Lord Julus &laquo;<a name="vlj03" href="/lib/vlj03.html">Anti-Debugger &amp; Anti-Emulator Lair</a>&raquo; (17758)<br/></span><span class="small">Lord Julus &laquo;<a name="vlj05" href="/lib/vlj05.html">Anti-debugging in Win32</a>&raquo; (16658)<br/></span><span class="small">Z0mbie &laquo;<a name="vzo11" href="/lib/vzo11.html">VMware has you</a>&raquo; (13780)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Anti anti-viruses, anti-debugging</h1><div class="lc">@<u>Anti anti-viruses, anti-debugging</u><br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><em>uknown</em></div>&laquo;<a name="vrh02" href="/lib/vrh02.html">Full Thunderbyte Stealth...</a>&raquo; <small>13.26Kb</small> <span class="note">11761 hits</span><br/><blockquote>What we are trying to do here is to enumerate all the possible Thunderbyte flags, so that you can be certain that your virus will not trigger an alarm under any specific circumstances. This text is essentially the same as the one in the previous issue, only now it's more complete.</blockquote>&laquo;<a name="vxx02" href="/lib/vxx02.html">A new, completely transparent method of deactivating/reactivating VSAFE</a>&raquo; <small>2.26Kb</small> <span class="note">10294 hits</span><br/><blockquote>After just a few minutes of analysis several months ago, I discovered a way to bypass VSAFE which is far less detectable than the usual deinstallation. The total removal of VSAFE by a virus would arouse suspicion and would be incredibly obvious if some other TSR had been installed after VSAFE, since VSAFE displays an alert box in such a case warning that VSAFE cannot be removed.</blockquote><div class="l1"><strong> Automag</strong></div>&laquo;<a name="vam01" href="/lib/vam01.html">A brand new way to fool TBScan</a>&raquo; <small>1.67Kb</small> <span class="note">11493 hits</span><br/><small><a href="/vx.php?fid=485#f485">Vlad [3]</a> (1995)</small><blockquote>Today I worked on some features for Antipode: I wanted it to infect a file during a scan by AV software so I added the usual int 21h 3Dh (open) infection. It already infected the files under McAfee's SCAN so I added the 21h 6Ch (extended open) infection and F-PROT became a vector but I was surprised that TBSCAN didn't infect my test files (5 byte .COM just 3 NOPs and an int 20h). I took SoftICE and traced some code and was really surprised as TBSCAN didn't open any file in my directory!</blockquote><div class="l1"><strong> Black Jack</strong></div>&laquo;<a name="vbj01" href="/lib/vbj01.html">Anti heuristic techniques</a>&raquo; <small>16.88Kb</small> <span class="note">18638 hits</span><br/><blockquote></blockquote><div class="l1"><strong> Blade Runner</strong></div>&laquo;<a name="vbr01" href="/lib/vbr01.html">Chilling Fridrik</a>&raquo; <small>2.65Kb</small> <span class="note">10375 hits</span><br/><small><a href="/vx.php?fid=5#f5">29a [1]</a> (1996)</small><blockquote>Ok, F-Prot, unlike TbScan, uses int 21h for opening, reading, and so on, that is, for scanning files for any infection.</blockquote><div class="l1"><strong>Silvio Cesare</strong></div>&laquo;<a name="vsc04" href="/lib/vsc04.html">Linux anti-debugging techniques (fooling the debugger)</a>&raquo; <small>5.55Kb</small> <span class="note">32765 hits</span><br/><small> (1999)</small><blockquote>This article describes anti debugger techniques for x86/Linux (though some of these techniques are not x86 specific). That is techniques to either fool, stop, or modify the process of debugging the target program. This can be useful to the development of viruses and also to those implementing software protection.</blockquote><div class="l1"><strong> Dark Angel</strong></div>&laquo;<a name="vda13" href="/lib/vda13.html">Scan-strings, how they work and how to avoid them</a>&raquo; <small>7.01Kb</small> <span class="note">12534 hits</span><br/><small><a href="/vx.php?fid=17#f17">40hex [6]</a> (1992)</small><blockquote>The virus author must find encryption techniques which can successfully evade easy detection. This article will show you several such techniques.</blockquote><div class="l1"><strong> Darkman</strong></div>&laquo;<a name="vdr01" href="/lib/vdr01.html">TBMEM FLAWS</a>&raquo; <small>8.35Kb</small> <span class="note">10714 hits</span><br/><small><a href="/vx.php?fid=486#f486">Vlad [4]</a> (1995)</small><blockquote>This document is another example of how to make a program resident in memory without the memory resident of ThunderBYTE Anti-Virus: TbMem detects it. This document also covers which interrupts are hooked by TbMem and which interrupts are monitored by TbMem. All examples in this document will hook interrupt 21h.</blockquote><div class="l1"><strong> Ghost</strong></div>&laquo;<a name="vgh01" href="/lib/vgh01.html">Anti-TBClean code</a>&raquo; <small>3.87Kb</small> <span class="note">10838 hits</span><br/><blockquote></blockquote><div class="l1"><strong> izee</strong></div>&laquo;<a name="viz02" href="/lib/viz02.html">New anti-debugging possibilities</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9.77Kb</small> <span class="note">13746 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2008)</small><blockquote>Nowadays there are plenty anti-debugging tricks, some of them are known, some not. However, all publicly known tricks are Win32-specific and Win64 is still untouched currently. In the first part of article i'm going to demonstrate few new tricks, which are coded for Win64, but can be easily ported to Win32. In the second part i'll show how to implement SEH and TLS on Win64 and also some other new Win64-specific anti-debug techniques.</blockquote><div class="l1"><strong> Kohntark</strong></div>&laquo;<a name="vkh01" href="/lib/vkh01.html">A guide to Anti-Heuristics / Shmistics Technology</a>&raquo; <small>25.3Kb</small> <span class="note">13156 hits</span><br/><blockquote></blockquote><div class="l1"><strong> Lord Julus</strong></div>&laquo;<a name="vlj03" href="/lib/vlj03.html">Anti-Debugger &amp; Anti-Emulator Lair</a>&raquo; <small>63.54Kb</small> <span class="note">17758 hits</span><br/><small><a href="/vx.php?fid=509#f509">VX-tasy [articles]</a> (1998)</small><blockquote>Due to the fact that I was very anxious to release this, and the fact that while writing it my computer got burned, and that, anyway I was sick and tired of looking at it anymore, I released it in a, let's say for now Version 1.0. As soon as I'll feel again ready to write, I shall come with more ideas and stuff. For now just read this and don't kick me if you find any mistakes I didn't have time to correct... Anyway, during the writing of this I kinda felt a little more on the encryption side, which actually is the basis of a good fight with an AV. You got an unbeatable encryption, you rule! So, don't be frightened by the math involved here: everything is explained. Secondly, also while writing this article I got involved in Win32 programing. This made me leave the mortal's world for a while ;-) and go in higher circles. So, just read along...</blockquote>&laquo;<a name="vlj05" href="/lib/vlj05.html">Anti-debugging in Win32</a>&raquo; <small>12.49Kb</small> <span class="note">16658 hits</span><br/><small> (1999)</small><blockquote>I am almost ashamed to open this subject here, but it has to be done. I am ashamed not actually about writing it, but I am ashamed of the anti-virus companies' shame. Because it *IS* a shame not to have after such a long time something which you could call a real Win32 emulator. And don't jump on me because it is true... Each and every win32 virus I wrote and you see in this issue was not discovered at first sight by any AV. After a little work on them, some smart AVs like AVP and DrWeb started to discover them... It was only a matter of adding more laywers of encryption and all was hidden completely. However, even if the fond of the article doesn't really exist (there is *NO* av that would act like good old TBAV in Dos), we must start talking about this, because there is not so long until the AVers will start taking this seriously and programm some real code emulators.</blockquote><div class="l1"><strong> M0SA</strong></div>&laquo;<a name="vmo03" href="/lib/vmo03.html">Dynamic Analysis .. What is it and how to defeat it?!</a>&raquo; <small>9.23Kb</small> <span class="note">5985 hits</span><br/><small><a href="/vx.php?fid=2008#f2008">Valhalla #2</a> (2012)</small><blockquote>Dynamic analysis is an important issue today as the number of malware is increasing every year. For example, in the year 2008 Symantec got more than 4000 new unknown sample per day! and MacAfee got about 12,300 per day!. This emphasized the need for automated tools that can scan the submitted samples and try detecting malicious software among them.In this article I’ll try to discuss some of the most frequently used techniques of dynamic analysis with emphasis on how to overcome them.</blockquote>&laquo;<a name="vmo00" href="/lib/vmo00.html">Malware Statistical analysis and countermeasures</a>&raquo; <small>8.95Kb</small> <span class="note">8882 hits</span><br/><small><a href="/vx.php?fid=1943#f1943">Valhalla #1</a> (2011)</small><blockquote>Metamorphism is becoming complex and harder to detect, so algorithmic approaches for detection is in turn becoming more complex and more infeasible for PCs due to restriction in execution time and memory. The new trend in metamorphic code detection is the statistical analysis. In this article I will give a quick overview on statistical analysis and then explain a new approach appeared in late 2010 called Eigenviruses, and finally, how AVers could beat those techniques.</blockquote>&laquo;<a name="vmo04" href="/lib/vmo04.html">SYP.01: Bypassing Online Dynamic Analysis Systems</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9.09Kb</small> <span class="note">6053 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>SYP (Simple Yet Powerful) is a series that introduces in each episode a very simple technique to achieve a powerful impact goal. In this article, I'll discuss bypassing online dynamic analysis systems.</blockquote><div class="l1"><strong> MidNyte</strong></div>&laquo;<a name="vmn09" href="/lib/vmn09.html">Retro the easy way</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>3.97Kb</small> <span class="note">9669 hits</span><br/><small><a href="/vx.php?fid=177#f177">Coderz [1]</a> (2000)</small><blockquote>[...] For instance, a certain virus will detect if a certain on-access scanner is in memory, and will issue the correct call to shut it down if it is [...]</blockquote><div class="l1"><strong> MnemoniX</strong></div>&laquo;<a name="vmx01" href="/lib/vmx01.html">ANTI-Anti-Virus Tricks Version 1.00</a>&raquo; <small>17.93Kb</small> <span class="note">13470 hits</span><br/><small> (1996)</small><blockquote>Improved antivirus programs got you down? Don't worry - with the help of this file you can create a virus that will surpass the protection of most computers out there, computers whose hapless users are convinced are truly 'protected'.</blockquote><div class="l1"><strong> Mouth of Sauron</strong></div>&laquo;<a name="vms01" href="/lib/vms01.html">Further virus strategies</a>&raquo; <small>27.89Kb</small> <span class="note">10571 hits</span><br/><blockquote></blockquote><div class="l1"><strong> Nomenumbra</strong></div>&laquo;<a name="vno01" href="/lib/vno01.html">Ars loricatus novus or A small introduction to retro-armoring</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>16.65Kb</small> <span class="note">10163 hits</span><br/><small><a href="/vx.php?fid=1512#f1512">Ready Rangers Liberation Front [7]</a> (2006)</small><blockquote>There are many ways of hiding and protecting your virus from AV analysis, ranging from metamorphism to casual anti-debugging to aggressive attacks on AV products (process termination). With time however, anything can be reversed. But this doesn't mean we can't delay them critically. By using a thick armor of anti-debugging, aggressive and passive anti-AV tricks and general stealth, we can delay analysis. Combine this with a quickly morphing virus, this would mean the virus changes it's appereance and (if it's a virus that would re-write itself on source level) it's armor. This paper will show you some techniques that can be used to Armor your virus.</blockquote><div class="l1"><strong> pr0mix</strong></div>&laquo;<a name="vpr03" href="/lib/vpr03.html">About AV-Checker</a>&raquo; <small>18.83Kb</small> <span class="note">7688 hits</span><br/><small><a href="/vx.php?fid=2013#f2013">Inception #1 (EN)</a> (2013)</small><blockquote>The topic of AV-checkers has been raised on numerous occasions: there are concepts, raw and ready realizations, thoughts and other bullshit. That's why I decided to dump here everything related to the checker's working scheme. I did however add something new and left the unnecessary parts out.An Av-checker is an online-service, checking files/data for viruses/trojans/worms/etc with the help of (prepared in advance) different Anti-Virus (AV) scanners. For starters, we will need a powerful multi-core dedicated server (the more cores, frequency, cache - the better), with a big RAM and supporting hardware virtualization for hypervisor). In addition, we will need wide network channels and unlimited traffic (specific technical characteristics are not provided because it all depends on what you want and can get). A "simple" PC with installed Virtual Machine (VM) could do, but it would directly influence the working speed of AV-checker. After all, the good performance depends directly on the equipment's capacity and its configuration.</blockquote><div class="l1"><strong> Rhincewind</strong></div>&laquo;<a name="vrh01" href="/lib/vrh01.html">Thunderbyte Residency Test</a>&raquo; <small>2.31Kb</small> <span class="note">9579 hits</span><br/><small><a href="/vx.php?fid=485#f485">Vlad [3]</a> (1995)</small><blockquote>As you may or may not know, the Thunderbyte resident av utilities hook themselves to the device driver chain using the following device names: TBDRVXXX, TBFILXXX, TBDSKXXX, TBMEMXXX, TBCHKXXX and TBLOGXXX. Now, by doing trial handle opens you can detect if those devices do or do not exist et voila, you have a method for testing residency. TBAV itself scans the actual device driver chain for the TB???XXX devices which is unlike this method, pretty much impossible to confuse, but also undocumented and thus it's not guaranteed to work under future versions of DOS! Yes, Frans Veldman calls vile and unsafe functions in his battle against replicating codefragments.</blockquote><div class="l1"><strong> Tiberio Degano</strong></div>&laquo;<a name="vtd02" href="/lib/vtd02.html">Anti Virus Detection Strategies and how to overcome them</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>20.76Kb</small> <span class="note">12300 hits</span><br/><small><a href="/vx.php?fid=1904#f1904">Decepticons #1</a> (2009)</small><blockquote>This article will talk about Avers in depth. How they think and what ideas they will use and the most important thing is how to overcome these defenses and put your brain in the straightway.</blockquote><div class="l1"><strong> WarGame</strong></div>&laquo;<a name="vwg05" href="/lib/vwg05.html">A simple way to detect VirtualBox</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>2.17Kb</small> <span class="note">11612 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2008)</small><blockquote>There are a lot of ways to detect virtualized env, here I will show only a simple trick to detect if you are running inside VirtualBox. This trick requires that guest additions (a component that let you exchange files between a virtualized system and the real one) are installed on the virtualized system because the detection is based on it. If you want to go deeper in VM detection look at http://www.invisiblethings.org/papers/redpill.html ! Now go to the real stuff</blockquote><div class="l1"><strong> Z0mbie</strong></div>&laquo;<a name="vzo11" href="/lib/vzo11.html">VMware has you</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>1.79Kb</small> <span class="note">13780 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>When avers catch your virus, they analyze it. In case of complex networking creature, they must learn how it spreads. How it infects computers via network. How it infects files. There exists some programs to emulate virtual OS'es on the single machine. This is the best solution when you need to study some virus without risk to fuckup your own system. So, there appears a question: how to find out if our virus is running under virtual OS.</blockquote> <span class="note">20 authors, 25 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=AA&amp;index=AA">de</a><a href="/lib/index.php?lang=en&amp;index=AA&amp;index=AA">en</a><a href="/lib/index.php?lang=es&amp;index=AA&amp;index=AA">es</a><a href="/lib/index.php?lang=it&amp;index=AA&amp;index=AA">it</a><a href="/lib/index.php?lang=fr&amp;index=AA&amp;index=AA">fr</a><a href="/lib/index.php?lang=pl&amp;index=AA&amp;index=AA">pl</a><a href="/lib/index.php?lang=ru&amp;index=AA&amp;index=AA">ru</a><a href="/lib/index.php?lang=ua&amp;index=AA&amp;index=AA">ua</a></div>
</body>
</html>
