<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Theory, models and definitions (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"1e94beee773afb6e4d1d2df3bdb214f7215a425c-1498754896-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/lib/index.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=TH">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=TH">Español</a>][<a href="/lib/?lang=it&amp;index=TH">Italiano</a>][<a href="/lib/?lang=fr&amp;index=TH">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=TH">Polski</a>][<a href="/lib/?lang=ru&amp;index=TH">Русский</a>][<a href="/lib/?lang=ua&amp;index=TH">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (42329)<br/></span><span class="small">L. Adleman &laquo;<a name="ala01" href="/lib/ala01.html">An Abstract Theory of Computer Viruses</a>&raquo; (25329)<br/></span><span class="small">M. Webster, G. Malcolm &laquo;<a name="amw01" href="/lib/amw01.html">Classification of Computer Viruses Using the Theory of Affordances</a>&raquo; (21414)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (20166)<br/></span><span class="small">F. Cohen &laquo;<a name="afc11" href="/lib/afc11.html">A Formal Definition of Computer Worms and Some Related Results</a>&raquo; (18928)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Theory, models and definitions</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<u>Theory, models and definitions</u><br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><strong>Leonard Adleman</strong></div>&laquo;<a name="ala01" href="/lib/ala01.html">An Abstract Theory of Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>40.82Kb</small> <span class="note">25329 hits</span><br/><small>Advances in Cryptology - CRYPT0 '88, LNCS 403, pp. 354-374, 1990 (1990)</small><blockquote>In recent years the detection of computer viruses has become common place. It appears that for the most part these viruses have been 'benign' or only mildly destructive. However, whether or not computer viruses have the potential t o cause major and prolonged disruptions of computing environments is an open question. Such basic questions as: How hard is it to detect programs infected by computer viruses? Can infected programs be 'disinfected'? What forms of protection exist? How destructive can computer viruses be? have been at most partially addressed [Col][Co2]'.Indeed a generally accepted definition of computer virus has yet to emerge. For these reasons, a rigorous study of computer viruses seems appropriate.</blockquote><div class="l1"><strong>Jan Bergstra, Alban Ponse</strong></div>&laquo;<a name="mjb00" href="/lib/mjb00.html">A Bypass of Cohen's Impossibility Result</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>38.2Kb</small> <span class="note">14133 hits</span><br/><small>Advances in Grid Computing - EGC 2005, LNCS 3470, pages 1097-1106. Springer-Verlag, 2005 (2005)</small><blockquote>Detecting illegal resource access in the setting of network communication or grid computing is similar to the problem of virus detection as put forward by Fred Cohen in 1984. We disucuss Cohen's impossibility result on virus detection, and introduce "risk assessment of security hazards", a notion that is decidable for a large class of program behaviors.</blockquote><div class="l1"><strong>Guillaume Bonfante, Matthieu Kaczmarek, Jean-Yves Marion</strong></div>&laquo;<a name="agb00" href="/lib/agb00.html">Toward an abstract computer virology</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>42.82Kb</small> <span class="note">13076 hits</span><br/><small>Lecture Notes in Computer Science, volume 3722, pp.579-593. Springer, Oct 2005. (2005)</small><blockquote>We are concerned with theoretical aspects of computer viruses. For this, we suggest a new definition of viruses which is clearly based on the iteration theorem and above all on Kleene's recursion theorem. We show that we capture in a natural way previous definitions, and in particular the one of Adleman. We establish generic constructions in order to construct viruses, and we illustrate them by various examples. We discuss about the relationship between information theory and virus and we propose a defense against some kind of viral propagation. Lastly, we show that virus detection is &prod;02-complete. However, since we are able to deal with system vulnerability, we exhibit another defense based on controlling system access.</blockquote><div class="l1"><strong>David Chess, Steve White</strong></div>&laquo;<a name="adc06" href="/lib/adc06.html">An Undetectable Computer Virus</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>19.54Kb</small> <span class="note">15387 hits</span><br/><small>Virus Bulletin Conference (2000)</small><blockquote>One of the few solid theoretical results in the study of computer viruses is Cohen's 1987 demonstration that there is no algorithm that can perfectly detect all possible viruses [1]. This brief paper adds to the bad news, by pointing out that there are computer viruses which no algorithm can detect, even under a somewhat more liberal definition of detection. We also comment on the senses of "detect" used in these results, and note that the immediate impact of these results on computer virus detection in the real world is small.</blockquote><div class="l1"><strong>Fred Cohen</strong></div>&laquo;<a name="afc10" href="/lib/afc10.html">Computational Aspects of Computer Viruses</a>&raquo; <span class="note">13586 hits</span><br/><small>Computers &amp; Security, Volume 8, Issue 4 (June 1989), pp.325-344 (1989)</small><blockquote>This paper formally defines a class of sets of transitive integrity-corrupting mechanisms called "viral sets" and explores some of their computational properties.</blockquote>&laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; <small>62.59Kb</small> <span class="note">42329 hits</span><br/><small>Computers &amp; Security 6 (1987), pp. 22-35 (1984)</small><blockquote>[...] This paper defines a major computer security problem called a virus. The virus is interesting because of its ability to attach itself to other programs and cause them to become viruses as well. [...]</blockquote>&laquo;<a name="afc15" href="/lib/afc15.html">A Cost Analysis of Typical Computer Viruses and Defenses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>41.79Kb</small> <span class="note">8274 hits</span><br/><small>Computers & Security, Volume 10, Issue 3, pp.239-250 (1991)</small><blockquote>Various properties of computer viruses have been studied at length by many authors [1], but one of the areas where research results are relatively rare is evaluation of the costs of defenses. In this paper, we explore the costs of computer virus defenses in typical computing environments.</blockquote>&laquo;<a name="afc11" href="/lib/afc11.html">A Formal Definition of Computer Worms and Some Related Results</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>41.84Kb</small> <span class="note">18928 hits</span><br/><small>Computers &amp; Security, 7(11) (1992), pp.641-652 (1992)</small><blockquote>In this paper, we propose a formal definition of "computer worms" and discuss some of their properties. We begin by reviewing the formal definition of "computer viruses", and their properties. We then define "computer worms" as a subclass of viruses, and show that many of the interesting ptoperties derived for viruses hold for worms. Finally, we summarize results, draw conclusions, and propose further work.</blockquote>&laquo;<a name="afc07" href="/lib/afc07.html">Models of Practical Defenses Against Computer Viruses</a>&raquo; <small>39.65Kb</small> <span class="note">16521 hits</span><br/><small>Computers and Security, Volume 8, Issue 2, pp.149-160 (1989)</small><blockquote>In this paper, we model complexity based virus detection mechanisms which detect modifications and thereby prevent computer viruses from causing secondary infections. We use these models to show how to protect information in both trusted and untrusted computing bases, show the optimality of these mechanisms, and discuss some of their features. The models indicate that we can cover changes at all levels of interpretation with a unified mechanism for describing interdependencies of information in a system, and we discuss the ramifications of this unification in some depth.</blockquote>&laquo;<a name="afc09" href="/lib/afc09.html">Reply to `Comment on "A Framework for Modelling Trojans and Computer Virus Infection"' by E. M&auml;kinen</a>&raquo; <small>7.13Kb</small> <span class="note">11001 hits</span><br/><small>THE COMPUTER JOURNAL, Vol. 44, No. 4, 2001, pp. 326-327 (2001)</small><blockquote>There may be some relatively interesting things to do in developing Turing machine models of operating systems. The original Turing machine model of operating systems used to model viruses (Cohen [1]) does this to a limited extent and can also be used as a model of networks, but it fails to capture the full richness of modern operating systems in detail. The advantage of this is generality, but the disadvantage is the inability to specifically model the detailed events in current operating systems.</blockquote>&laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>558.44Kb</small> <span class="note">20166 hits</span><br/><small>ASP Press (1990)</small><blockquote>It is rare in the computer world to find someone both technically and verbally adept. It is even rarer to find yourself laughing out loud when reading a computer text. Fred Cohen is not only a pioneer in the field of virus research, but also a superb storyteller. Cohen provides an engaging account of viruses, his early experiments, and his struggle to convince security experts that viruses are a real threat. In one of his most memorable anecdotes, Cohen describes a visit to a security trade show where - to the dismay of the experts - he swiftly demonstrates how even the lowest level employee has the ability to breach the system's defenses. As an expert in the field, he is often given credit for coining the term "computer virus." In fact, his famous 1984 paper brought about the first real interest in viruses from both researchers - and unfortunately - virus creators. A Short Course on Computer Viruses is largely theoretical in nature, and while Cohen does not discuss the commercial anti-virus packages, he does explain how they work and what their limitations are.</blockquote><div class="l1"><strong>Elise de Doncker</strong></div>&laquo;<a name="aed00" href="/lib/aed00.html">Self-Replicating Turing Machines and Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>17.25Kb</small> <span class="note">14155 hits</span><br/><small>Artificial Life X. Workshop Proceedings on Machine Self-Replication, pp. 129-132. (2006)</small><blockquote>This paper reviews self-replication in the context of (partial) recursive functions and Turing computability. By the Church-Turing thesis, these are equivalent to other models of computation. The theory is linked to applications in the area of computer viruses. We address the views of various authors with respect to the (in)adequacy of Turing machine equivalent models for computer viruses.</blockquote><div class="l1"><strong>William Dowling</strong></div>&laquo;<a name="awd00" href="/lib/awd00.html">There Are No Safe Virus Tests</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>4.49Kb</small> <span class="note">10786 hits</span><br/><small>American Mathematical Monthly, v.96 n.9, p.835-836, Nov. 1989. (1989)</small><blockquote>This note gives a proof that no program can both test its input for the presence of a virus and simultaneously be guaranteed not to spread a virus itself.</blockquote><div class="l1"><strong>Eric Filiol</strong></div>&laquo;<a name="aef04" href="/lib/aef04.html">Metamorphism, Formal Grammars and Undecidable Code Mutation</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>37.47Kb</small> <span class="note">17263 hits</span><br/><small>International Journal of Computer Science, vol. 2, number 1, 2007, pp. 70-75 (2007)</small><blockquote>This paper presents a formalisation of the different existing code mutation techniques (polymorphism and metamorphism) by means of formal grammars. While very few theoretical results are known about the detection complexity of viral mutation techniques, we exhaustively address this critical issue by considering the Chomsky classification of formal grammars. This enables us to determine which family of code mutation techniques are likely to be detected or on the contrary are bound to remain undetected. As an illustration we then present, on a formal basis, a proof-of-concept metamorphic mutation engine denoted PB MOT, whose detection has been proven to be undecidable.</blockquote><div class="l1"><strong>Eric Filiol, Marko Helenius, Stefano Zanero</strong></div>&laquo;<a name="aef03" href="/lib/aef03.html">Open problems in computer virology</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>67.91Kb</small> <span class="note">17167 hits</span><br/><small><a href="/vx.php?fid=1951#f1951">Journal In Computer Virology vol. 1, no 2</a> (2006)</small><blockquote>In this article, we briefly review some of the most important open problems in computer virology, in three different areas: theoretical computer virology, virus propagation modeling and antiviral techniques. For each area, we briefly describe the open problems, we review the state of the art, and propose promising research directions.</blockquote><div class="l1"><strong>Stephanie Forrest, Justin Balthrop, M. Newman</strong></div>&laquo;<a name="afo03" href="/lib/afo03.html">Email networks and the spread of computer viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>23.73Kb</small> <span class="note">6167 hits</span><br/><small>Phys. Rev. E 66, 3 (2002)</small><blockquote>Many computer viruses spread via electronic mail, making use of computer users’ email address books as a source for email addresses of new victims. These address books form a directed social network of connections between individuals over which the virus spreads. Here we investigate empirically the structure of this network using data drawn from a large computer installation and discuss the implications of this structure for the understanding and prevention of computer virus epidemics.</blockquote><div class="l1"><strong>Winfried Gleissner</strong></div>&laquo;<a name="mwg02" href="/lib/mwg02.html">A Mathematical Theory for the Spread of Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>22.69Kb</small> <span class="note">17765 hits</span><br/><small>Computers & Security, 8, 1989, pp.35-41 (1989)</small><blockquote>A model is introduced to treat the spread of computer viruses mathematically. A recurrence formula is given which allows a closed expression to be derived for the probability that, starting from an initial state, a given viral state will be reached after executing exactly k programs. In some special cases this recurrence formula can be used for numeric computations, It is shown that the infection process does not stop before all programs are infected, which are visible for any infected program in the initial state.</blockquote><div class="l1"><strong>Howard Israel</strong></div>&laquo;<a name="ahi00" href="/lib/ahi00.html">Computer Viruses: Myth or Reality?</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>20.83Kb</small> <span class="note">8742 hits</span><br/><small>National Computer Security Conference Proceedings (10th): Computer Security - From Principles to Practices, 21-24 September 1987, pp.226-230 (1987)</small><blockquote>This paper will show that a computer virus [COHEN] may be no more a threat to computer systems than a Trojan Horse and any protection mechanism that will work against a a Trojan Horse will also work against against computer virus, specifically a mandatory policy (e.g. [BELL/LAP] [BIBA]) In addition, it will discuss two possible protection mechanissms that address the Trojan Horse threat.</blockquote><div class="l1"><strong>Mark Joseph, Algirdas Avižienis</strong></div>&laquo;<a name="amj00" href="/lib/amj00.html">A fault tolerance approach to computer viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>30.36Kb</small> <span class="note">10919 hits</span><br/><small>Proceedings of 1988 IEEE Symposium on Security and Privacy, pp. 52-58 (1988)</small><blockquote>The applicability of fault tolerance techruques to computer security problems is currently being investigated at the UCLA Dependable Computing and Fault-Tolerant Systems Laboratory. A recent result of this research is that extensions of Program Flow Monitors and N-Version Programming can be combined to provide a solution to the detection and containment of computer viruses. The consequence is that a computer can tolerate both deliberate faults and random physical faults by means of one common mechanism. Specifically, the technique described here detects control flow errors due to physical faults as well as the presence of viruses.</blockquote><div class="l1"><strong>Kimmo Kauranen, Erkki Makinen</strong></div>&laquo;<a name="aem00" href="/lib/aem00.html">A note on Cohen's formal model for computer viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>8.41Kb</small> <span class="note">11969 hits</span><br/><small>ACM SIGSAC Review, Volume 8, Issue 2, (Summer 1990), pp.40-43 (1990)</small><blockquote>This note discusses the formal model for computer viruses presented by Fred Cohen. We propose some refinements for the model. Especially, we define a computer virus to be a description of a Turing machine capable of writing a description of another Turing machine to the tape of a universal Turing machine.</blockquote><div class="l1"><strong>Arun Lakhotia, Prabhat Singh</strong></div>&laquo;<a name="aal00" href="/lib/aal00.html">Challenges in getting 'formal' with viruses</a>&raquo; <small>24.03Kb</small> <span class="note">13603 hits</span><br/><small>Virus Bulletin, September 2003 (2003) 15-19 (2003)</small><blockquote>Is it a virus, a worm, a Trojan, or a backdoor? Answering this question correctly for any arbitrary program is known to be an undecidable problem. That is, it is impossible to write a computer program that will identify correctly whether an arbitrary program is a virus, a worm, etc. - no matter how much computing power is thrown at the problem.</blockquote><div class="l1"><strong>Ferenc Leitold</strong></div>&laquo;<a name="afl01" href="/lib/afl01.html">Mathematical Model of Computer Viruses</a>&raquo; <span class="note">10141 hits</span><br/><small>EICAR 2000 Best Paper Proceedings (2000)</small><blockquote>In real computers the operating system organizes the connection between the unique programs. In most operating systems a program can modify other program and/or data files. There are some special programs which utilize this facility of the operating system, for example the computer viruses. For the analysis of programs which modify other programs it is necessary to define a new computation model. The new mathematical model - called Random Access Stored Program Machine with Attached Background Storage (RASPM with ABS) - is introduced in this paper. The other required tool is a suitable model for the operating system. This new model is also introduced using mathematical methods.</blockquote>&laquo;<a name="afl00" href="/lib/afl00.html">Reductions of the general virus detection problem</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>16.78Kb</small> <span class="note">12897 hits</span><br/><small>In U. E. Gattiker (Ed.), Conference Proceedings EICAR International Conference, pp. 24-30 (2001)</small><blockquote>Theoretically it is impossible to generate a program which can solve the general virus detection problem. This theorem has been proved in different ways in the literature. Since the general virus detection problem is not solvable, we have to reduce the problem: we can deal "only" with a subset of viruses. For example, we can limit the storage space of viruses or we can limit the execution time of viruses. Theoretically in these cases it can be proved that there is an algorithm for the virus detection problem. On the other hand, we can reduce the general virus detection problem if we deal with the known viruses only. In this paper, I would like to examine the virus detection problem, the possible reductions of the virus detection problem and, of course, I would like to highlight the usability of the virus detection algorithms in the practice too.</blockquote><div class="l1"><strong>Erkki Makinen</strong></div>&laquo;<a name="aem01" href="/lib/aem01.html">Comment on 'A Framework for Modelling Trojans and Computer Virus Infection'</a>&raquo; <small>11.84Kb</small> <span class="note">12818 hits</span><br/><small>THE COMPUTER JOURNAL, Vol. 44, No. 4, 2001, pp.321-323 (2001)</small><blockquote>We (re-)introduce a Turing machine model for computer viruses. Despite the recent criticism of Turing machine models, they enjoy important advantages: their well-known notation and rich theory make them easy to understand and to elaborate. For many natural problems concerning computer viruses, e.g. for various decidability problems, Turing machine models provide a suitable platform of research.</blockquote><div class="l1"><strong>Diomidis Spinellis</strong></div>&laquo;<a name="ads03" href="/lib/ads03.html">Reliable Identification of Bounded-length Viruses is NP-complete</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>26.22Kb</small> <span class="note">13188 hits</span><br/><small>IEEE Transactions on Information Theory, 49(1), pp. 280-284, January 2003. (2003)</small><blockquote>A virus is a program that replicates itself by copying its code into other files. A common virus protection mechanism involves scanning files to detect code patterns of known viruses. We prove that the problem of reliably identifying a bounded-length mutating virus is NP-complete by showing that a virus detector for a certain virus strain can be used to solve the satisfiability problem. The implication of this result is that virus identification methods will be facing increasing strain as virus mutation and hosting strategies mature, and that different protection methods should be developed and employed.</blockquote><div class="l1"><strong> SPTH</strong></div>&laquo;<a name="vsp24" href="/lib/vsp24.html">Chomsky Hierarchy and the Word Problem in Code Mutation</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>18.67Kb</small> <span class="note">12300 hits</span><br/><small> (2008)</small><blockquote>In this article you will first read shourtly about the formal grammar and word problem including the reason why this is important for virus authors. (Chapter 2)</blockquote><div class="l1"><strong>Franz Steinparz</strong></div>&laquo;<a name="mfs00" href="/lib/mfs00.html">A comment on Cohen's theorem about undecidability of viral detection</a>&raquo; <small>4.58Kb</small> <span class="note">11347 hits</span><br/><small><a href="/vx.php?fid=1059#f1059">Alive Vol I, Issue 0</a> (1991)</small><blockquote>This paper shows that Cohen's Theorem, stating the undecidability of viral detection does not hold. It is shown that each algorithm discerning a virus from other program by examining its code must be a virus itself.</blockquote><div class="l1"><strong>Suzana Stojakovic-Celustka</strong></div>&laquo;<a name="msc00" href="/lib/msc00.html">In the trap of the language</a>&raquo; <small>18.3Kb</small> <span class="note">10689 hits</span><br/><small><a href="/vx.php?fid=1060#f1060">Alive Vol I, Issue 1</a> (1994)</small><blockquote>There is a problem which bothered me since the results of Contest for the Best Virus Definition were published. It seemed that plain language was not suitable to define computer virus properly. Well, the problem of good definition of whatever is not anything new.</blockquote>&laquo;<a name="ass01" href="/lib/ass01.html">The results of the Contest for the Best Virus Definition in technical categories</a>&raquo; <small>8.55Kb</small> <span class="note">6279 hits</span><br/><small><a href="/vx.php?fid=1059#f1059">Alive Vol I, Issue 0</a> (1994)</small><blockquote>The results of the contest for the best definition in two categories 1. Technical definition in plain language, 2. Mathematical technical definition</blockquote><div class="l1"><strong>Harold Thimbleby, Stuart Anderson, Paul Cairns</strong></div>&laquo;<a name="aht01" href="/lib/aht01.html">A framework for modelling trojans and computer virus infection</a>&raquo; <small>93.57Kb</small> <span class="note">13782 hits</span><br/><small>Computer Journal, 41(7), pp444-458, 1999. (1999)</small><blockquote>It is not possible to view a computer operating in the real world, including the possibility of Trojan Horse programs and computer viruses, as simply a finite realisation of a Turing Machine. We consider the actions of Trojan Horses and viruses in real computer systems and suggest a minimal framework for an adequate formal understanding of the phenomena. Some conventional approaches, including biological metaphors, are shown to be inadequate; some suggestions are made towards constructing virally-resistant systems.</blockquote>&laquo;<a name="aht02" href="/lib/aht02.html">Reply to `Comment on "A Framework for Modelling Trojans and Computer Virus Infection"' by E. M&auml;kinen</a>&raquo; <small>11.41Kb</small> <span class="note">11077 hits</span><br/><small>THE COMPUTER JOURNAL, Vol. 44, No. 4, 2001, pp.324-325 (2001)</small><blockquote>Computer viruses are a worrying real-world problem, and a challenge to theoretical modelling. In this issue of the Computer Journal, Erkki M&auml;kinen proposes universal Turing machines in a critique of an earlier paper, `A framework for modelling Trojans and computer virus infection' (Thimbleby, H., Anderson, S. O. and Cairns, P. (1998) Comp. J., 41, 444-458). This short paper is a reply by those authors.</blockquote><div class="l1"><strong>Matt Webster</strong></div>&laquo;<a name="amw00" href="/lib/amw00.html">Algebraic Specification of Computer Viruses and Their Environments</a>&raquo; <small>44.86Kb</small> <span class="note">13375 hits</span><br/><small>Selected Papers from the First Conference on Algebra and Coalgebra in Computer Science Young Researchers Workshop ({CALCO}-jnr 2005). University of Wales Swansea Computer Science Report Series {CSR} 18-2005}, pp.99-113 (2005)</small><blockquote>This paper introduces an approach to formal specification of computer viruses and their environments through the development of algebraic specifications using Gurevich's Abstract State Machines (ASMs) and Goguen's OBJ. Distributed ASMs are used to develop a model of an abstract computer virus, which through a process of refinement is converted into models of different virus types. Further refinement has resulted in an executable specification, written in the Abstract State Machine Language, AsmL. The models strengthen the thesis that any algorithm can be modelled at a natural abstraction level using an Abstract State Machine. The ASM models combined with the AsmL executable specification provide a complementary theoretical and experimental framework for proofs and experiments on computer viruses and their environments, as well as a useful means of classification of different computer viruses types. Next we look at a different approach to computer virus analysis using OBJ, which is used to specify computer viruses written in an ad hoc programming language, SPL. The OBJ specification is shown to be useful for the detection of a virus type that is particularly difficult to detect - the metamorphic computer virus (MCV). Finally, the usefulness of the two specifications for reasoning about computer viruses is discussed and in this regard the two formalisms are compared.</blockquote><div class="l1"><strong>Matt Webster, Grant Malcolm</strong></div>&laquo;<a name="amw01" href="/lib/amw01.html">Classification of Computer Viruses Using the Theory of Affordances</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>71.11Kb</small> <span class="note">21414 hits</span><br/><small> (2007)</small><blockquote>We present a novel classification of computer viruses based on a formalised notion of reproductive models that use Gibson's theory of affordances. A computer virus reproduction model consists of a labelled transition system to represent the states and actions involved in that virus's reproduction; a notion of entities that are active in the reproductive process, and are present in certain states; a sequence of actions corresponding to the means of reproduction of the virus; and a formalisation of the affordances that apply. Informally, an affordance is an action that one entity allows another to perform. For example, an operating system might afford a computer virus the ability to read data from the disk. We show how computer viruses can be classified according to whether any of their reproductive actions are afforded by other entities, or not. We show how we can further sub-classify based on whether abstract reproductive actions such as the self-description, reproductive mechanism or payload are afforded by other entities. We give examples of three computer virus reproduction models constructed by hand, and discuss how this method could be adapted for automated classification, and how this might be used to increase the efficiency of detection of computer viruses. To demonstrate this we give two examples of automated classification and show how the classifications can be tailored for different types of anti-virus software. Finally, we compare our approach with similar work, and give directions for future research.</blockquote><div class="l1"><strong>Sung Yang</strong></div>&laquo;<a name="asy03" href="/lib/asy03.html">Movement of Viruses</a>&raquo; <small>5.76Kb</small> <span class="note">9855 hits</span><br/><small> (1999)</small><blockquote>Computer virus (computer organism) movement may be one of the most important phenomena of computer viruses, but there was almost no study and no interest on this issue. So this subject is very much unknown, and especially about the self-movement.</blockquote><div class="l1"><strong>Zhihong Zuo, Mingtian Zhou</strong></div>&laquo;<a name="mzz00" href="/lib/mzz00.html">Some Further Theoretical Results about Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>41.79Kb</small> <span class="note">13784 hits</span><br/><small>The Computer Journal, Vol. 47, No. 6 (2004)</small><blockquote>In this paper we give some general definitions of computer viruses which comply with our common understanding of computer viruses. Based on these definitions, we prove theoretically that there may exist some special kinds of computer viruses that have not been found in the real world yet. Furthermore, we prove that the set of computer viruses with the same kernel is &prod;2-complete. In general the set of computer viruses is &Sigma;3-complete.</blockquote><div class="l1"><strong>Zhihong Zuo, Mingtian Zhou, Qing-xin Zhu</strong></div>&laquo;<a name="mzz01" href="/lib/mzz01.html">On the Time Complexity of Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>40.53Kb</small> <span class="note">14238 hits</span><br/><small>IEEE Transactions on Information Theory, Vol. 51, No. 8 (2005)</small><blockquote>Computer viruses can disable computer systems not only by destroying data or modifying a system's configuration, but also by consuming most of the computing resources such as CPU time and storage. The latter effects are related to the computational complexity of computer viruses. In this correspondence, we investigate some issues concerning the time complexity of computer viruses, and prove some known experimental results mathematically. We prove that there exist computer viruses with arbitrarily long running time, not only in the infecting procedure but in the executing procedure. Moreover, we prove that there are computer viruses with arbitrarily large time complexity in the detecting procedure, and there are undecidable computer viruses that have no "minimal" detecting procedure.</blockquote> <span class="note">27 authors, 36 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=TH&amp;index=TH">de</a><a href="/lib/index.php?lang=en&amp;index=TH&amp;index=TH">en</a><a href="/lib/index.php?lang=es&amp;index=TH&amp;index=TH">es</a><a href="/lib/index.php?lang=it&amp;index=TH&amp;index=TH">it</a><a href="/lib/index.php?lang=fr&amp;index=TH&amp;index=TH">fr</a><a href="/lib/index.php?lang=pl&amp;index=TH&amp;index=TH">pl</a><a href="/lib/index.php?lang=ru&amp;index=TH&amp;index=TH">ru</a><a href="/lib/index.php?lang=ua&amp;index=TH&amp;index=TH">ua</a></div>
</body>
</html>
