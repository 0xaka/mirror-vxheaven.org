<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library Metamorphism (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"7bde5622c7de490daddd6bfaabc0f09f3f664b8e-1498759073-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div><div style="float:right;"><a href="/lib/index.php?tbs=0"><img src="/img/min.gif" alt="Minimize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: left;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="32" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><br clear="both"/></div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=ME">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=ME">Español</a>][<a href="/lib/?lang=it&amp;index=ME">Italiano</a>][<a href="/lib/?lang=fr&amp;index=ME">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=ME">Polski</a>][<a href="/lib/?lang=ru&amp;index=ME">Русский</a>][<a href="/lib/?lang=ua&amp;index=ME">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">The Mental Driller &laquo;<a name="vmd01" href="/lib/vmd01.html">Metamorphism in practice or "How I made MetaPHOR and what I've learnt"</a>&raquo; (39293)<br/></span><span class="small">Z0mbie &laquo;<a name="vzo21" href="/lib/vzo21.html">Automated reverse engineering: Mistfall engine</a>&raquo; (23292)<br/></span><span class="small">P. Beaucamps &laquo;<a name="apb01" href="/lib/apb01.html">Advanced Metamorphic Techniques in Computer Viruses</a>&raquo; (18177)<br/></span><span class="small">P. Ferrie, P. Ször &laquo;<a name="apf39" href="/lib/apf39.html">Hunting for metamorphic</a>&raquo; (17061)<br/></span><span class="small">A. Walenstein, R. Mathur, M. Chouchane, A. Lakhotia &laquo;<a name="aal02" href="/lib/aal02.html">The Design Space of Metamorphic Malware</a>&raquo; (15105)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: Metamorphism</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<u>Metamorphism</u><br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<a href="/lib/?index=UN&lang=en">UNIX and clones specific</a> (32)<br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><strong>Philippe Beaucamps</strong></div>&laquo;<a name="apb01" href="/lib/apb01.html">Advanced Metamorphic Techniques in Computer Viruses</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>65.42Kb</small> <span class="note">18177 hits</span><br/><small>International Conference on Computer, Electrical, and Systems Science, and Engineering - CESSE'07 (2008)</small><blockquote>Nowadays viruses use polymorphic techniques to mutate their code on each replication, thus evading detection by antiviruses. However detection by emulation can defeat simple polymorphism: thus metamorphic techniques are used which thoroughly change the viral code, even after decryption. We brieﬂy detail this evolution of virus protection techniques against detection and then study the METAPHOR virus, today’s most advanced metamorphic virus.</blockquote><div class="l1"><strong>Peter Ferrie, Péter Ször</strong></div>&laquo;<a name="apf39" href="/lib/apf39.html">Hunting for metamorphic</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>54.54Kb</small> <span class="note">17061 hits</span><br/><small>Virus Bulletin, Sep 2001, pp. 123-143 (2001)</small><blockquote>As virus writers developed numerous polymorphic engines, virus scanners became stronger in their defense against them. A virus scanner which used a code emulator to detect viruses looked like it was on steroids compared to those without an emulator-based scanning engine.Nowadays, most polymorphic viruses are considered boring. Even though they can be extremely hard to detect, most of today's products are able to deal with them relatively easily. These are the scanners that survived the DOS polymorphic days. For some of the scanners DOS polymorphic viruses meant the `end of days'. Other scanners died with the macro virus problem. For most products the next challenge to take is 32-bit metamorphosis.Metamorphic viruses are nothing new. We have seen them in DOS days, though some of them, like ACG, already used 32-bit instructions. The next step is 32-bit metamorphosis under Windows environments. Virus writers already took the first step in that direction.In this paper the authors will examine metamorphic engines to provide a better general understanding of the problem that we are facing. The authors also provide detection examples of some of the metamorphic viruses.</blockquote><div class="l1"><strong> herm1t</strong></div>&laquo;<a name="vhe11" href="/lib/vhe11.html">Recompiling the metamorphism</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>17.85Kb</small> <span class="note">8189 hits</span><br/><small><a href="/vx.php?fid=2008#f2008">Valhalla #2</a> (2012)</small><blockquote>I am sure that using the advantages of high-level languages and compiler's theory would fulfill the potential hidden in metamorphism.</blockquote><div class="l1"><strong>Myles Jordan</strong></div>&laquo;<a name="ajm02" href="/lib/ajm02.html">Dealing with Metamorphism</a>&raquo; <small>11.72Kb</small> <span class="note">14036 hits</span><br/><small>Virus Bulletin, 1 Oct 2002 (2002)</small><blockquote>When the virus writer known as z0mbie released Win95.Zmist.A in early 2001, much of the attention paid to this virus by the AV community was directed at its remarkable ability to intersperse its own code with that of its infection target. However, this virus also embodied the continuation of z0mbie's work on viral evolution towards metamorphism - a form of camouflage being developed by virus writers that is so potent and radically different from common encryption that AV scanners will soon need powerful new tools to confront this threat. This article will discuss one possible method that AV scanners could use to deal with metamorphism.</blockquote><div class="l1"><strong>Arun Lakhotia, Moinuddin Mohammed</strong></div>&laquo;<a name="aal01" href="/lib/aal01.html">Imposing Order on Program Statements to Assist Anti-Virus Scanners</a>&raquo; <small>42.22Kb</small> <span class="note">13731 hits</span><br/><small>In Proceedings of Eleventh Working Conference on Reverse Engineering, Delft, The Netherlands, November 2004, pp. 161-170. (2004)</small><blockquote>A metamorphic virus applies semantics preserving transformations on itself to create a different variant before propagation. Metamorphic computer viruses thwart current anti-virus technologies that use signatures - a fixed sequence of bytes from a sample of a virus - since two variants of a metamorphic virus may not share the same signature. A method to impose an order on the statements and components of expressions of a program is presented. The method, called a "zeroing transformation," reduces the number of possible variants of a program created by reordering statement, reshaping expression, and renaming variable. On a collection of C program used for evaluation, the zeroing transformation reduced the space of program variants due to statement reordering from 10^183 to 10^20. Further reduction can be expected by undoing other transformations. Anti-virus technologies may be improved by extracting signatures from zero form of a virus, and not the original version.</blockquote><div class="l1"><strong> Lord Julus</strong></div>&laquo;<a name="vlj00" href="/lib/vlj00.html">Metamorphism</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>27.25Kb</small> <span class="note">11533 hits</span><br/><small><a href="/vx.php?fid=10#f10">29a [5]</a> (2000)</small><blockquote>This time the object of my study is metamorphism. I think this is the next step after polymorphism, a step that will reach coding up at a new level: the highest peak of self mutating, the biggest step toward perfect stealth, the best highway to the assembly heaven... If there exists something like that... Personally I think there's only a programmer's hell, because I'm sure that Windows is not allowed in Heaven...</blockquote><div class="l1"><strong> MidNyte</strong></div>&laquo;<a name="vmn03" href="/lib/vmn03.html">The Complete Re-write Engine</a>&raquo; <small>13.48Kb</small> <span class="note">11868 hits</span><br/><small><a href="/vx.php?fid=225#f225">Final Chaos [1]</a> (1999)</small><blockquote>A form of metamorphism discussed in theory.</blockquote><div class="l1"><strong> SPTH</strong></div>&laquo;<a name="vsp44" href="/lib/vsp44.html">Meta-Level Languages in Viruses</a>&raquo; <small>9.45Kb</small> <span class="note">7417 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>In valhalla#2, March 2012, herm1t wrote a wonderful article about how to write a good metamorphic virus - a gamechanger [1]. He argued that the virus should be written in a high-level metalanguage such as C, and should be fully self-compiling (more about it in chapter 3)I got interested, and tried to understand how ancient metamorphic viruses handled their reconstruction in terms of meta-languages. Here you see a small non-complete collection of different ways to create a new obfuscated representation of the code. Then I show a small thought on high-level compilers - and what would be a wired case scenario.</blockquote>&laquo;<a name="vsp45" href="/lib/vsp45.html">Metamorphism and Self-Compilation in JavaScript</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>17.84Kb</small> <span class="note">6540 hits</span><br/><small><a href="/vx.php?fid=2009#f2009">Valhalla #3</a> (2012)</small><blockquote>Metamorphic script viruses have not been seen - until now. Here I show an implementation in JavaScript, which have been used in JS.Transcriptase. I explain the self-hosting compiler and the meta-level language and take a short look into the future.</blockquote>&laquo;<a name="vsp36" href="/lib/vsp36.html">Some ideas to increase detection complexity</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>13.62Kb</small> <span class="note">8402 hits</span><br/><small><a href="/vx.php?fid=1943#f1943">Valhalla #1</a> (2011)</small><blockquote>Here you'll find a few small ideas and thoughts about making detection of computerviruses harder. Thanks alot to herm1t and hh86 for discussion and asking the right questions.</blockquote><div class="l1"><strong> The Mental Driller</strong></div>&laquo;<a name="vmd01" href="/lib/vmd01.html">Metamorphism in practice or "How I made MetaPHOR and what I've learnt"</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>66.25Kb</small> <span class="note">39293 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>Metamorphism is the art of extreme mutation. This means, we mutate everything in the code, not only a possible decryptor. Metamorphism was the natural evolution from polymorphism, which appeared to evade virus scanners. With metamorphism, the difficulty to detect a virus grows exponentially.Then, why aren't there more metamorphic viruses? Simple: they are extremely difficult to make, as I show in this article (not only for tech used, but for the many fux0ring problems we can when we code something like that). Anyway, we'll try to see here that maybe the important thing is to have the correct ideas (something that coders like Vecna, Z0MBiE and others had - hello! :).</blockquote><div class="l1"><strong>Andrew Walenstein, Rachit Mathur, Mohamed Chouchane, Arun Lakhotia</strong></div>&laquo;<a name="aal02" href="/lib/aal02.html">The Design Space of Metamorphic Malware</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <small>38.28Kb</small> <span class="note">15105 hits</span><br/><small>Proceedings of the 2nd International Conference on Information Warfare, (Monterey, CA, U.S.A., Mar 8-9), 2007. (2007)</small><blockquote>A design space is presented for metamorphic malware. Metamorphic malware is the class of malicious self-replicating programs that are able to transform their own code when replicating. The raison d'etre for metamorphism is to evade recognition by malware scanners; the transformations are meant to defeat analysis and decrease the number of constant patterns that may be used for recognition. Unlike prior treatments, the design space is organized according to the malware author's goals, options, and implications of design choice. The advantage of this design space structure is that it highlights forces acting on the malware author, which should help predict future developments in metamorphic engines and thus enable a proactive defence response from the community. In addition, the analysis provides effective nomenclature for classifying and comparing malware and scanners.</blockquote><div class="l1"><strong> Z0mbie</strong></div>&laquo;<a name="vzo14" href="/lib/vzo14.html">About reversing</a>&raquo; <small>13.78Kb</small> <span class="note">14137 hits</span><br/><blockquote>Reversing of executable files is the only base to write undetectable viruses.This is based on the following axiom: complexity C1 of detecting virus itself, when virus location is given, and complexity C2 of finding possible virus locations within infected objects, are different; and total complexity of detecting virus precence is a product of them, i.e. C1 * C2. Both complexities are interrelated; and both are limited by the object to be infected. This means that there exists some maximal complexity, which, when reached, will divide object and virus into different parts. As such, our task is to build optimal infection methods: when product of these complexities will be maximal, but not critically high, and thus only iteration-based detection methods will be effective.For example. Writing poly decryptor is good, but inserting it always into constant place, such as end of last section, is bad. Writing very big poly decryptor is bad in any case. Putting plain virus, into any place of the program, even into random place, is bad. So, the questions are: how much should be the virus polymorphic; in how many ways may it be inserted into file; and, because these two things are interrelated, where is the optimal combination.To find answers to these questions, virus must know everything about itself and about file to be infected. First part can be easily achieved; this was shown us in lots of metamorphic viruses. Second part is much harder, and this is also the subject of this article: how can virus to find out more information about the file it want to infect.</blockquote>&laquo;<a name="vzo21" href="/lib/vzo21.html">Automated reverse engineering: Mistfall engine</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.43Kb</small> <span class="note">23292 hits</span><br/><small><a href="/vx.php?fid=292#f292">Matrix Zine [3]</a> (2001)</small><blockquote>Our efforts are directed to develop such method of executable program modification, that finding changes will require maximal amount of time. Modification means addition of the viral code to some specified program, given in the PE format. It is obvious, that main viral body should be encrypted, and metamorphic (generated) virus decryptor should be integrated with program's code.</blockquote>&laquo;<a name="vzo18" href="/lib/vzo18.html">Data encoding in meta viruses</a>&raquo; <small>7.35Kb</small> <span class="note">10984 hits</span><br/><blockquote></blockquote>&laquo;<a name="vzo10" href="/lib/vzo10.html">Metamorphism (part 1)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>30.38Kb</small> <span class="note">14397 hits</span><br/><small><a href="/vx.php?fid=291#f291">Matrix Zine [2]</a> (2000)</small><blockquote></blockquote>&laquo;<a name="vzo24" href="/lib/vzo24.html">Metamorphism and permutation: feel the difference</a>&raquo; <small>1.13Kb</small> <span class="note">9687 hits</span><br/><blockquote></blockquote>&laquo;<a name="vzo20" href="/lib/vzo20.html">Some ideas about metamorphism</a>&raquo; <small>5.41Kb</small> <span class="note">11693 hits</span><br/><blockquote>Not long ago appeared an idea about virus, consisting of only NOPs. Let we have such typical program, that its code (in different places, but consecutively) contains the same instructions, blocks of instructions or their functional variants, those can be used in some virus. Then, it will be enough to fill all other part of that program's code with NOPs, so all remaining instructions will become the virus itself. Thus, from viewpoint of performed midifications, virus will consist of only NOPs. This can be not only the simple program, but program with all its DLLs; moreover, we can insert not only NOPs, but lots of other garbage. In other words, standard infection by means of adding new instructions here changed into inverse operation, that removes unnecessary instructions. Of course, there will be troubls with constants; but if you're interested in, you will invent something.</blockquote> <span class="note">11 authors, 18 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=ME&amp;index=ME">de</a><a href="/lib/index.php?lang=en&amp;index=ME&amp;index=ME">en</a><a href="/lib/index.php?lang=es&amp;index=ME&amp;index=ME">es</a><a href="/lib/index.php?lang=it&amp;index=ME&amp;index=ME">it</a><a href="/lib/index.php?lang=fr&amp;index=ME&amp;index=ME">fr</a><a href="/lib/index.php?lang=pl&amp;index=ME&amp;index=ME">pl</a><a href="/lib/index.php?lang=ru&amp;index=ME&amp;index=ME">ru</a><a href="/lib/index.php?lang=ua&amp;index=ME&amp;index=ME">ua</a></div>
</body>
</html>
