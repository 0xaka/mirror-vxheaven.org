<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Library UNIX and clones specific (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"f9cbb405109eabbfbf38edc48e9b41f835cc524a-1498754901-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/lib/index.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2">[<a href="/lib/?lang=de&amp;index=UN">Deutsch</a>][English][<a href="/lib/?lang=es&amp;index=UN">Español</a>][<a href="/lib/?lang=it&amp;index=UN">Italiano</a>][<a href="/lib/?lang=fr&amp;index=UN">Fran&ccedil;ais</a>][<a href="/lib/?lang=pl&amp;index=UN">Polski</a>][<a href="/lib/?lang=ru&amp;index=UN">Русский</a>][<a href="/lib/?lang=ua&amp;index=UN">Українська</a>]<br/><div style="float: left; margin-top: .5em;"><div class="hp"><a href="/lib/rnd00.html">Random article</a><br/><a href="/lib/?lang=en">Index</a><br/></span><a href="/lib/?index=Author&lang=en">Index by author</a><br/><a href="/lib/?index=Title&lang=en">Index by title</a><br/><a href="/lib/?index=Date&lang=en">Index by date</a><br/><a href="/lib/?index=Top&lang=en">Top 20 articles</a><br/><a href="/vx.php?id=zidx">Virus magazines</a><br/><a href="/vx.php?id=gidx">Virus groups</a><br/><a href="/timeline.php">Computer viruses timeline</a><br/><a href="/lib/static/textfiles.com/virus/">textfiles.com</a></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Top 5 articles</div><span class="small">R. O'Neill &laquo;<a name="vrn00" href="/lib/vrn00.html">Modern Day ELF Runtime infection via GOT poisoning</a>&raquo; (28862)<br/></span><span class="small">S. Cesare &laquo;<a name="vsc01" href="/lib/vsc01.html">Unix ELF parasites and virus</a>&raquo; (20791)<br/></span><span class="small">herm1t &laquo;<a name="vhe00" href="/lib/vhe00.html">Infecting ELF-files using function padding for Linux</a>&raquo; (20067)<br/></span><span class="small">Izik &laquo;<a name="viz00" href="/lib/viz00.html">Abusing .CTORS and .DTORS for fun 'n profit</a>&raquo; (19264)<br/></span><span class="small">S. Cesare &laquo;<a name="vsc07" href="/lib/vsc07.html">Runtime kernel kmem patching</a>&raquo; (18969)<br/></span></div><div class="hp"><div style="background-color: #bbbaaa; width: 100%; font-size: 10pt; text-decoration: underline;">Most cited</div><span class="small">F. Cohen &laquo;<a name="afc01" href="/lib/afc01.html">Computer Viruses - Theory and Experiments</a>&raquo; (<a href="/lib/?ci=afc01">73</a>)<br/></span><span class="small">F. Cohen &laquo;<a name="afc13" href="/lib/afc13.html">A Short Course on Computer Viruses</a>&raquo; (<a href="/lib/?ci=afc13">41</a>)<br/></span><span class="small">J. Shoch, J. Hupp &laquo;<a name="ajm01" href="/lib/ajm01.html">The "Worm" Programs - Early Experience with a Distributed Computation</a>&raquo; (<a href="/lib/?ci=ajm01">35</a>)<br/></span><span class="small">J. Brunner &laquo;<a name="mjb01" href="/lib/mjb01.html">The Shockwave Rider</a>&raquo; (<a href="/lib/?ci=mjb01">27</a>)<br/></span><span class="small">K. Thompson &laquo;<a name="mkt00" href="/lib/mkt00.html">Reflections on Trusting Trust</a>&raquo; (<a href="/lib/?ci=mkt00">27</a>)<br/></span></div></div><div style="float: left;"><h1>Library: UNIX and clones specific</h1><div class="lc">@<a href="/lib/?index=AA&lang=en">Anti anti-viruses, anti-debugging</a> (25)<br/>@<a href="/lib/?index=AR&lang=en">Anti-virus programs</a> (7)<br/>@<a href="/lib/?index=AN&lang=en">Analysis of the particular viruses</a> (78)<br/>@<a href="/lib/?index=AI&lang=en">Artificial intelligence and evolution</a> (20)<br/>@<a href="/lib/?index=AT&lang=en">Anti-virus technology</a> (24)<br/>@<a href="/lib/?index=AV&lang=en">Anti-virus general</a> (81)<br/>@<a href="/lib/?index=CO&lang=en">Collecting and Trading</a> (3)<br/>@<a href="/lib/?index=CR&lang=en">Cryptography and Cryptovirology</a> (10)<br/>@<a href="/lib/?index=DO&lang=en">MS-DOS specific</a> (42)<br/>@<a href="/lib/?index=EP&lang=en">Computer Epidemiology</a> (11)<br/>@<a href="/lib/?index=FI&lang=en">Fiction</a> (13)<br/>@<a href="/lib/?index=GV&lang=en">Good viruses and worms</a> (10)<br/>@<a href="/lib/?index=IV&lang=en">Interviews with VXers and AVers</a> (75)<br/>@<a href="/lib/?index=IW&lang=en">Information warfare</a> (5)<br/>@<a href="/lib/?index=IM&lang=en">Computer Immunology</a> (8)<br/>@<a href="/lib/?index=HI&lang=en">History</a> (52)<br/>@<a href="/lib/?index=LA&lang=en">Laws</a> (18)<br/>@<a href="/lib/?index=MA&lang=en">Macro and script viruses</a> (74)<br/>@<a href="/lib/?index=ME&lang=en">Metamorphism</a> (18)<br/>@<a href="/lib/?index=OO&lang=en">Different OS's - MacOS, MenuetOS, ...</a> (3)<br/>@<a href="/lib/?index=OT&lang=en">Trojans, Hoaxes, Hypes, Spyware</a> (4)<br/>@<a href="/lib/?index=TH&lang=en">Theory, models and definitions</a> (36)<br/>@<a href="/lib/?index=PO&lang=en">Polymorphism</a> (27)<br/>@<a href="/lib/?index=PR&lang=en">Predictions, Prognosis, Trends...</a> (14)<br/>@<a href="/lib/?index=PS&lang=en">Scene, Psychological, Ethical, Cultural and Social aspects</a> (110)<br/>@<a href="/lib/?index=SR&lang=en">Self-reproduction</a> (4)<br/>@<u>UNIX and clones specific</u><br/>@<a href="/lib/?index=VT&lang=en">Virus technology</a> (69)<br/>@<a href="/lib/?index=VX&lang=en">Virus general</a> (26)<br/>@<a href="/lib/?index=WO&lang=en">Computer worms and botnets</a> (23)<br/>@<a href="/lib/?index=WI&lang=en">Windows specific</a> (55)<br/>@<a href="/lib/?index=RK&lang=en">Rootkits</a> (2)<br/></div></div><br clear="left"/><div class="l1"><em>uknown</em></div>&laquo;<a name="vxx04" href="/lib/vxx04.html">Viruses under LiNUX</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>70.97Kb</small> <span class="note">13529 hits</span><br/><small><a href="/vx.php?fid=520#f520">Xine [5]</a> (1999)</small><blockquote>The neverending question, Why aren't viruses for linux?. It seems that the viral community, accustomed to Real Mode systems (DOS), find that is hard to adapt themselves to protected mode systems. Even for Win95/98, systems with important dessign problems, there exists moreless 30 viruses where the great majority are non-resident viruses or VxD infectors (Ring-0 devices).</blockquote><div class="l1"><strong> Ares</strong></div>&laquo;<a name="var00" href="/lib/var00.html">Static linked ELF infecting</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>10.44Kb</small> <span class="note">13340 hits</span><br/><small> (2004)</small><blockquote>[...] In this article, I am describing my idea for infecting statically linked ELF binaries. After reading, you can find a complete infector, Scorpion, for this technique. Bundled, you will find several example back-doors. [...]</blockquote><div class="l1"><strong>Alexander Bartolich</strong></div>&laquo;<a name="vab00" href="/lib/vab00.html">The ELF Virus Writing HOWTO</a>&raquo; <span class="note">14821 hits</span><br/><small>http://virus.enemy.org/ (2003)</small><blockquote>This document describes how to write parasitic file viruses infecting ELF executables. Though it contains a lot of source code, no actual virus is included. Every mentioned infection method is accompanied with a practical guide to detection. Writing a program that inserts code into another program file is one thing. Writing that program so that it can be injected itself is a very different art. Although this document shows a lot of code and technique, it is far from being a "Construction Kit For Dummies". You can't build a working virus just by copying whole lines from this text. Instead I'll try to show how things work. Translation of infecting code to a assembly is left as (non-trivial) exercise to the reader. An astonishing number of people think that viruses require secret black magic. Here you will find simple code that patches other executables. It is not hard to write a virus - once you have a good understanding of assembler, compiler, linker and operating system. It's just hard to let it make any impact.</blockquote><div class="l1"><strong>Christophe Blaess</strong></div>&laquo;<a name="abc02" href="/lib/abc02.html">Viruses: a concern for all of us</a>&raquo; <small>41.08Kb</small> <span class="note">10679 hits</span><br/><small>LinuxFocus (2002)</small><blockquote>This article reviews internal security problems that can appear on Linux systems because of aggressive software. Such software can cause damage without human intervention: Viruses, Worms, Trojan Horses, etc. We will go deep into the various vulnerabilities, insisting in the pros and cons of free software in this matter.</blockquote><div class="l1"><strong> BrainStorm</strong></div>&laquo;<a name="vbs00" href="/lib/vbs00.html">Writing ELF parasitic Code in C</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>11.73Kb</small> <span class="note">18244 hits</span><br/><blockquote>[...] ELF parasites are usually written in pure assembler code. due to this, code can get really huge in pure ASM, while the same stuff could be done much faster with C code and inline asm(). [...]</blockquote><div class="l1"><strong>Silvio Cesare</strong></div>&laquo;<a name="vsc03" href="/lib/vsc03.html">ELF executable reconstruction from a core image</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>6.08Kb</small> <span class="note">14112 hits</span><br/><small><a href="/vx.php?fid=290#f290">Matrix Zine [1]</a> (1999)</small><blockquote>This article documents the results from experimenting with binary reconstruction of an ELF executable given a core dump or snapshot of the process image.</blockquote>&laquo;<a name="vsc08" href="/lib/vsc08.html">Kernel function hijacking</a>&raquo; <small>2.5Kb</small> <span class="note">14554 hits</span><br/><small> (1999)</small><blockquote>This paper describes a method of hijacking internal kernel functions, that is, kernel functions that are declared inside the kernel without a function pointer or vector for changing the kernel function it points too. This can have practical uses, as given in example code which patches the process accounting code to not log specially marked processes (processes given signal 31).</blockquote>&laquo;<a name="vsc07" href="/lib/vsc07.html">Runtime kernel kmem patching</a>&raquo; <small>29.39Kb</small> <span class="note">18969 hits</span><br/><small><a href="/vx.php?fid=290#f290">Matrix Zine [1]</a> (1998)</small><blockquote>This paper documents runtime (on the fly) kernel patching on a running system under Linux using direct access to kernel memory. The same algorithms may equally be applicable to other systems. Examples of kernel patching for use by an attacker is provided showing patching of kernel structures to remove a lkm's visibility to lsmod and even the addition of kernel code ala loadable kernel modules (lkm) to a running system without native lkm support in the kernel. Discussion of rebuilding the appropriate sections of the system symbol map (System.map) is provided implemented.</blockquote>&laquo;<a name="vsc06" href="/lib/vsc06.html">Shared library call redirection using ELF PLT infection</a>&raquo; <small>33.36Kb</small> <span class="note">17936 hits</span><br/><small><a href="/vx.php?fid=290#f290">Matrix Zine [1]</a> (1999)</small><blockquote>This paper describes a method of shared library call redirection using ELF infection that redirects the Procedure Linkage Table (PLT) of an executeable. Thus, redirection is not resident outside of the infected executeable. This has the advantage over the LD_PRELOAD redirection technique in that no environment variables are modified, thus remaining more hidden than previous techniques. An implementation is provided for x86/Linux.</blockquote>&laquo;<a name="vsc05" href="/lib/vsc05.html">SysCall redirection without modifying the SysCall table</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>2.38Kb</small> <span class="note">12566 hits</span><br/><small><a href="/vx.php?fid=290#f290">Matrix Zine [1]</a> (1999)</small><blockquote>This article describes a technique of redirecting system calls without modifying the sys call table (implemented in Linux). This can be used to evade intrusion detection systems that use the sys call table to register redirected or trojaned system calls. It is however an easy modifcation to make to detect the attack implemented in this article.</blockquote>&laquo;<a name="vsc01" href="/lib/vsc01.html">Unix ELF parasites and virus</a>&raquo; <small>34.86Kb</small> <span class="note">20791 hits</span><br/><small> (1998)</small><blockquote>This paper documents the algorithms and implementation of UNIX parasite and virus code using ELF objects. Brief introductions on UNIX virus detection and evading such detection are given. An implementation of various ELF parasite infectors for UNIX is provided, and an ELF virus for Linux on x86 architecture is also supplied. It is superceded by the following article.</blockquote>&laquo;<a name="vsc02" href="/lib/vsc02.html">Unix viruses</a>&raquo; <small>49.59Kb</small> <span class="note">13571 hits</span><br/><small> (1999)</small><blockquote>This paper documents the algorithms and implementation of UNIX parasite and virus code using ELF objects. Brief introductions on UNIX virus detection and evading such detection are given. An implementation of various ELF parasite infectors for UNIX is provided, and an ELF virus for Linux on x86 architecture is also supplied.</blockquote><div class="l1"><strong> Cyberdude</strong></div>&laquo;<a name="vcd00" href="/lib/vcd00.html">How to have fun with ptrace syscall</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>18.38Kb</small> <span class="note">10264 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2008)</small><blockquote>Hi boys in this text i want show to you how is possible to "hack" one process using some assembly strings and the Dynamic linker. If you search in internet you can find it : a dynamic linker is the part of an operating system that loads and links the shared libraries for an executable when it is run. Such linkers typically also have a shared library that is linked with the executable when it is compiled and may determine the actions of the linker. One shared library,in addition to being loaded statically or dynamically, are also often classified according to how they are shared among programs. In Linux the dynamic linker shared libraries, tipically are based on a common set of environment variables, including LD_LIBRARY_PATH and LD_PRELOAD. In this text we will use the LD_PRELOAD variable. When LD_PRELOAD is set, the dynamic linker will use the specified library before any other when it searches for shared libraries. Now imagine that our process is the next code</blockquote><div class="l1"><strong> Cyneox</strong></div>&laquo;<a name="vcy00" href="/lib/vcy00.html">NOTE Segment Infection technique</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>4.29Kb</small> <span class="note">8540 hits</span><br/><small><a href="/vx.php?fid=1340#f1340">DCA E-zine #1 (html)</a> (2004)</small><blockquote>I was sitting around and looking at my old creations etc. and then I've asked myself : Why am I always using that old fucing S.P.I ( Segment Padding Technique) technique in my viruses !? Hm.... Because its so easy to understand and to use it.It has been used since 3-4 years.Well I think this way of infection is getting old fashioned ;)On a sunny day I was looking at the output of readelf. And then I've realized that fucking NOTE segment is actually unusefull for the loader and for the user :-P And then came the idea : Why not inserting the virus code after the NOTE segment or even better : Why not inserting it IN the NOTE segment !? Well let us take a closer look at this idea...</blockquote><div class="l1"><strong>Tom Duff</strong></div>&laquo;<a name="vtd01" href="/lib/vtd01.html">Viral Attacks On UNIX System Security</a>&raquo; <small>28.16Kb</small> <span class="note">15306 hits</span><br/><small> (1987)</small><blockquote>Executable files in the Ninth Edition of the UNIX system contain small amounts of unused space, allowing small code sequences to be added to them without noticeably affecting their functionality. A program fragment that looks for binaries and introduces copies of itself into their slack space will transitively spread like a virus. Such a virus program could, like the Trojan Horse, harbor Greeks set to attack the system when run by sufficiently privileged users or from infected set-userid programs.The author wrote such a program (without the Greeks) and ran several informal experiments to test its characteristics. In one experiment, the code was planted on one of Center 1127's UNIX systems and spread in a few days through the Datakit network to about forty machines. The virus escaped during this test onto a machine running an experimental secure unix system, with interesting (and frustrating for the system's developers) consequences.Viruses of this sort must be tiny to fit in the small amount of space available, and consequently are very timid. There are ways to construct similar viruses that are not space-constrained and can therefore spread more, aggressively and harbor better-armed Greeks. As an example, we exhibit a frighteningly virulent portable virus that inhabits shell scripts.Viruses rely on users and system administrators being insufficiently vigilant to prevent them from infiltrating systems. I outline a number of steps that people ought to take to make infiltration less likely.Numerous recent papers have suggested modifications to the unix system kernel to interdict viral attacks. Most of these are based on the notion of 'discretionary access controls.' These proposals cannot usually be made to work, either because they make unacceptable changes in the 'look and feel' of the unix system's environment or they entail placing trust in code that is inherently untrustworthy. In reply to these proposals, I suggest a small change to the unix system permission scheme that may be able to effectively interdict viral attacks without serious effect on the unix system's functioning and habitability.</blockquote><div class="l1"><strong> Gobleen Warrior</strong></div>&laquo;<a name="vgw00" href="/lib/vgw00.html">UNIX SH and BASH shell viruses</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>33.91Kb</small> <span class="note">6469 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>What is UNIX Shell? People, who knows it, can scip some lines below, people, who knows UNIX well, can don't read this text at all. UNIX Shell is pecular BAT language of the UNIX systems, but much more advanced, functional and effective. A lot of system utilites are written in it, and it's says a lot about UNIX Shell. There is a many varieties of the UNIX Shell, for example SH, BASH, ZSH, KSH, CSH, you even can write your own UNIX Shell interpreter. It complicates writing of the programs by reducing of their compatibility. UNIX Shell language is rather flexible and universal. Equally as in the BAT, in UNIX Shell language there are internal, built-in commands, such as, for example, "cd", and external, system, commands, such as "cp", for example. In the UNIX Shell language there are constuctions like "if ... then", "for ... in ... do", and similar to them. In this article i will talk about one from numerous versions of UNIX Shell - SH and its extended version BASH.</blockquote><div class="l1"><strong> herm1t</strong></div>&laquo;<a name="vhe10" href="/lib/vhe10.html">Advanced EPO: Deeper, longer and harder (Part 1)</a>&raquo; <img src="/img/sum.gif" alt="[TeX]"/> <img src="/img/bin.gif" alt="[SRC]"/> <small>15.09Kb</small> <span class="note">11982 hits</span><br/><small><a href="/vx.php?fid=1948#f1948">Electrical Ordered Freedom #3</a> (2011)</small><blockquote>In the recent zine Decepticons, Tiberio published the nice article [1] about entry-point obscuring and listed there a number of ways in which the virus could capture the control from application. Most of them are related to API calls - replacing the API call or replace the callback in the API's parameter list (the first is known under Linux as PLT redirection [2]) other techniques explores different cavities which could be used to place there the get-me-to-the-virus instruction. There is something common for all of these methods - no one will tell you when the virus will gain the control and will it get it at all. I think we have to do something about this.</blockquote>&laquo;<a name="vhe06" href="/lib/vhe06.html">Caveat virus</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.88Kb</small> <span class="note">13299 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2008)</small><blockquote>This tutorial explains how to use a small amounts of space within Program Header Table to inject the tiny loader which will allocate the memory for the main virus body, load and execute it. Suppose that we have, say, 64 bytes of unused space inside loadable segment?</blockquote>&laquo;<a name="vhe08" href="/lib/vhe08.html">From position-independent to self-relocatable viral code</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>26.33Kb</small> <span class="note">16668 hits</span><br/><small> (2009)</small><blockquote>This article discusses the different approaches to position-independent and self-relocatable code. It shows that non-PIC style of the code allows substantially relax the limitations on virus code and use an advantages of high-level programming, which formerly were practically inaccessible to the virus authors.</blockquote>&laquo;<a name="vhe02" href="/lib/vhe02.html">Hashin' the elves</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>22.24Kb</small> <span class="note">17745 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2007)</small><blockquote>One day I was looking through the ELF files with objdump and called my attention to .hash section, and thought: gee, can't we take some advantage of it? Nice section after all. Located in the code segment. Could it be shrinked or removed? In this article I want to share my findings.</blockquote>&laquo;<a name="vhe00" href="/lib/vhe00.html">Infecting ELF-files using function padding for Linux</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>25.5Kb</small> <span class="note">20067 hits</span><br/><small> (2006)</small><blockquote>Not so long ago, i have read two articles concerned with amusing method of ELF-file infection [1,2], I want to talk about. It's amazing, but the tools presented by Z0mbie and Ares both intended to injecting trojans, and I still didn't saw any viruses using this technology, though may be I looked in the wrong direction. :-) Method is unusual and has both advantages and disadvantages, but let's discuss everything step by step.</blockquote>&laquo;<a name="vhe05" href="/lib/vhe05.html">INT 0x80? No, thank you!</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>14.86Kb</small> <span class="note">13850 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2007)</small><blockquote>After finishing the Lacrimae virus which is able to extend any section and thus import library functions, I spent some time thinking how an ordinary virus can use the libc or any other library. There are a lot of opportunities for the viruses having such a feature. Here I wish to present a method to do it, using test virus Linux.Pilot as an example.</blockquote>&laquo;<a name="vhe04" href="/lib/vhe04.html">Reverse of a coin: A short note on segment alignment</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>8.72Kb</small> <span class="note">13916 hits</span><br/><small><a href="/vx.php?fid=1581#f1581">Electrical Ordered Freedom #2 (EOF-DR-RRLF)</a> (2007)</small><blockquote>One of the widely used method of ELF files infection was propposed by Silvio Cesare [1]. To inject the virus to a file the free space at the end of text segment, appeared as a result of alignment is used. Alignment is neccessary to prevent the beginning of the data segment and the end of text segment from ending up in the same page. The "hole" in the memory exist no only in the end of text segment, but also at the beginning of data segment:</blockquote><div class="l1"><strong> Izik</strong></div>&laquo;<a name="viz00" href="/lib/viz00.html">Abusing .CTORS and .DTORS for fun 'n profit</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>12.4Kb</small> <span class="note">19264 hits</span><br/><small> (2005)</small><blockquote>This paper talks about glibc initialization framework and how abusive constructors and destructors can be. A quick analysis of how ordinary ELF executable that been compiled using gcc and linked against glibc is been loaded and executed. Also a practical example of abusive constructors, an Anti-Debugging that been implemented within a constructor that puts up a nice fight.</blockquote><div class="l1"><strong> JPanic</strong></div>&laquo;<a name="vjp01" href="/lib/vjp01.html">Linux x64 Infection for Lamers (by a Lamer)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>52.31Kb</small> <span class="note">7938 hits</span><br/><small><a href="/vx.php?fid=2016#f2016">Valhalla #4</a> (2013)</small><blockquote>This article was written to help people new to x64 Linux beginning writing viruses quickly and easily. While writing "Linux64.Retaliation" I have decided to share what I have learnt as a Linux novice while working on my second Linux infecter. Please do not expect to find cutting edge information in this document. I would like to express my gratitude to Herm1t for his help and time, and pointing me in the right direction while I learnt these things. I am sure many of these basic things could also be applied to x86 (32-bit) Linux as well.As as side note, I can not find any source code or articles on any exist Linux x64 viruses/worms - so I can discuss none in this article. If you know of any, please let me know.</blockquote><div class="l1"><strong> Kernel Panik</strong></div>&laquo;<a name="vkp00" href="/lib/vkp00.html">Piggyback</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>7.08Kb</small> <span class="note">9875 hits</span><br/><small><a href="/vx.php?fid=519#f519">Xine [4]</a> (1998)</small><blockquote>This is a small tool used to append executable code to an exiting program (virus writers would call it "to infect"). The idea used by piggyback is very simple and rather portable among different Unices. Piggyback itself is a small program in C that takes the place of the "victim", which is copied after the piggyback code. At the real end is stored a long which is the lenght of the piggyback executable.</blockquote><div class="l1"><strong> mandragore</strong></div>&laquo;<a name="vma00" href="/lib/vma00.html">Linux virus writing tutorial</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>15.8Kb</small> <span class="note">10071 hits</span><br/><small><a href="/vx.php?fid=8#f8">29a [4full]</a> (1999)</small><blockquote>In this paper, I'll discuss how to make a linux virus. Of course you won't use this to make one.</blockquote><div class="l1"><strong>Ryan O'Neill</strong></div>&laquo;<a name="vrn00" href="/lib/vrn00.html">Modern Day ELF Runtime infection via GOT poisoning</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>92.41Kb</small> <span class="note">28862 hits</span><br/><small> (2009)</small><blockquote>This paper is a document that outlines a specific algorithm to hijack shared library calls within a running process. While working on my UNIX AV tool for ELF parasite disinfection and memory resident parasite analysis, I stumbled upon an algorithm for hijacking shared library calls through global offset table poisoning, and coded a hijacker that uses the algorithm to demonstrate it. Runtime infection through shared library linking is not a new concept; so why would I write a paper on it?</blockquote>&laquo;<a name="vrn01" href="/lib/vrn01.html">An unofficial analysis of the Retaliation Virus (Authored by JPanic)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>52.7Kb</small> <span class="note">11930 hits</span><br/><small> (2014)</small><blockquote>I recently had the opportunity to do some analysis of a new ELF virus authored by JPanic. After spending some time looking at it, I was impressed and quite to my surprise. This is perhaps the most well thought out and dangerously effective ELF binary virus that I have seen yet. I would like to discuss some of the findings associated with analysis, and thus produce a profile on the Virus named 'Retaliation'</blockquote><div class="l1"><strong>Peter Radatti</strong></div>&laquo;<a name="apr00" href="/lib/apr00.html">Computer Viruses In Unix Networks</a>&raquo; <small>36.84Kb</small> <span class="note">11512 hits</span><br/><small>CyberSoft, Incorporated (1995)</small><blockquote>Unix systems are as susceptible to hostile software attacks as any other system, however, the Unix community is zealous in their believe that they are immune. This belief is in the face of historical reality. The first computer viruses created were on Unix systems. The Internet Worm, Trojan Horses and Logic Bombs are all ignored milestones in this belief. Not withstanding these beliefs, there is a growing concern among computer security professionals about these problems. This concern is based on recognition of the complex nature of the problem and the increasing value of Unix based networks. Whereas, the Internet Worm disrupted the Internet in 1988 the cost was relativity low. If this attack is repeated today, the cost will be very high because of the new found importance of the Internet, electronic business networks using EDI and private networks, all of which are Unix based.</blockquote><div class="l1"><strong> Z0mbie</strong></div>&laquo;<a name="vzo08" href="/lib/vzo08.html">Injected Evil (executable files infection)</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>9.21Kb</small> <span class="note">14858 hits</span><br/><small><a href="/vx.php?fid=1224#f1224">29a [7]</a> (2004)</small><blockquote>Here will be described some rare method of executable files infection. It is based on parsing trojan code into instructions, and injecting these instructions into free areas (alignment) between subroutines of the target file. This idea is not new, and probably has always been used in some viruses. Also, under executable files i'll mean executable ELF files for x86 platform, though it can be win32 PE files too.</blockquote><div class="l1"><strong> zert</strong></div>&laquo;<a name="vze01" href="/lib/vze01.html">Virus Juice: squeezing bash to get it, another little shell script virus tutorial</a>&raquo; <img src="/img/bin.gif" alt="[SRC]"/> <small>58.29Kb</small> <span class="note">8004 hits</span><br/><small><a href="/vx.php?fid=11#f11">29a [6]</a> (2002)</small><blockquote>This tutorial is intended to give a general perspective on script virus in UNIX environments, as well as showing some examples of what can be done using the explained techniques.There are many tutorials following the same topic, so this text is not new in that aspect, but I considered of interest writing it so I can give a more global focus to the topic, and show my examples in detail.To finish this introduction I would like to epmhasize the work of SnakeByte and Gobleen Warrior in this field. I didn't know there were more people interested in this funny type of scripts :-)</blockquote> <span class="note">18 authors, 32 titles</span></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/lib/index.php?lang=de&amp;index=UN&amp;index=UN">de</a><a href="/lib/index.php?lang=en&amp;index=UN&amp;index=UN">en</a><a href="/lib/index.php?lang=es&amp;index=UN&amp;index=UN">es</a><a href="/lib/index.php?lang=it&amp;index=UN&amp;index=UN">it</a><a href="/lib/index.php?lang=fr&amp;index=UN&amp;index=UN">fr</a><a href="/lib/index.php?lang=pl&amp;index=UN&amp;index=UN">pl</a><a href="/lib/index.php?lang=ru&amp;index=UN&amp;index=UN">ru</a><a href="/lib/index.php?lang=ua&amp;index=UN&amp;index=UN">ua</a></div>
</body>
</html>
