<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>The Virus/DOS 0.54 - Virus for MS-DOS by Zhengxi (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="VX Heaven site is dedicted to providing information about computer viruses (virii) and web space for virus authors and groups"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"d21636ed1a6c7e92de6531fa816f4bff95ce48fa-1498755366-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/><script type="text/rocketscript">	var s = 0;
	function soundex() {
		if (document.getElementById) {
			var snd = document.getElementById("snd");
			var frm = document.getElementById("sfrm");
			s = 1 - s;
			snd.src = "/img/sound_" + (s ? "on" : "off") + ".gif";
			frm.soundex.value = s;
		}
	}
	function do_img() {
		if (document.getElementById)
			document.write('<' + 'img id="snd" class="va" src="/img/sound_' + (s ? 'on' : 'off') + '.gif" onclick="soundex();" alt="" /' + '>');
	}</script>
<link rel="stylesheet" type="text/css" href="/style.css"/><style type="text/css">.va{vertical-align:middle;}</style>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/src.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2"><h1>Source code of computer viruses</h1><h2>The Virus/DOS 0.54 - Virus for MS-DOS by Zhengxi</h2><p><em>Virus for MS-DOS</em></p><p><strong>Zhengxi</strong><br/><small><a href="/src.php?author=Zhengxi">Show all viruses by this author</a></small></p><p>1995-00-00</p><a href="#disqus_thread">Comments</a><br/><form class="fr" method="post" action="/file.php"><input type="image" src="/img/dl.gif" alt="Download"/><input type="hidden" name="file" value="c3JjL3poZW5neGkuemlw"/></form> Download zhengxi.zip (51648 bytes) or <a href="/src_view.php?file=zhengxi.zip">browse online</a><p>This is the family of very dangerous, polymorphic and stealth parasitic
viruses. These viruses are more that 7k of length, very complex, maybe
the most complex DOS viruses. These viruses infect EXE, OBJ and LIB files,
and append COM droppers to ZIP, ARJ, HA, and RAR archives. The viruses
contain the text strings:</p>
<pre>                                             
    Abnormal program termination                                   
    The Virus/DOS 0.54  Copyright (c) 1995 Zhengxi Ltd            
    Warning! This program for internal use only!
</pre>
<h2>Installation</h2>
<p>The virus code receives the control from different points depending on
the infection way, but in all cases the destination is the polymorphic
decryption routine. In EXE files (appending) the decryption routine
receives the control immediately when EXE file is loaded into the memory
for execution; in EXE files (inserting), from the loader code (see EXE
infection); in the files linked with infected OBJ/LIB files, from a call
instruction (see OBJ/LIB infection); the COM droppers have a jmp instruction
at their beginning, which brings the control to the decryption routine.</p>
<p>Being decrypted, the virus installation routines receives the control.
The virus hooks int 1 (one step tracing), and traces int 21h. While tracing,
the virus looks for some specific code within the int 21h handler
(that code is present in DOS 5.x and DOS 6.x). If such code is found, the
virus checks several conditions, and terminates installation in some cases.
These cases are the ones below:</p>
<ul>
<li>Microsoft Windows is installed</li>
<li>Boot drive is A: or B:</li>
<li>Int 8, 13h, 28h point to the same segment (to exit installation if any
antivirus monitor is installed?)</li>
<li>Host file's day (date and time stamp) is the same or near the current
day (if the two highest bits of current day number xored with the file
day is equal to zero)</li>
</ul>
<p>Then the virus allocates the block of the system memory for the virus TSR
copy, stores in its body 11 bytes from the address of the int 21h handler
and patches int 21h code with a far call instruction (2f ff 1e ?? ??),
which brings the control to the int 25h handler (absolute disk read).
Then the virus stores the first five bytes of int 25h handler and writes
there other five bytes, which become the far jmp to the virus code. The
result looks like follows:</p>
<pre class="source">
      int 21h handler:
              ...              ...
   +--------- 2e ff 1f ????    call far cs:int_25h
   |          c7 06            ????                 ; Magic word?
   | int_25h: ???? ????        ???? ????            ; Far addr of int 25h
   |          ...              ...
   |
   |> int 25h handler:
   +--------- ea ???? ????     jmp far virus_handler
   |          ...              ...
   +> virus handler:
              2e 8f 06 ...     pop cs:caller_ip
              ...              ...
</pre>
<p>As result, the virus has the same handler to intercept both int 21h and
int 25h calls. To separate these calls, Zhengxi checks the address of the
caller (the caller_ip). If the call goes to the int 21h handler, the virus
passes the control to its int 21h handler routine; in another case,
the virus int 25h handler receives the control.</p>
<p>The installation routine is complete, but the virus can move its code to
other memory blocks (see int 21h handler analysis). So, the TSR copy of
the virus does not occupy the same blocks of the system memory, but may
move itself to other addresses, including UMB ones.</p>
<p>Then the virus returns the control to the host program. There are three
different variants of such return, and they depend on the infection method.
In case of a COM dropper the virus just displays this message:</p>
<pre>    Abnormal program termination</pre>
<p>And returns to DOS with the terminate function (int 21h, ah=4ch). In case
of the EXE-appending infection method the virus restores the original file
header by using its polymorphic engine (generates the polymorphic decryption
routine, and executes it for restoring the original header (see EXE infection
below). In case of the EXE-inserting way the virus just returns to the host program because the virus loader inserted into the file restores the original code itself. In case of being an OBJ/LIB file the virus also just returns to the host (see OBJ/LIB infection below).</p>
<h2>Int 21h handler</h2>
<p>Zhengxi intercepts 18 int 21h functions:</p>
<pre>
   3dh, 6ch      - Open/create file
   3eh           - Close file
   3fh           - Read file
   42h           - Lseek
   4bh           - File execution
   41h           - Delete file
   11h, 12h      - Findfirst/findnext FCB
   4eh, 4fh      - Findfirst/findnext ASCII
   00h, 4ch      - Terminate
   31h           - Terminate and stay resident
   67h           - Set handle count
   48h, 49h, 4ah - Memory managing functions (allocate, free, resize)
</pre>
<p>The set handle count, file execution and memory managing functions are used by the virus to hide its code into the system memory (Zhengxi manipulates MCB blocks to remain invisible on the memory map while using memory browsing utilities).</p>
<p>While intercepting terminate, TSR and free memory DOS functions, Zhengxi moves its code to a new address in the system memory. The virus allocates a new memory block (may be a conventional or UMB memory block), and copies itself there. So, while installing, the virus does not affect UMB blocks to place its TSR copy, but then it may move into UMB, and hide itself there. </p>
<p>While file opening the virus performs several different calls. First, the
virus checks the opening mode, and if the file is opened for writing, the
virus disinfects the file.</p>
<p>Before disinfection the virus checks the file is being accessed, and the program that is accessing that file (the caller). The virus compares the name of this program or caller with a name list (see below), and does not disinfect the accessed file if the caller name is found in that list.</p>
<p>UUENCODE.EXE, PKLITE.EXE, LZEXE.EXE, NDD.EXE, DIET.EXE, AFD.EXE, SD.EXE
SPEEDDSK.EXE, DEFRAG.EXE, TLINK.EXE, LINK.EXE</p>
<p>In case of the ah=3d00h function (open read-only) the virus performs some strange actions. It scans the caller code and patches it. It looks like patching some antivirus scanner. Fortunately, the virus has a bug, and that branch is never executed.</p>
<p>While opening the file, the virus also brings the control to its stealth
routine: it replaces the file length with the original one.</p>
<p>While reading from a file, Zhengxi calls the stealth routine. In case of reading from the header of the infected file the virus reads, decrypts and copies the original header into the reading buffer.</p>
<p>In case of the lseek function the virus brings the control to other of its stealth routines: it doesn't allow to seek out of the original file length. </p>
<p>While deleting an infected file, the virus disinfects it.</p>
<p>While looking for files with findfirst/findnext, Zhengxi replaces the file length with the original one if the file is infected.</p>
<p>Findfirst/findnext ASCII calls are also used by the virus to catch files for infection. The virus saves the name of any file that is accessed with the findfirst function, and approximately each 5th file (with probability 3/16) accessed with the findnext function. The virus has only one buffer for the file name, so every next name overwrites the previous one.</p>
<p>While closing any file the virus checks and infects it with the name that that is stored in the buffer. The virus also infects the file that is being closed, but is does it with probability 1/4 (by the result of its random generator).</p>
<h2>Infection</h2>
<p>Before infecting a file, Zhengxi checks several conditions:</p>
<ul>
<li>The file is not "just created", by comparing the current day number with the file date and time stamp (as while installing itself)</li>
<li>The file is local, and not on A: or B: drive</li>
<li>The file name is not *.?V? (*.OVL)</li>
<li>There is enough free disk space (it checks this with int 21h, ah=36h)</li>
</ul>
<p>If all this is ok, the virus reads the file header and checks it for EXE,OBJ, LIB and archives stamps.</p>
<h3>Infecting EXE files</h3>
<p>Zhengxi infects EXE files by using three different infection methods:
appending, inserting, and infecting archives in self-extracting files.</p>
<p>At first, the virus checks the file structure, and if it is a self-exracting EXE file (created by ZIP2EXE, for instance), Zhengxi infects it using the same method it uses when infecting archives (ZIP, ARJ, HA, RAR) that is, creating a COM dropper and adding it to the archive contents.</p>
<p>Then the virus checks the file length, and doesn't infect files with a length lesser than 400h (1024) bytes. If the length of the loadable module (note: not the file length) is larger that 32k, Zhengxi inserts its own loader int the middle of the file. In other case, it infects the file by the appending method.</p>
<p>While infecting files by the appending method, Zhengxi reads file header, encrypts and saves it to the end of the file. Then it runs its polymorphic generator, and saves the encrypted virus body and the polymorphic loops to the end of the file. For finishing the file infection, Zhengxi increases the file length to a value that divided by 9dh gives 25h as rest (this is the virus ID stamp, its infection mark), and modifies the EXE header fields (registers and module length).</p>
<p>Note: Zhengxi encrypts the original host header with the polymorphic encryption loop, and that loop is different that the routine it uses for encrypting the virus body. Then, the virus calls its polymorphic engine twice: while encrypting the original EXE header, and while encrypting the main body. </p>
<p>While executing an infected EXE file, the decryption loop restores the main virus body, but not original file header. To return to the host, the virus has to decrypt the host data, but the engine generates random loops with random selected encryption functions. To solve that problem, Zhengxi stores the initial random generator values while encrypting the host data, and runs the polymorphic generator with the same values while decrypting those data. As result, the generator brings the same code which was used for encrypting the host header, and being executed, that routine decrypts it.</p>
<h3>Infecting EXE Files (inserting)</h3>
<p>If the file length is above 32k, the virus seeks to the beginning of the EXE main module (just after EXE header), reads 6k of code, and looks for C/Pascal routines there. Usually C/Pascal routines begin from the same "header" that saves the BP register, and moves the stack pointer to BP.</p>
<p>Zhengxi scans the code for those "headers" and, if such code is found, the virus scans the next 54h bytes of code for a ret or a call far instruction to prevent an overlap of the next subroutine, or relocated address. If such code (ret or call far) is found, the virus exits from its infection routine. </p>
<p>Then the virus reads 54h bytes of that routine, overwrites it with the code of its loader, and then encrypts the main virus body with its polymorphic engine, and saves it to the end of the file. Then Zhengxi encrypts with a simple sub function the original subroutine code and the second part of the loader, and saves it to the end of the file. Then the virus writes the random data to the end of the file in the same way as in the "appending" infection method.</p>
<pre>
    Not infected         Infected

   +--------------+     +--------------+
   |EXE header    |     |EXE header    |
   +--------------+     +--------------+
   |Main EXE code |     |Main EXE code |
   +--------------+     +--------------+
   |C/Pascal subr |--+  |Virus loader  | Part 1, 52h bytes, not encrypted
   +--------------+  |  +--------------+
   |              |  |  |Main EXE code |
   |              |  |  |(continued)   |
   +--------------+  |  +--------------+
                     |  |Virus         | Encrypted with polymorphic loops
                     |  +--------------+
                     |  |Virus loader  | Part 2, encrypted with sub
                     |  +--------------+ 70h bytes
                     +->|Saved code    | Original code of the patched subr,
                        +--------------+ 52h bytes, encrypted with sub
                        |Random data   | File length/9dh, the rest is 25h
                        +--------------+
</pre>
<p>Being executed, the loader looks for the host file name by using the PSP fields, opens the file, seeks to the file end, then reads, decrypts and executes the second part of the dropper. This part restores the patched subroutine, allocates system memory (conventional or UMB), reads the main virus body, and passes the control to the decryption polymorphic loop. That loop decrypts the virus body, and passes the control to Zhengxi's installation routine.</p>
<p>This is a very insidious infection way. The virus code is hidden in the file, and there is no direct entry to the virus code from the file header. The subroutine replaced with virus loader may be a "seldom-executed" one. For instance, a subroutine which displays an error message. So the virus may "sleep" in such files for a long time, and then jump out and infect the system under some limited conditions.</p>
<h3>Infecting archives</h3>
<p>In case of having to infect an archive, Zhengxi builds in memory the infected COM dropper image, and appends it to the archive. Those COM droppers always begin with a jmp instruction followed by random data, the encrypted virus code and the decryption polymorphic loop. The jmp instruction brings the control to this decryption loop.</p>
<p>The name of the COM dropper is random selected and finished with a .COM extension, for instance:</p>
<pre>HAIF.COM, UCM.COM, DOO.COM, VLG.COM, and so on.</pre>
<p>While processing the archive fields, Zhengxi does not use any external utility, but fills by itself all the necessary fields. The virus does not pack the dropper: it uses the "stored" method (the virus is stored in the archive "as is"). While infecting, Zhengxi checks the contents of the archives, and does not infect them twice.</p>
<h3>Infecting OBJ and LIB files</h3>
<p>While infecting OBJ/LIB modules, Zhengxi checks the fields of the file, creates, and inserts there a new object record which contains the viral code, encrypted with two polymorphic loops.</p>
<p>While scanning object files, the virus checks the code of these files for a C/Pascal subroutine "header" as well as while inserting into EXE files, and infects the files only if that code is found. But if the OBJ or the LIB module doesn't contain such code, the virus does not drop the loader code there, but overwrites a C/Pascal header with a call instruction.</p>
<p>Being linked to an executable file, that call brings the control to the virus polymorphic decryption loop. That loop decrypts the viral code and passes the control to the virus installation routine.</p>
<p>As well as in EXE files (inserting), that call may never receive the control, so Zhengxi may sleep for a long time. But under some conditions the virus may jump out and infect the system.</p>
<h2>Int 25h handler</h2>
<p>This handler carries out the stealth routine on int 25h level. While accessing to the directory entries, the virus substitutes the file length with the original one. While reading the header of an infected file, the virus restores and brings it in its original form.</p>
<p>The virus doesn't stealth 100% on int 25h level, of course. There are several ways to bypass this stealth routine. But if some antivirus program reads the file contents via int 21h DOS functions, then it reads the directory structure and then the file contents by absolute int 25h calls, and Zhengxi remains completely invisible.</p>
<h2>Trigger routine</h2>
<p>If while processing a ZIP file Zhengxi finds some record packed with the "stored" method, it checks the ZIP file date and time stamp. If the year of last modification of that file is 1996 or above, Zhengxi will look for all the files of all the directories on all the disks (from C: till Z:), and delete them (the files and whole subdirectory tree).</p>
<script type="text/rocketscript">var disqus_url = 'http://vxheaven.org/src.php?info=zhengxi.zip';</script></div><br/><div class="s2">
<div id="disqus_thread"></div>
<script type="text/rocketscript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'vxheaven'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"></div>
</body>
</html>
